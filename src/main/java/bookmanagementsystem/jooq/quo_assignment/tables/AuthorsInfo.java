/*
 * This file is generated by jOOQ.
 */
package bookmanagementsystem.jooq.quo_assignment.tables;


import bookmanagementsystem.jooq.quo_assignment.Keys;
import bookmanagementsystem.jooq.quo_assignment.QuoAssignment;
import bookmanagementsystem.jooq.quo_assignment.tables.AuthorIndex.AuthorIndexPath;
import bookmanagementsystem.jooq.quo_assignment.tables.records.AuthorsInfoRecord;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class AuthorsInfo extends TableImpl<AuthorsInfoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>quo_assignment.authors_info</code>
     */
    public static final AuthorsInfo AUTHORS_INFO = new AuthorsInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuthorsInfoRecord> getRecordType() {
        return AuthorsInfoRecord.class;
    }

    /**
     * The column <code>quo_assignment.authors_info.id</code>.
     */
    public final TableField<AuthorsInfoRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>quo_assignment.authors_info.author_name</code>.
     */
    public final TableField<AuthorsInfoRecord, String> AUTHOR_NAME = createField(DSL.name("author_name"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>quo_assignment.authors_info.birthday</code>.
     */
    public final TableField<AuthorsInfoRecord, LocalDate> BIRTHDAY = createField(DSL.name("birthday"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>quo_assignment.authors_info.created_by</code>.
     */
    public final TableField<AuthorsInfoRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>quo_assignment.authors_info.created_at</code>.
     */
    public final TableField<AuthorsInfoRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>quo_assignment.authors_info.updated_by</code>.
     */
    public final TableField<AuthorsInfoRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>quo_assignment.authors_info.updated_at</code>.
     */
    public final TableField<AuthorsInfoRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>quo_assignment.authors_info.delete_flg</code>.
     */
    public final TableField<AuthorsInfoRecord, String> DELETE_FLG = createField(DSL.name("delete_flg"), SQLDataType.VARCHAR(1), this, "");

    private AuthorsInfo(Name alias, Table<AuthorsInfoRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private AuthorsInfo(Name alias, Table<AuthorsInfoRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>quo_assignment.authors_info</code> table
     * reference
     */
    public AuthorsInfo(String alias) {
        this(DSL.name(alias), AUTHORS_INFO);
    }

    /**
     * Create an aliased <code>quo_assignment.authors_info</code> table
     * reference
     */
    public AuthorsInfo(Name alias) {
        this(alias, AUTHORS_INFO);
    }

    /**
     * Create a <code>quo_assignment.authors_info</code> table reference
     */
    public AuthorsInfo() {
        this(DSL.name("authors_info"), null);
    }

    public <O extends Record> AuthorsInfo(Table<O> path, ForeignKey<O, AuthorsInfoRecord> childPath, InverseForeignKey<O, AuthorsInfoRecord> parentPath) {
        super(path, childPath, parentPath, AUTHORS_INFO);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class AuthorsInfoPath extends AuthorsInfo implements Path<AuthorsInfoRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> AuthorsInfoPath(Table<O> path, ForeignKey<O, AuthorsInfoRecord> childPath, InverseForeignKey<O, AuthorsInfoRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private AuthorsInfoPath(Name alias, Table<AuthorsInfoRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public AuthorsInfoPath as(String alias) {
            return new AuthorsInfoPath(DSL.name(alias), this);
        }

        @Override
        public AuthorsInfoPath as(Name alias) {
            return new AuthorsInfoPath(alias, this);
        }

        @Override
        public AuthorsInfoPath as(Table<?> alias) {
            return new AuthorsInfoPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : QuoAssignment.QUO_ASSIGNMENT;
    }

    @Override
    public Identity<AuthorsInfoRecord, Integer> getIdentity() {
        return (Identity<AuthorsInfoRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<AuthorsInfoRecord> getPrimaryKey() {
        return Keys.AUTHORS_INFO_PKEY;
    }

    private transient AuthorIndexPath _authorIndex;

    /**
     * Get the implicit to-many join path to the
     * <code>quo_assignment.author_index</code> table
     */
    public AuthorIndexPath authorIndex() {
        if (_authorIndex == null)
            _authorIndex = new AuthorIndexPath(this, null, Keys.AUTHOR_INDEX__AUTHOR_INDEX_AUTHOR_ID_FKEY.getInverseKey());

        return _authorIndex;
    }

    @Override
    public AuthorsInfo as(String alias) {
        return new AuthorsInfo(DSL.name(alias), this);
    }

    @Override
    public AuthorsInfo as(Name alias) {
        return new AuthorsInfo(alias, this);
    }

    @Override
    public AuthorsInfo as(Table<?> alias) {
        return new AuthorsInfo(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AuthorsInfo rename(String name) {
        return new AuthorsInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AuthorsInfo rename(Name name) {
        return new AuthorsInfo(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AuthorsInfo rename(Table<?> name) {
        return new AuthorsInfo(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AuthorsInfo where(Condition condition) {
        return new AuthorsInfo(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AuthorsInfo where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AuthorsInfo where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AuthorsInfo where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AuthorsInfo where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AuthorsInfo where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AuthorsInfo where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AuthorsInfo where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AuthorsInfo whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AuthorsInfo whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
