/*
 * This file is generated by jOOQ.
 */
package bookmanagementsystem.jooq.quo_assignment.tables;


import bookmanagementsystem.jooq.quo_assignment.Keys;
import bookmanagementsystem.jooq.quo_assignment.QuoAssignment;
import bookmanagementsystem.jooq.quo_assignment.tables.AuthorIndex.AuthorIndexPath;
import bookmanagementsystem.jooq.quo_assignment.tables.records.BooksInfoRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Collection;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class BooksInfo extends TableImpl<BooksInfoRecord> {

    /**
     * The reference instance of <code>quo_assignment.books_info</code>
     */
    public static final BooksInfo BOOKS_INFO = new BooksInfo();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>quo_assignment.books_info.id</code>.
     */
    public final TableField<BooksInfoRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");
    /**
     * The column <code>quo_assignment.books_info.title</code>.
     */
    public final TableField<BooksInfoRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(256).nullable(false), this, "");
    /**
     * The column <code>quo_assignment.books_info.price</code>.
     */
    public final TableField<BooksInfoRecord, Double> PRICE = createField(DSL.name("price"), SQLDataType.DOUBLE.nullable(false), this, "");
    /**
     * The column <code>quo_assignment.books_info.publication_status</code>.
     */
    public final TableField<BooksInfoRecord, String> PUBLICATION_STATUS = createField(DSL.name("publication_status"), SQLDataType.VARCHAR(1).nullable(false), this, "");
    /**
     * The column <code>quo_assignment.books_info.created_by</code>.
     */
    public final TableField<BooksInfoRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(256), this, "");
    /**
     * The column <code>quo_assignment.books_info.created_at</code>.
     */
    public final TableField<BooksInfoRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6), this, "");
    /**
     * The column <code>quo_assignment.books_info.updated_by</code>.
     */
    public final TableField<BooksInfoRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.VARCHAR(256), this, "");
    /**
     * The column <code>quo_assignment.books_info.updated_at</code>.
     */
    public final TableField<BooksInfoRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6), this, "");
    /**
     * The column <code>quo_assignment.books_info.delete_flg</code>.
     */
    public final TableField<BooksInfoRecord, String> DELETE_FLG = createField(DSL.name("delete_flg"), SQLDataType.VARCHAR(1), this, "");
    private transient AuthorIndexPath _authorIndex;

    private BooksInfo(Name alias, Table<BooksInfoRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private BooksInfo(Name alias, Table<BooksInfoRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>quo_assignment.books_info</code> table reference
     */
    public BooksInfo(String alias) {
        this(DSL.name(alias), BOOKS_INFO);
    }

    /**
     * Create an aliased <code>quo_assignment.books_info</code> table reference
     */
    public BooksInfo(Name alias) {
        this(alias, BOOKS_INFO);
    }

    /**
     * Create a <code>quo_assignment.books_info</code> table reference
     */
    public BooksInfo() {
        this(DSL.name("books_info"), null);
    }

    public <O extends Record> BooksInfo(Table<O> path, ForeignKey<O, BooksInfoRecord> childPath, InverseForeignKey<O, BooksInfoRecord> parentPath) {
        super(path, childPath, parentPath, BOOKS_INFO);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BooksInfoRecord> getRecordType() {
        return BooksInfoRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : QuoAssignment.QUO_ASSIGNMENT;
    }

    @Override
    public Identity<BooksInfoRecord, Integer> getIdentity() {
        return (Identity<BooksInfoRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<BooksInfoRecord> getPrimaryKey() {
        return Keys.BOOKS_INFO_PKEY;
    }

    /**
     * Get the implicit to-many join path to the
     * <code>quo_assignment.author_index</code> table
     */
    public AuthorIndexPath authorIndex() {
        if (_authorIndex == null)
            _authorIndex = new AuthorIndexPath(this, null, Keys.AUTHOR_INDEX__AUTHOR_INDEX_BOOK_ID_FKEY.getInverseKey());

        return _authorIndex;
    }

    @Override
    public BooksInfo as(String alias) {
        return new BooksInfo(DSL.name(alias), this);
    }

    @Override
    public BooksInfo as(Name alias) {
        return new BooksInfo(alias, this);
    }

    @Override
    public BooksInfo as(Table<?> alias) {
        return new BooksInfo(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BooksInfo rename(String name) {
        return new BooksInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BooksInfo rename(Name name) {
        return new BooksInfo(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BooksInfo rename(Table<?> name) {
        return new BooksInfo(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BooksInfo where(Condition condition) {
        return new BooksInfo(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BooksInfo where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BooksInfo where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BooksInfo where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BooksInfo where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BooksInfo where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BooksInfo where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BooksInfo where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BooksInfo whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BooksInfo whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class BooksInfoPath extends BooksInfo implements Path<BooksInfoRecord> {

        private static final long serialVersionUID = 1L;

        public <O extends Record> BooksInfoPath(Table<O> path, ForeignKey<O, BooksInfoRecord> childPath, InverseForeignKey<O, BooksInfoRecord> parentPath) {
            super(path, childPath, parentPath);
        }

        private BooksInfoPath(Name alias, Table<BooksInfoRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public BooksInfoPath as(String alias) {
            return new BooksInfoPath(DSL.name(alias), this);
        }

        @Override
        public BooksInfoPath as(Name alias) {
            return new BooksInfoPath(alias, this);
        }

        @Override
        public BooksInfoPath as(Table<?> alias) {
            return new BooksInfoPath(alias.getQualifiedName(), this);
        }
    }
}
