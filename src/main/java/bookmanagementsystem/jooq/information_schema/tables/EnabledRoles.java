/*
 * This file is generated by jOOQ.
 */
package bookmanagementsystem.jooq.information_schema.tables;


import bookmanagementsystem.jooq.information_schema.Domains;
import bookmanagementsystem.jooq.information_schema.InformationSchema;
import bookmanagementsystem.jooq.information_schema.tables.records.EnabledRolesRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import java.util.Collection;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class EnabledRoles extends TableImpl<EnabledRolesRecord> {

    /**
     * The reference instance of <code>information_schema.enabled_roles</code>
     */
    public static final EnabledRoles ENABLED_ROLES = new EnabledRoles();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>information_schema.enabled_roles.role_name</code>.
     */
    public final TableField<EnabledRolesRecord, String> ROLE_NAME = createField(DSL.name("role_name"), Domains.SQL_IDENTIFIER.getDataType(), this, "");

    private EnabledRoles(Name alias, Table<EnabledRolesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private EnabledRoles(Name alias, Table<EnabledRolesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
                create view "enabled_roles" as  SELECT (rolname)::information_schema.sql_identifier AS role_name
                 FROM pg_authid a
                WHERE pg_has_role(oid, 'USAGE'::text);
                """), where);
    }

    /**
     * Create an aliased <code>information_schema.enabled_roles</code> table
     * reference
     */
    public EnabledRoles(String alias) {
        this(DSL.name(alias), ENABLED_ROLES);
    }

    /**
     * Create an aliased <code>information_schema.enabled_roles</code> table
     * reference
     */
    public EnabledRoles(Name alias) {
        this(alias, ENABLED_ROLES);
    }

    /**
     * Create a <code>information_schema.enabled_roles</code> table reference
     */
    public EnabledRoles() {
        this(DSL.name("enabled_roles"), null);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EnabledRolesRecord> getRecordType() {
        return EnabledRolesRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    public EnabledRoles as(String alias) {
        return new EnabledRoles(DSL.name(alias), this);
    }

    @Override
    public EnabledRoles as(Name alias) {
        return new EnabledRoles(alias, this);
    }

    @Override
    public EnabledRoles as(Table<?> alias) {
        return new EnabledRoles(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public EnabledRoles rename(String name) {
        return new EnabledRoles(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EnabledRoles rename(Name name) {
        return new EnabledRoles(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public EnabledRoles rename(Table<?> name) {
        return new EnabledRoles(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EnabledRoles where(Condition condition) {
        return new EnabledRoles(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EnabledRoles where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EnabledRoles where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EnabledRoles where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EnabledRoles where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EnabledRoles where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EnabledRoles where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EnabledRoles where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EnabledRoles whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EnabledRoles whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
