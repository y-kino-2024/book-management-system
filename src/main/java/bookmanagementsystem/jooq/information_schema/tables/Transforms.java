/*
 * This file is generated by jOOQ.
 */
package bookmanagementsystem.jooq.information_schema.tables;


import bookmanagementsystem.jooq.information_schema.Domains;
import bookmanagementsystem.jooq.information_schema.InformationSchema;
import bookmanagementsystem.jooq.information_schema.tables.records.TransformsRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import java.util.Collection;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class Transforms extends TableImpl<TransformsRecord> {

    /**
     * The reference instance of <code>information_schema.transforms</code>
     */
    public static final Transforms TRANSFORMS = new Transforms();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>information_schema.transforms.udt_catalog</code>.
     */
    public final TableField<TransformsRecord, String> UDT_CATALOG = createField(DSL.name("udt_catalog"), Domains.SQL_IDENTIFIER.getDataType(), this, "");
    /**
     * The column <code>information_schema.transforms.udt_schema</code>.
     */
    public final TableField<TransformsRecord, String> UDT_SCHEMA = createField(DSL.name("udt_schema"), Domains.SQL_IDENTIFIER.getDataType(), this, "");
    /**
     * The column <code>information_schema.transforms.udt_name</code>.
     */
    public final TableField<TransformsRecord, String> UDT_NAME = createField(DSL.name("udt_name"), Domains.SQL_IDENTIFIER.getDataType(), this, "");
    /**
     * The column <code>information_schema.transforms.specific_catalog</code>.
     */
    public final TableField<TransformsRecord, String> SPECIFIC_CATALOG = createField(DSL.name("specific_catalog"), Domains.SQL_IDENTIFIER.getDataType(), this, "");
    /**
     * The column <code>information_schema.transforms.specific_schema</code>.
     */
    public final TableField<TransformsRecord, String> SPECIFIC_SCHEMA = createField(DSL.name("specific_schema"), Domains.SQL_IDENTIFIER.getDataType(), this, "");
    /**
     * The column <code>information_schema.transforms.specific_name</code>.
     */
    public final TableField<TransformsRecord, String> SPECIFIC_NAME = createField(DSL.name("specific_name"), Domains.SQL_IDENTIFIER.getDataType(), this, "");
    /**
     * The column <code>information_schema.transforms.group_name</code>.
     */
    public final TableField<TransformsRecord, String> GROUP_NAME = createField(DSL.name("group_name"), Domains.SQL_IDENTIFIER.getDataType(), this, "");
    /**
     * The column <code>information_schema.transforms.transform_type</code>.
     */
    public final TableField<TransformsRecord, String> TRANSFORM_TYPE = createField(DSL.name("transform_type"), Domains.CHARACTER_DATA.getDataType(), this, "");

    private Transforms(Name alias, Table<TransformsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Transforms(Name alias, Table<TransformsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
                 create view "transforms" as  SELECT (current_database())::information_schema.sql_identifier AS udt_catalog,
                    (nt.nspname)::information_schema.sql_identifier AS udt_schema,
                    (t.typname)::information_schema.sql_identifier AS udt_name,
                    (current_database())::information_schema.sql_identifier AS specific_catalog,
                    (np.nspname)::information_schema.sql_identifier AS specific_schema,
                    (nameconcatoid(p.proname, p.oid))::information_schema.sql_identifier AS specific_name,
                    (l.lanname)::information_schema.sql_identifier AS group_name,
                    ('FROM SQL'::character varying)::information_schema.character_data AS transform_type
                   FROM (((((pg_type t
                     JOIN pg_transform x ON ((t.oid = x.trftype)))
                     JOIN pg_language l ON ((x.trflang = l.oid)))
                     JOIN pg_proc p ON (((x.trffromsql)::oid = p.oid)))
                     JOIN pg_namespace nt ON ((t.typnamespace = nt.oid)))
                     JOIN pg_namespace np ON ((p.pronamespace = np.oid)))
                UNION
                 SELECT (current_database())::information_schema.sql_identifier AS udt_catalog,
                    (nt.nspname)::information_schema.sql_identifier AS udt_schema,
                    (t.typname)::information_schema.sql_identifier AS udt_name,
                    (current_database())::information_schema.sql_identifier AS specific_catalog,
                    (np.nspname)::information_schema.sql_identifier AS specific_schema,
                    (nameconcatoid(p.proname, p.oid))::information_schema.sql_identifier AS specific_name,
                    (l.lanname)::information_schema.sql_identifier AS group_name,
                    ('TO SQL'::character varying)::information_schema.character_data AS transform_type
                   FROM (((((pg_type t
                     JOIN pg_transform x ON ((t.oid = x.trftype)))
                     JOIN pg_language l ON ((x.trflang = l.oid)))
                     JOIN pg_proc p ON (((x.trftosql)::oid = p.oid)))
                     JOIN pg_namespace nt ON ((t.typnamespace = nt.oid)))
                     JOIN pg_namespace np ON ((p.pronamespace = np.oid)))
                  ORDER BY 1, 2, 3, 7, 8;
                """), where);
    }

    /**
     * Create an aliased <code>information_schema.transforms</code> table
     * reference
     */
    public Transforms(String alias) {
        this(DSL.name(alias), TRANSFORMS);
    }

    /**
     * Create an aliased <code>information_schema.transforms</code> table
     * reference
     */
    public Transforms(Name alias) {
        this(alias, TRANSFORMS);
    }

    /**
     * Create a <code>information_schema.transforms</code> table reference
     */
    public Transforms() {
        this(DSL.name("transforms"), null);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransformsRecord> getRecordType() {
        return TransformsRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    public Transforms as(String alias) {
        return new Transforms(DSL.name(alias), this);
    }

    @Override
    public Transforms as(Name alias) {
        return new Transforms(alias, this);
    }

    @Override
    public Transforms as(Table<?> alias) {
        return new Transforms(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Transforms rename(String name) {
        return new Transforms(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Transforms rename(Name name) {
        return new Transforms(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Transforms rename(Table<?> name) {
        return new Transforms(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Transforms where(Condition condition) {
        return new Transforms(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Transforms where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Transforms where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Transforms where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Transforms where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Transforms where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Transforms where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Transforms where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Transforms whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Transforms whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
