/*
 * This file is generated by jOOQ.
 */
package bookmanagementsystem.jooq.information_schema.tables;


import bookmanagementsystem.jooq.information_schema.InformationSchema;
import bookmanagementsystem.jooq.information_schema.tables.records._PgForeignTableColumnsRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Collection;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class _PgForeignTableColumns extends TableImpl<_PgForeignTableColumnsRecord> {

    /**
     * The reference instance of
     * <code>information_schema._pg_foreign_table_columns</code>
     */
    public static final _PgForeignTableColumns _PG_FOREIGN_TABLE_COLUMNS = new _PgForeignTableColumns();
    private static final long serialVersionUID = 1L;
    /**
     * The column
     * <code>information_schema._pg_foreign_table_columns.nspname</code>.
     */
    public final TableField<_PgForeignTableColumnsRecord, String> NSPNAME = createField(DSL.name("nspname"), SQLDataType.VARCHAR, this, "");
    /**
     * The column
     * <code>information_schema._pg_foreign_table_columns.relname</code>.
     */
    public final TableField<_PgForeignTableColumnsRecord, String> RELNAME = createField(DSL.name("relname"), SQLDataType.VARCHAR, this, "");
    /**
     * The column
     * <code>information_schema._pg_foreign_table_columns.attname</code>.
     */
    public final TableField<_PgForeignTableColumnsRecord, String> ATTNAME = createField(DSL.name("attname"), SQLDataType.VARCHAR, this, "");
    /**
     * The column
     * <code>information_schema._pg_foreign_table_columns.attfdwoptions</code>.
     */
    public final TableField<_PgForeignTableColumnsRecord, String[]> ATTFDWOPTIONS = createField(DSL.name("attfdwoptions"), SQLDataType.CLOB.array(), this, "");

    private _PgForeignTableColumns(Name alias, Table<_PgForeignTableColumnsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private _PgForeignTableColumns(Name alias, Table<_PgForeignTableColumnsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
                create view "_pg_foreign_table_columns" as  SELECT n.nspname,
                  c.relname,
                  a.attname,
                  a.attfdwoptions
                 FROM pg_foreign_table t,
                  pg_authid u,
                  pg_namespace n,
                  pg_class c,
                  pg_attribute a
                WHERE ((u.oid = c.relowner) AND (pg_has_role(c.relowner, 'USAGE'::text) OR has_column_privilege(c.oid, a.attnum, 'SELECT, INSERT, UPDATE, REFERENCES'::text)) AND (n.oid = c.relnamespace) AND (c.oid = t.ftrelid) AND (c.relkind = 'f'::"char") AND (a.attrelid = c.oid) AND (a.attnum > 0));
                """), where);
    }

    /**
     * Create an aliased
     * <code>information_schema._pg_foreign_table_columns</code> table reference
     */
    public _PgForeignTableColumns(String alias) {
        this(DSL.name(alias), _PG_FOREIGN_TABLE_COLUMNS);
    }

    /**
     * Create an aliased
     * <code>information_schema._pg_foreign_table_columns</code> table reference
     */
    public _PgForeignTableColumns(Name alias) {
        this(alias, _PG_FOREIGN_TABLE_COLUMNS);
    }

    /**
     * Create a <code>information_schema._pg_foreign_table_columns</code> table
     * reference
     */
    public _PgForeignTableColumns() {
        this(DSL.name("_pg_foreign_table_columns"), null);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<_PgForeignTableColumnsRecord> getRecordType() {
        return _PgForeignTableColumnsRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    public _PgForeignTableColumns as(String alias) {
        return new _PgForeignTableColumns(DSL.name(alias), this);
    }

    @Override
    public _PgForeignTableColumns as(Name alias) {
        return new _PgForeignTableColumns(alias, this);
    }

    @Override
    public _PgForeignTableColumns as(Table<?> alias) {
        return new _PgForeignTableColumns(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public _PgForeignTableColumns rename(String name) {
        return new _PgForeignTableColumns(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public _PgForeignTableColumns rename(Name name) {
        return new _PgForeignTableColumns(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public _PgForeignTableColumns rename(Table<?> name) {
        return new _PgForeignTableColumns(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public _PgForeignTableColumns where(Condition condition) {
        return new _PgForeignTableColumns(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public _PgForeignTableColumns where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public _PgForeignTableColumns where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public _PgForeignTableColumns where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public _PgForeignTableColumns where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public _PgForeignTableColumns where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public _PgForeignTableColumns where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public _PgForeignTableColumns where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public _PgForeignTableColumns whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public _PgForeignTableColumns whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
