/*
 * This file is generated by jOOQ.
 */
package bookmanagementsystem.jooq.information_schema.tables;


import bookmanagementsystem.jooq.information_schema.Domains;
import bookmanagementsystem.jooq.information_schema.InformationSchema;
import bookmanagementsystem.jooq.information_schema.tables.records.SqlPartsRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import java.util.Collection;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class SqlParts extends TableImpl<SqlPartsRecord> {

    /**
     * The reference instance of <code>information_schema.sql_parts</code>
     */
    public static final SqlParts SQL_PARTS = new SqlParts();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>information_schema.sql_parts.feature_id</code>.
     */
    public final TableField<SqlPartsRecord, String> FEATURE_ID = createField(DSL.name("feature_id"), Domains.CHARACTER_DATA.getDataType(), this, "");
    /**
     * The column <code>information_schema.sql_parts.feature_name</code>.
     */
    public final TableField<SqlPartsRecord, String> FEATURE_NAME = createField(DSL.name("feature_name"), Domains.CHARACTER_DATA.getDataType(), this, "");
    /**
     * The column <code>information_schema.sql_parts.is_supported</code>.
     */
    public final TableField<SqlPartsRecord, String> IS_SUPPORTED = createField(DSL.name("is_supported"), Domains.YES_OR_NO.getDataType(), this, "");
    /**
     * The column <code>information_schema.sql_parts.is_verified_by</code>.
     */
    public final TableField<SqlPartsRecord, String> IS_VERIFIED_BY = createField(DSL.name("is_verified_by"), Domains.CHARACTER_DATA.getDataType(), this, "");
    /**
     * The column <code>information_schema.sql_parts.comments</code>.
     */
    public final TableField<SqlPartsRecord, String> COMMENTS = createField(DSL.name("comments"), Domains.CHARACTER_DATA.getDataType(), this, "");

    private SqlParts(Name alias, Table<SqlPartsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private SqlParts(Name alias, Table<SqlPartsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>information_schema.sql_parts</code> table
     * reference
     */
    public SqlParts(String alias) {
        this(DSL.name(alias), SQL_PARTS);
    }

    /**
     * Create an aliased <code>information_schema.sql_parts</code> table
     * reference
     */
    public SqlParts(Name alias) {
        this(alias, SQL_PARTS);
    }

    /**
     * Create a <code>information_schema.sql_parts</code> table reference
     */
    public SqlParts() {
        this(DSL.name("sql_parts"), null);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SqlPartsRecord> getRecordType() {
        return SqlPartsRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    public SqlParts as(String alias) {
        return new SqlParts(DSL.name(alias), this);
    }

    @Override
    public SqlParts as(Name alias) {
        return new SqlParts(alias, this);
    }

    @Override
    public SqlParts as(Table<?> alias) {
        return new SqlParts(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SqlParts rename(String name) {
        return new SqlParts(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SqlParts rename(Name name) {
        return new SqlParts(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SqlParts rename(Table<?> name) {
        return new SqlParts(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SqlParts where(Condition condition) {
        return new SqlParts(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SqlParts where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SqlParts where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SqlParts where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SqlParts where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SqlParts where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SqlParts where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SqlParts where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SqlParts whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SqlParts whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
