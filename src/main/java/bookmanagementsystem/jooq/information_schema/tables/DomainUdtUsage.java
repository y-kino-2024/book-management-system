/*
 * This file is generated by jOOQ.
 */
package bookmanagementsystem.jooq.information_schema.tables;


import bookmanagementsystem.jooq.information_schema.Domains;
import bookmanagementsystem.jooq.information_schema.InformationSchema;
import bookmanagementsystem.jooq.information_schema.tables.records.DomainUdtUsageRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class DomainUdtUsage extends TableImpl<DomainUdtUsageRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>information_schema.domain_udt_usage</code>
     */
    public static final DomainUdtUsage DOMAIN_UDT_USAGE = new DomainUdtUsage();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DomainUdtUsageRecord> getRecordType() {
        return DomainUdtUsageRecord.class;
    }

    /**
     * The column <code>information_schema.domain_udt_usage.udt_catalog</code>.
     */
    public final TableField<DomainUdtUsageRecord, String> UDT_CATALOG = createField(DSL.name("udt_catalog"), Domains.SQL_IDENTIFIER.getDataType(), this, "");

    /**
     * The column <code>information_schema.domain_udt_usage.udt_schema</code>.
     */
    public final TableField<DomainUdtUsageRecord, String> UDT_SCHEMA = createField(DSL.name("udt_schema"), Domains.SQL_IDENTIFIER.getDataType(), this, "");

    /**
     * The column <code>information_schema.domain_udt_usage.udt_name</code>.
     */
    public final TableField<DomainUdtUsageRecord, String> UDT_NAME = createField(DSL.name("udt_name"), Domains.SQL_IDENTIFIER.getDataType(), this, "");

    /**
     * The column
     * <code>information_schema.domain_udt_usage.domain_catalog</code>.
     */
    public final TableField<DomainUdtUsageRecord, String> DOMAIN_CATALOG = createField(DSL.name("domain_catalog"), Domains.SQL_IDENTIFIER.getDataType(), this, "");

    /**
     * The column
     * <code>information_schema.domain_udt_usage.domain_schema</code>.
     */
    public final TableField<DomainUdtUsageRecord, String> DOMAIN_SCHEMA = createField(DSL.name("domain_schema"), Domains.SQL_IDENTIFIER.getDataType(), this, "");

    /**
     * The column <code>information_schema.domain_udt_usage.domain_name</code>.
     */
    public final TableField<DomainUdtUsageRecord, String> DOMAIN_NAME = createField(DSL.name("domain_name"), Domains.SQL_IDENTIFIER.getDataType(), this, "");

    private DomainUdtUsage(Name alias, Table<DomainUdtUsageRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private DomainUdtUsage(Name alias, Table<DomainUdtUsageRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "domain_udt_usage" as  SELECT (current_database())::information_schema.sql_identifier AS udt_catalog,
          (nbt.nspname)::information_schema.sql_identifier AS udt_schema,
          (bt.typname)::information_schema.sql_identifier AS udt_name,
          (current_database())::information_schema.sql_identifier AS domain_catalog,
          (nt.nspname)::information_schema.sql_identifier AS domain_schema,
          (t.typname)::information_schema.sql_identifier AS domain_name
         FROM pg_type t,
          pg_namespace nt,
          pg_type bt,
          pg_namespace nbt
        WHERE ((t.typnamespace = nt.oid) AND (t.typbasetype = bt.oid) AND (bt.typnamespace = nbt.oid) AND (t.typtype = 'd'::"char") AND pg_has_role(bt.typowner, 'USAGE'::text));
        """), where);
    }

    /**
     * Create an aliased <code>information_schema.domain_udt_usage</code> table
     * reference
     */
    public DomainUdtUsage(String alias) {
        this(DSL.name(alias), DOMAIN_UDT_USAGE);
    }

    /**
     * Create an aliased <code>information_schema.domain_udt_usage</code> table
     * reference
     */
    public DomainUdtUsage(Name alias) {
        this(alias, DOMAIN_UDT_USAGE);
    }

    /**
     * Create a <code>information_schema.domain_udt_usage</code> table reference
     */
    public DomainUdtUsage() {
        this(DSL.name("domain_udt_usage"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    public DomainUdtUsage as(String alias) {
        return new DomainUdtUsage(DSL.name(alias), this);
    }

    @Override
    public DomainUdtUsage as(Name alias) {
        return new DomainUdtUsage(alias, this);
    }

    @Override
    public DomainUdtUsage as(Table<?> alias) {
        return new DomainUdtUsage(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public DomainUdtUsage rename(String name) {
        return new DomainUdtUsage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DomainUdtUsage rename(Name name) {
        return new DomainUdtUsage(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public DomainUdtUsage rename(Table<?> name) {
        return new DomainUdtUsage(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DomainUdtUsage where(Condition condition) {
        return new DomainUdtUsage(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DomainUdtUsage where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DomainUdtUsage where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DomainUdtUsage where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DomainUdtUsage where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DomainUdtUsage where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DomainUdtUsage where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DomainUdtUsage where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DomainUdtUsage whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DomainUdtUsage whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
