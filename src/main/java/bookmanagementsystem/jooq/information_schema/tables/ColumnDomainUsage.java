/*
 * This file is generated by jOOQ.
 */
package bookmanagementsystem.jooq.information_schema.tables;


import bookmanagementsystem.jooq.information_schema.Domains;
import bookmanagementsystem.jooq.information_schema.InformationSchema;
import bookmanagementsystem.jooq.information_schema.tables.records.ColumnDomainUsageRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import java.util.Collection;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class ColumnDomainUsage extends TableImpl<ColumnDomainUsageRecord> {

    /**
     * The reference instance of
     * <code>information_schema.column_domain_usage</code>
     */
    public static final ColumnDomainUsage COLUMN_DOMAIN_USAGE = new ColumnDomainUsage();
    private static final long serialVersionUID = 1L;
    /**
     * The column
     * <code>information_schema.column_domain_usage.domain_catalog</code>.
     */
    public final TableField<ColumnDomainUsageRecord, String> DOMAIN_CATALOG = createField(DSL.name("domain_catalog"), Domains.SQL_IDENTIFIER.getDataType(), this, "");
    /**
     * The column
     * <code>information_schema.column_domain_usage.domain_schema</code>.
     */
    public final TableField<ColumnDomainUsageRecord, String> DOMAIN_SCHEMA = createField(DSL.name("domain_schema"), Domains.SQL_IDENTIFIER.getDataType(), this, "");
    /**
     * The column
     * <code>information_schema.column_domain_usage.domain_name</code>.
     */
    public final TableField<ColumnDomainUsageRecord, String> DOMAIN_NAME = createField(DSL.name("domain_name"), Domains.SQL_IDENTIFIER.getDataType(), this, "");
    /**
     * The column
     * <code>information_schema.column_domain_usage.table_catalog</code>.
     */
    public final TableField<ColumnDomainUsageRecord, String> TABLE_CATALOG = createField(DSL.name("table_catalog"), Domains.SQL_IDENTIFIER.getDataType(), this, "");
    /**
     * The column
     * <code>information_schema.column_domain_usage.table_schema</code>.
     */
    public final TableField<ColumnDomainUsageRecord, String> TABLE_SCHEMA = createField(DSL.name("table_schema"), Domains.SQL_IDENTIFIER.getDataType(), this, "");
    /**
     * The column
     * <code>information_schema.column_domain_usage.table_name</code>.
     */
    public final TableField<ColumnDomainUsageRecord, String> TABLE_NAME = createField(DSL.name("table_name"), Domains.SQL_IDENTIFIER.getDataType(), this, "");
    /**
     * The column
     * <code>information_schema.column_domain_usage.column_name</code>.
     */
    public final TableField<ColumnDomainUsageRecord, String> COLUMN_NAME = createField(DSL.name("column_name"), Domains.SQL_IDENTIFIER.getDataType(), this, "");

    private ColumnDomainUsage(Name alias, Table<ColumnDomainUsageRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ColumnDomainUsage(Name alias, Table<ColumnDomainUsageRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
                create view "column_domain_usage" as  SELECT (current_database())::information_schema.sql_identifier AS domain_catalog,
                  (nt.nspname)::information_schema.sql_identifier AS domain_schema,
                  (t.typname)::information_schema.sql_identifier AS domain_name,
                  (current_database())::information_schema.sql_identifier AS table_catalog,
                  (nc.nspname)::information_schema.sql_identifier AS table_schema,
                  (c.relname)::information_schema.sql_identifier AS table_name,
                  (a.attname)::information_schema.sql_identifier AS column_name
                 FROM pg_type t,
                  pg_namespace nt,
                  pg_class c,
                  pg_namespace nc,
                  pg_attribute a
                WHERE ((t.typnamespace = nt.oid) AND (c.relnamespace = nc.oid) AND (a.attrelid = c.oid) AND (a.atttypid = t.oid) AND (t.typtype = 'd'::"char") AND (c.relkind = ANY (ARRAY['r'::"char", 'v'::"char", 'f'::"char", 'p'::"char"])) AND (a.attnum > 0) AND (NOT a.attisdropped) AND pg_has_role(t.typowner, 'USAGE'::text));
                """), where);
    }

    /**
     * Create an aliased <code>information_schema.column_domain_usage</code>
     * table reference
     */
    public ColumnDomainUsage(String alias) {
        this(DSL.name(alias), COLUMN_DOMAIN_USAGE);
    }

    /**
     * Create an aliased <code>information_schema.column_domain_usage</code>
     * table reference
     */
    public ColumnDomainUsage(Name alias) {
        this(alias, COLUMN_DOMAIN_USAGE);
    }

    /**
     * Create a <code>information_schema.column_domain_usage</code> table
     * reference
     */
    public ColumnDomainUsage() {
        this(DSL.name("column_domain_usage"), null);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ColumnDomainUsageRecord> getRecordType() {
        return ColumnDomainUsageRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    public ColumnDomainUsage as(String alias) {
        return new ColumnDomainUsage(DSL.name(alias), this);
    }

    @Override
    public ColumnDomainUsage as(Name alias) {
        return new ColumnDomainUsage(alias, this);
    }

    @Override
    public ColumnDomainUsage as(Table<?> alias) {
        return new ColumnDomainUsage(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ColumnDomainUsage rename(String name) {
        return new ColumnDomainUsage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ColumnDomainUsage rename(Name name) {
        return new ColumnDomainUsage(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ColumnDomainUsage rename(Table<?> name) {
        return new ColumnDomainUsage(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ColumnDomainUsage where(Condition condition) {
        return new ColumnDomainUsage(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ColumnDomainUsage where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ColumnDomainUsage where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ColumnDomainUsage where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ColumnDomainUsage where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ColumnDomainUsage where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ColumnDomainUsage where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ColumnDomainUsage where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ColumnDomainUsage whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ColumnDomainUsage whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
