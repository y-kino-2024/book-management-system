/*
 * This file is generated by jOOQ.
 */
package bookmanagementsystem.jooq.information_schema.tables;


import bookmanagementsystem.jooq.information_schema.Domains;
import bookmanagementsystem.jooq.information_schema.InformationSchema;
import bookmanagementsystem.jooq.information_schema.tables.records.SqlSizingRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import java.util.Collection;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class SqlSizing extends TableImpl<SqlSizingRecord> {

    /**
     * The reference instance of <code>information_schema.sql_sizing</code>
     */
    public static final SqlSizing SQL_SIZING = new SqlSizing();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>information_schema.sql_sizing.sizing_id</code>.
     */
    public final TableField<SqlSizingRecord, Integer> SIZING_ID = createField(DSL.name("sizing_id"), Domains.CARDINAL_NUMBER.getDataType(), this, "");
    /**
     * The column <code>information_schema.sql_sizing.sizing_name</code>.
     */
    public final TableField<SqlSizingRecord, String> SIZING_NAME = createField(DSL.name("sizing_name"), Domains.CHARACTER_DATA.getDataType(), this, "");
    /**
     * The column <code>information_schema.sql_sizing.supported_value</code>.
     */
    public final TableField<SqlSizingRecord, Integer> SUPPORTED_VALUE = createField(DSL.name("supported_value"), Domains.CARDINAL_NUMBER.getDataType(), this, "");
    /**
     * The column <code>information_schema.sql_sizing.comments</code>.
     */
    public final TableField<SqlSizingRecord, String> COMMENTS = createField(DSL.name("comments"), Domains.CHARACTER_DATA.getDataType(), this, "");

    private SqlSizing(Name alias, Table<SqlSizingRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private SqlSizing(Name alias, Table<SqlSizingRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>information_schema.sql_sizing</code> table
     * reference
     */
    public SqlSizing(String alias) {
        this(DSL.name(alias), SQL_SIZING);
    }

    /**
     * Create an aliased <code>information_schema.sql_sizing</code> table
     * reference
     */
    public SqlSizing(Name alias) {
        this(alias, SQL_SIZING);
    }

    /**
     * Create a <code>information_schema.sql_sizing</code> table reference
     */
    public SqlSizing() {
        this(DSL.name("sql_sizing"), null);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SqlSizingRecord> getRecordType() {
        return SqlSizingRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    public SqlSizing as(String alias) {
        return new SqlSizing(DSL.name(alias), this);
    }

    @Override
    public SqlSizing as(Name alias) {
        return new SqlSizing(alias, this);
    }

    @Override
    public SqlSizing as(Table<?> alias) {
        return new SqlSizing(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SqlSizing rename(String name) {
        return new SqlSizing(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SqlSizing rename(Name name) {
        return new SqlSizing(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SqlSizing rename(Table<?> name) {
        return new SqlSizing(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SqlSizing where(Condition condition) {
        return new SqlSizing(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SqlSizing where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SqlSizing where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SqlSizing where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SqlSizing where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SqlSizing where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SqlSizing where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SqlSizing where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SqlSizing whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SqlSizing whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
