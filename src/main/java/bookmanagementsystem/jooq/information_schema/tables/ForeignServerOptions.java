/*
 * This file is generated by jOOQ.
 */
package bookmanagementsystem.jooq.information_schema.tables;


import bookmanagementsystem.jooq.information_schema.Domains;
import bookmanagementsystem.jooq.information_schema.InformationSchema;
import bookmanagementsystem.jooq.information_schema.tables.records.ForeignServerOptionsRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ForeignServerOptions extends TableImpl<ForeignServerOptionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>information_schema.foreign_server_options</code>
     */
    public static final ForeignServerOptions FOREIGN_SERVER_OPTIONS = new ForeignServerOptions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ForeignServerOptionsRecord> getRecordType() {
        return ForeignServerOptionsRecord.class;
    }

    /**
     * The column
     * <code>information_schema.foreign_server_options.foreign_server_catalog</code>.
     */
    public final TableField<ForeignServerOptionsRecord, String> FOREIGN_SERVER_CATALOG = createField(DSL.name("foreign_server_catalog"), Domains.SQL_IDENTIFIER.getDataType(), this, "");

    /**
     * The column
     * <code>information_schema.foreign_server_options.foreign_server_name</code>.
     */
    public final TableField<ForeignServerOptionsRecord, String> FOREIGN_SERVER_NAME = createField(DSL.name("foreign_server_name"), Domains.SQL_IDENTIFIER.getDataType(), this, "");

    /**
     * The column
     * <code>information_schema.foreign_server_options.option_name</code>.
     */
    public final TableField<ForeignServerOptionsRecord, String> OPTION_NAME = createField(DSL.name("option_name"), Domains.SQL_IDENTIFIER.getDataType(), this, "");

    /**
     * The column
     * <code>information_schema.foreign_server_options.option_value</code>.
     */
    public final TableField<ForeignServerOptionsRecord, String> OPTION_VALUE = createField(DSL.name("option_value"), Domains.CHARACTER_DATA.getDataType(), this, "");

    private ForeignServerOptions(Name alias, Table<ForeignServerOptionsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ForeignServerOptions(Name alias, Table<ForeignServerOptionsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "foreign_server_options" as  SELECT foreign_server_catalog,
         foreign_server_name,
         ((pg_options_to_table(srvoptions)).option_name)::information_schema.sql_identifier AS option_name,
         ((pg_options_to_table(srvoptions)).option_value)::information_schema.character_data AS option_value
        FROM information_schema._pg_foreign_servers s;
        """), where);
    }

    /**
     * Create an aliased <code>information_schema.foreign_server_options</code>
     * table reference
     */
    public ForeignServerOptions(String alias) {
        this(DSL.name(alias), FOREIGN_SERVER_OPTIONS);
    }

    /**
     * Create an aliased <code>information_schema.foreign_server_options</code>
     * table reference
     */
    public ForeignServerOptions(Name alias) {
        this(alias, FOREIGN_SERVER_OPTIONS);
    }

    /**
     * Create a <code>information_schema.foreign_server_options</code> table
     * reference
     */
    public ForeignServerOptions() {
        this(DSL.name("foreign_server_options"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    public ForeignServerOptions as(String alias) {
        return new ForeignServerOptions(DSL.name(alias), this);
    }

    @Override
    public ForeignServerOptions as(Name alias) {
        return new ForeignServerOptions(alias, this);
    }

    @Override
    public ForeignServerOptions as(Table<?> alias) {
        return new ForeignServerOptions(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ForeignServerOptions rename(String name) {
        return new ForeignServerOptions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ForeignServerOptions rename(Name name) {
        return new ForeignServerOptions(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ForeignServerOptions rename(Table<?> name) {
        return new ForeignServerOptions(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ForeignServerOptions where(Condition condition) {
        return new ForeignServerOptions(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ForeignServerOptions where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ForeignServerOptions where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ForeignServerOptions where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ForeignServerOptions where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ForeignServerOptions where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ForeignServerOptions where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ForeignServerOptions where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ForeignServerOptions whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ForeignServerOptions whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
