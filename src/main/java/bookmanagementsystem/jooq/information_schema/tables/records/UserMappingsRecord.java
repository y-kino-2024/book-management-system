/*
 * This file is generated by jOOQ.
 */
package bookmanagementsystem.jooq.information_schema.tables.records;


import bookmanagementsystem.jooq.information_schema.tables.UserMappings;

import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class UserMappingsRecord extends TableRecordImpl<UserMappingsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for
     * <code>information_schema.user_mappings.authorization_identifier</code>.
     */
    public void setAuthorizationIdentifier(String value) {
        set(0, value);
    }

    /**
     * Getter for
     * <code>information_schema.user_mappings.authorization_identifier</code>.
     */
    public String getAuthorizationIdentifier() {
        return (String) get(0);
    }

    /**
     * Setter for
     * <code>information_schema.user_mappings.foreign_server_catalog</code>.
     */
    public void setForeignServerCatalog(String value) {
        set(1, value);
    }

    /**
     * Getter for
     * <code>information_schema.user_mappings.foreign_server_catalog</code>.
     */
    public String getForeignServerCatalog() {
        return (String) get(1);
    }

    /**
     * Setter for
     * <code>information_schema.user_mappings.foreign_server_name</code>.
     */
    public void setForeignServerName(String value) {
        set(2, value);
    }

    /**
     * Getter for
     * <code>information_schema.user_mappings.foreign_server_name</code>.
     */
    public String getForeignServerName() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UserMappingsRecord
     */
    public UserMappingsRecord() {
        super(UserMappings.USER_MAPPINGS);
    }

    /**
     * Create a detached, initialised UserMappingsRecord
     */
    public UserMappingsRecord(String authorizationIdentifier, String foreignServerCatalog, String foreignServerName) {
        super(UserMappings.USER_MAPPINGS);

        setAuthorizationIdentifier(authorizationIdentifier);
        setForeignServerCatalog(foreignServerCatalog);
        setForeignServerName(foreignServerName);
        resetChangedOnNotNull();
    }
}
