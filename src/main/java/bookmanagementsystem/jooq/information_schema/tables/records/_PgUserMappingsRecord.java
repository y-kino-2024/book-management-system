/*
 * This file is generated by jOOQ.
 */
package bookmanagementsystem.jooq.information_schema.tables.records;


import bookmanagementsystem.jooq.information_schema.tables._PgUserMappings;

import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class _PgUserMappingsRecord extends TableRecordImpl<_PgUserMappingsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>information_schema._pg_user_mappings.oid</code>.
     */
    public void setOid(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>information_schema._pg_user_mappings.oid</code>.
     */
    public Long getOid() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>information_schema._pg_user_mappings.umoptions</code>.
     */
    public void setUmoptions(String[] value) {
        set(1, value);
    }

    /**
     * Getter for <code>information_schema._pg_user_mappings.umoptions</code>.
     */
    public String[] getUmoptions() {
        return (String[]) get(1);
    }

    /**
     * Setter for <code>information_schema._pg_user_mappings.umuser</code>.
     */
    public void setUmuser(Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>information_schema._pg_user_mappings.umuser</code>.
     */
    public Long getUmuser() {
        return (Long) get(2);
    }

    /**
     * Setter for
     * <code>information_schema._pg_user_mappings.authorization_identifier</code>.
     */
    public void setAuthorizationIdentifier(String value) {
        set(3, value);
    }

    /**
     * Getter for
     * <code>information_schema._pg_user_mappings.authorization_identifier</code>.
     */
    public String getAuthorizationIdentifier() {
        return (String) get(3);
    }

    /**
     * Setter for
     * <code>information_schema._pg_user_mappings.foreign_server_catalog</code>.
     */
    public void setForeignServerCatalog(String value) {
        set(4, value);
    }

    /**
     * Getter for
     * <code>information_schema._pg_user_mappings.foreign_server_catalog</code>.
     */
    public String getForeignServerCatalog() {
        return (String) get(4);
    }

    /**
     * Setter for
     * <code>information_schema._pg_user_mappings.foreign_server_name</code>.
     */
    public void setForeignServerName(String value) {
        set(5, value);
    }

    /**
     * Getter for
     * <code>information_schema._pg_user_mappings.foreign_server_name</code>.
     */
    public String getForeignServerName() {
        return (String) get(5);
    }

    /**
     * Setter for <code>information_schema._pg_user_mappings.srvowner</code>.
     */
    public void setSrvowner(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>information_schema._pg_user_mappings.srvowner</code>.
     */
    public String getSrvowner() {
        return (String) get(6);
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached _PgUserMappingsRecord
     */
    public _PgUserMappingsRecord() {
        super(_PgUserMappings._PG_USER_MAPPINGS);
    }

    /**
     * Create a detached, initialised _PgUserMappingsRecord
     */
    public _PgUserMappingsRecord(Long oid, String[] umoptions, Long umuser, String authorizationIdentifier, String foreignServerCatalog, String foreignServerName, String srvowner) {
        super(_PgUserMappings._PG_USER_MAPPINGS);

        setOid(oid);
        setUmoptions(umoptions);
        setUmuser(umuser);
        setAuthorizationIdentifier(authorizationIdentifier);
        setForeignServerCatalog(foreignServerCatalog);
        setForeignServerName(foreignServerName);
        setSrvowner(srvowner);
        resetChangedOnNotNull();
    }
}
