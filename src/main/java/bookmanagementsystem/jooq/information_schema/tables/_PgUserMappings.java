/*
 * This file is generated by jOOQ.
 */
package bookmanagementsystem.jooq.information_schema.tables;


import bookmanagementsystem.jooq.information_schema.Domains;
import bookmanagementsystem.jooq.information_schema.InformationSchema;
import bookmanagementsystem.jooq.information_schema.tables.records._PgUserMappingsRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class _PgUserMappings extends TableImpl<_PgUserMappingsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>information_schema._pg_user_mappings</code>
     */
    public static final _PgUserMappings _PG_USER_MAPPINGS = new _PgUserMappings();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<_PgUserMappingsRecord> getRecordType() {
        return _PgUserMappingsRecord.class;
    }

    /**
     * The column <code>information_schema._pg_user_mappings.oid</code>.
     */
    public final TableField<_PgUserMappingsRecord, Long> OID = createField(DSL.name("oid"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>information_schema._pg_user_mappings.umoptions</code>.
     */
    public final TableField<_PgUserMappingsRecord, String[]> UMOPTIONS = createField(DSL.name("umoptions"), SQLDataType.CLOB.array(), this, "");

    /**
     * The column <code>information_schema._pg_user_mappings.umuser</code>.
     */
    public final TableField<_PgUserMappingsRecord, Long> UMUSER = createField(DSL.name("umuser"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>information_schema._pg_user_mappings.authorization_identifier</code>.
     */
    public final TableField<_PgUserMappingsRecord, String> AUTHORIZATION_IDENTIFIER = createField(DSL.name("authorization_identifier"), Domains.SQL_IDENTIFIER.getDataType(), this, "");

    /**
     * The column
     * <code>information_schema._pg_user_mappings.foreign_server_catalog</code>.
     */
    public final TableField<_PgUserMappingsRecord, String> FOREIGN_SERVER_CATALOG = createField(DSL.name("foreign_server_catalog"), Domains.SQL_IDENTIFIER.getDataType(), this, "");

    /**
     * The column
     * <code>information_schema._pg_user_mappings.foreign_server_name</code>.
     */
    public final TableField<_PgUserMappingsRecord, String> FOREIGN_SERVER_NAME = createField(DSL.name("foreign_server_name"), Domains.SQL_IDENTIFIER.getDataType(), this, "");

    /**
     * The column <code>information_schema._pg_user_mappings.srvowner</code>.
     */
    public final TableField<_PgUserMappingsRecord, String> SRVOWNER = createField(DSL.name("srvowner"), Domains.SQL_IDENTIFIER.getDataType(), this, "");

    private _PgUserMappings(Name alias, Table<_PgUserMappingsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private _PgUserMappings(Name alias, Table<_PgUserMappingsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "_pg_user_mappings" as  SELECT um.oid,
          um.umoptions,
          um.umuser,
          (COALESCE(u.rolname, 'PUBLIC'::name))::information_schema.sql_identifier AS authorization_identifier,
          s.foreign_server_catalog,
          s.foreign_server_name,
          s.authorization_identifier AS srvowner
         FROM (pg_user_mapping um
           LEFT JOIN pg_authid u ON ((u.oid = um.umuser))),
          information_schema._pg_foreign_servers s
        WHERE (s.oid = um.umserver);
        """), where);
    }

    /**
     * Create an aliased <code>information_schema._pg_user_mappings</code> table
     * reference
     */
    public _PgUserMappings(String alias) {
        this(DSL.name(alias), _PG_USER_MAPPINGS);
    }

    /**
     * Create an aliased <code>information_schema._pg_user_mappings</code> table
     * reference
     */
    public _PgUserMappings(Name alias) {
        this(alias, _PG_USER_MAPPINGS);
    }

    /**
     * Create a <code>information_schema._pg_user_mappings</code> table
     * reference
     */
    public _PgUserMappings() {
        this(DSL.name("_pg_user_mappings"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    public _PgUserMappings as(String alias) {
        return new _PgUserMappings(DSL.name(alias), this);
    }

    @Override
    public _PgUserMappings as(Name alias) {
        return new _PgUserMappings(alias, this);
    }

    @Override
    public _PgUserMappings as(Table<?> alias) {
        return new _PgUserMappings(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public _PgUserMappings rename(String name) {
        return new _PgUserMappings(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public _PgUserMappings rename(Name name) {
        return new _PgUserMappings(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public _PgUserMappings rename(Table<?> name) {
        return new _PgUserMappings(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public _PgUserMappings where(Condition condition) {
        return new _PgUserMappings(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public _PgUserMappings where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public _PgUserMappings where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public _PgUserMappings where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public _PgUserMappings where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public _PgUserMappings where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public _PgUserMappings where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public _PgUserMappings where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public _PgUserMappings whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public _PgUserMappings whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
