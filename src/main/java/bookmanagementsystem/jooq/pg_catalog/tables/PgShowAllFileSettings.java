/*
 * This file is generated by jOOQ.
 */
package bookmanagementsystem.jooq.pg_catalog.tables;


import bookmanagementsystem.jooq.pg_catalog.PgCatalog;
import bookmanagementsystem.jooq.pg_catalog.tables.records.PgShowAllFileSettingsRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class PgShowAllFileSettings extends TableImpl<PgShowAllFileSettingsRecord> {

    /**
     * The reference instance of
     * <code>pg_catalog.pg_show_all_file_settings</code>
     */
    public static final PgShowAllFileSettings PG_SHOW_ALL_FILE_SETTINGS = new PgShowAllFileSettings();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>pg_catalog.pg_show_all_file_settings.sourcefile</code>.
     */
    public final TableField<PgShowAllFileSettingsRecord, String> SOURCEFILE = createField(DSL.name("sourcefile"), SQLDataType.CLOB, this, "");
    /**
     * The column <code>pg_catalog.pg_show_all_file_settings.sourceline</code>.
     */
    public final TableField<PgShowAllFileSettingsRecord, Integer> SOURCELINE = createField(DSL.name("sourceline"), SQLDataType.INTEGER, this, "");
    /**
     * The column <code>pg_catalog.pg_show_all_file_settings.seqno</code>.
     */
    public final TableField<PgShowAllFileSettingsRecord, Integer> SEQNO = createField(DSL.name("seqno"), SQLDataType.INTEGER, this, "");
    /**
     * The column <code>pg_catalog.pg_show_all_file_settings.name</code>.
     */
    public final TableField<PgShowAllFileSettingsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");
    /**
     * The column <code>pg_catalog.pg_show_all_file_settings.setting</code>.
     */
    public final TableField<PgShowAllFileSettingsRecord, String> SETTING = createField(DSL.name("setting"), SQLDataType.CLOB, this, "");
    /**
     * The column <code>pg_catalog.pg_show_all_file_settings.applied</code>.
     */
    public final TableField<PgShowAllFileSettingsRecord, Boolean> APPLIED = createField(DSL.name("applied"), SQLDataType.BOOLEAN, this, "");
    /**
     * The column <code>pg_catalog.pg_show_all_file_settings.error</code>.
     */
    public final TableField<PgShowAllFileSettingsRecord, String> ERROR = createField(DSL.name("error"), SQLDataType.CLOB, this, "");

    private PgShowAllFileSettings(Name alias, Table<PgShowAllFileSettingsRecord> aliased) {
        this(alias, aliased, new Field[]{
        });
    }

    private PgShowAllFileSettings(Name alias, Table<PgShowAllFileSettingsRecord> aliased, Field<?>[] parameters) {
        this(alias, aliased, parameters, null);
    }

    private PgShowAllFileSettings(Name alias, Table<PgShowAllFileSettingsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function(), where);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_show_all_file_settings</code> table
     * reference
     */
    public PgShowAllFileSettings(String alias) {
        this(DSL.name(alias), PG_SHOW_ALL_FILE_SETTINGS);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_show_all_file_settings</code> table
     * reference
     */
    public PgShowAllFileSettings(Name alias) {
        this(alias, PG_SHOW_ALL_FILE_SETTINGS);
    }

    /**
     * Create a <code>pg_catalog.pg_show_all_file_settings</code> table
     * reference
     */
    public PgShowAllFileSettings() {
        this(DSL.name("pg_show_all_file_settings"), null);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgShowAllFileSettingsRecord> getRecordType() {
        return PgShowAllFileSettingsRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public PgShowAllFileSettings as(String alias) {
        return new PgShowAllFileSettings(DSL.name(alias), this, parameters);
    }

    @Override
    public PgShowAllFileSettings as(Name alias) {
        return new PgShowAllFileSettings(alias, this, parameters);
    }

    @Override
    public PgShowAllFileSettings as(Table<?> alias) {
        return new PgShowAllFileSettings(alias.getQualifiedName(), this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public PgShowAllFileSettings rename(String name) {
        return new PgShowAllFileSettings(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public PgShowAllFileSettings rename(Name name) {
        return new PgShowAllFileSettings(name, null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public PgShowAllFileSettings rename(Table<?> name) {
        return new PgShowAllFileSettings(name.getQualifiedName(), null, parameters);
    }

    /**
     * Call this table-valued function
     */
    public PgShowAllFileSettings call() {
        PgShowAllFileSettings result = new PgShowAllFileSettings(DSL.name("pg_show_all_file_settings"), null, new Field[]{});

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }
}
