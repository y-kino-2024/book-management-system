/*
 * This file is generated by jOOQ.
 */
package bookmanagementsystem.jooq.pg_catalog.tables;


import bookmanagementsystem.jooq.pg_catalog.Keys;
import bookmanagementsystem.jooq.pg_catalog.PgCatalog;
import bookmanagementsystem.jooq.pg_catalog.tables.records.PgLargeobjectRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgLargeobject extends TableImpl<PgLargeobjectRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pg_catalog.pg_largeobject</code>
     */
    public static final PgLargeobject PG_LARGEOBJECT = new PgLargeobject();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgLargeobjectRecord> getRecordType() {
        return PgLargeobjectRecord.class;
    }

    /**
     * The column <code>pg_catalog.pg_largeobject.loid</code>.
     */
    public final TableField<PgLargeobjectRecord, Long> LOID = createField(DSL.name("loid"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_largeobject.pageno</code>.
     */
    public final TableField<PgLargeobjectRecord, Integer> PAGENO = createField(DSL.name("pageno"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_largeobject.data</code>.
     */
    public final TableField<PgLargeobjectRecord, byte[]> DATA = createField(DSL.name("data"), SQLDataType.BLOB.nullable(false), this, "");

    private PgLargeobject(Name alias, Table<PgLargeobjectRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PgLargeobject(Name alias, Table<PgLargeobjectRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_largeobject</code> table reference
     */
    public PgLargeobject(String alias) {
        this(DSL.name(alias), PG_LARGEOBJECT);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_largeobject</code> table reference
     */
    public PgLargeobject(Name alias) {
        this(alias, PG_LARGEOBJECT);
    }

    /**
     * Create a <code>pg_catalog.pg_largeobject</code> table reference
     */
    public PgLargeobject() {
        this(DSL.name("pg_largeobject"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public UniqueKey<PgLargeobjectRecord> getPrimaryKey() {
        return Keys.PG_LARGEOBJECT_LOID_PN_INDEX;
    }

    @Override
    public PgLargeobject as(String alias) {
        return new PgLargeobject(DSL.name(alias), this);
    }

    @Override
    public PgLargeobject as(Name alias) {
        return new PgLargeobject(alias, this);
    }

    @Override
    public PgLargeobject as(Table<?> alias) {
        return new PgLargeobject(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PgLargeobject rename(String name) {
        return new PgLargeobject(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgLargeobject rename(Name name) {
        return new PgLargeobject(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgLargeobject rename(Table<?> name) {
        return new PgLargeobject(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgLargeobject where(Condition condition) {
        return new PgLargeobject(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgLargeobject where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgLargeobject where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgLargeobject where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgLargeobject where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgLargeobject where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgLargeobject where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgLargeobject where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgLargeobject whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgLargeobject whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
