/*
 * This file is generated by jOOQ.
 */
package bookmanagementsystem.jooq.pg_catalog.tables;


import bookmanagementsystem.jooq.pg_catalog.PgCatalog;
import bookmanagementsystem.jooq.pg_catalog.tables.records.PgShmemAllocationsRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Collection;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class PgShmemAllocations extends TableImpl<PgShmemAllocationsRecord> {

    /**
     * The reference instance of <code>pg_catalog.pg_shmem_allocations</code>
     */
    public static final PgShmemAllocations PG_SHMEM_ALLOCATIONS = new PgShmemAllocations();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>pg_catalog.pg_shmem_allocations.name</code>.
     */
    public final TableField<PgShmemAllocationsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");
    /**
     * The column <code>pg_catalog.pg_shmem_allocations.off</code>.
     */
    public final TableField<PgShmemAllocationsRecord, Long> OFF = createField(DSL.name("off"), SQLDataType.BIGINT, this, "");
    /**
     * The column <code>pg_catalog.pg_shmem_allocations.size</code>.
     */
    public final TableField<PgShmemAllocationsRecord, Long> SIZE = createField(DSL.name("size"), SQLDataType.BIGINT, this, "");
    /**
     * The column <code>pg_catalog.pg_shmem_allocations.allocated_size</code>.
     */
    public final TableField<PgShmemAllocationsRecord, Long> ALLOCATED_SIZE = createField(DSL.name("allocated_size"), SQLDataType.BIGINT, this, "");

    private PgShmemAllocations(Name alias, Table<PgShmemAllocationsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PgShmemAllocations(Name alias, Table<PgShmemAllocationsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
                create view "pg_shmem_allocations" as  SELECT name,
                 off,
                 size,
                 allocated_size
                FROM pg_get_shmem_allocations() pg_get_shmem_allocations(name, off, size, allocated_size);
                """), where);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_shmem_allocations</code> table
     * reference
     */
    public PgShmemAllocations(String alias) {
        this(DSL.name(alias), PG_SHMEM_ALLOCATIONS);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_shmem_allocations</code> table
     * reference
     */
    public PgShmemAllocations(Name alias) {
        this(alias, PG_SHMEM_ALLOCATIONS);
    }

    /**
     * Create a <code>pg_catalog.pg_shmem_allocations</code> table reference
     */
    public PgShmemAllocations() {
        this(DSL.name("pg_shmem_allocations"), null);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgShmemAllocationsRecord> getRecordType() {
        return PgShmemAllocationsRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public PgShmemAllocations as(String alias) {
        return new PgShmemAllocations(DSL.name(alias), this);
    }

    @Override
    public PgShmemAllocations as(Name alias) {
        return new PgShmemAllocations(alias, this);
    }

    @Override
    public PgShmemAllocations as(Table<?> alias) {
        return new PgShmemAllocations(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PgShmemAllocations rename(String name) {
        return new PgShmemAllocations(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgShmemAllocations rename(Name name) {
        return new PgShmemAllocations(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgShmemAllocations rename(Table<?> name) {
        return new PgShmemAllocations(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgShmemAllocations where(Condition condition) {
        return new PgShmemAllocations(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgShmemAllocations where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgShmemAllocations where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgShmemAllocations where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgShmemAllocations where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgShmemAllocations where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgShmemAllocations where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgShmemAllocations where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgShmemAllocations whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgShmemAllocations whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
