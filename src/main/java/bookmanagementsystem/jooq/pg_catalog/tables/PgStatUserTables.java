/*
 * This file is generated by jOOQ.
 */
package bookmanagementsystem.jooq.pg_catalog.tables;


import bookmanagementsystem.jooq.pg_catalog.PgCatalog;
import bookmanagementsystem.jooq.pg_catalog.tables.records.PgStatUserTablesRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.OffsetDateTime;
import java.util.Collection;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class PgStatUserTables extends TableImpl<PgStatUserTablesRecord> {

    /**
     * The reference instance of <code>pg_catalog.pg_stat_user_tables</code>
     */
    public static final PgStatUserTables PG_STAT_USER_TABLES = new PgStatUserTables();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>pg_catalog.pg_stat_user_tables.relid</code>.
     */
    public final TableField<PgStatUserTablesRecord, Long> RELID = createField(DSL.name("relid"), SQLDataType.BIGINT, this, "");
    /**
     * The column <code>pg_catalog.pg_stat_user_tables.schemaname</code>.
     */
    public final TableField<PgStatUserTablesRecord, String> SCHEMANAME = createField(DSL.name("schemaname"), SQLDataType.VARCHAR, this, "");
    /**
     * The column <code>pg_catalog.pg_stat_user_tables.relname</code>.
     */
    public final TableField<PgStatUserTablesRecord, String> RELNAME = createField(DSL.name("relname"), SQLDataType.VARCHAR, this, "");
    /**
     * The column <code>pg_catalog.pg_stat_user_tables.seq_scan</code>.
     */
    public final TableField<PgStatUserTablesRecord, Long> SEQ_SCAN = createField(DSL.name("seq_scan"), SQLDataType.BIGINT, this, "");
    /**
     * The column <code>pg_catalog.pg_stat_user_tables.last_seq_scan</code>.
     */
    public final TableField<PgStatUserTablesRecord, OffsetDateTime> LAST_SEQ_SCAN = createField(DSL.name("last_seq_scan"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");
    /**
     * The column <code>pg_catalog.pg_stat_user_tables.seq_tup_read</code>.
     */
    public final TableField<PgStatUserTablesRecord, Long> SEQ_TUP_READ = createField(DSL.name("seq_tup_read"), SQLDataType.BIGINT, this, "");
    /**
     * The column <code>pg_catalog.pg_stat_user_tables.idx_scan</code>.
     */
    public final TableField<PgStatUserTablesRecord, Long> IDX_SCAN = createField(DSL.name("idx_scan"), SQLDataType.BIGINT, this, "");
    /**
     * The column <code>pg_catalog.pg_stat_user_tables.last_idx_scan</code>.
     */
    public final TableField<PgStatUserTablesRecord, OffsetDateTime> LAST_IDX_SCAN = createField(DSL.name("last_idx_scan"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");
    /**
     * The column <code>pg_catalog.pg_stat_user_tables.idx_tup_fetch</code>.
     */
    public final TableField<PgStatUserTablesRecord, Long> IDX_TUP_FETCH = createField(DSL.name("idx_tup_fetch"), SQLDataType.BIGINT, this, "");
    /**
     * The column <code>pg_catalog.pg_stat_user_tables.n_tup_ins</code>.
     */
    public final TableField<PgStatUserTablesRecord, Long> N_TUP_INS = createField(DSL.name("n_tup_ins"), SQLDataType.BIGINT, this, "");
    /**
     * The column <code>pg_catalog.pg_stat_user_tables.n_tup_upd</code>.
     */
    public final TableField<PgStatUserTablesRecord, Long> N_TUP_UPD = createField(DSL.name("n_tup_upd"), SQLDataType.BIGINT, this, "");
    /**
     * The column <code>pg_catalog.pg_stat_user_tables.n_tup_del</code>.
     */
    public final TableField<PgStatUserTablesRecord, Long> N_TUP_DEL = createField(DSL.name("n_tup_del"), SQLDataType.BIGINT, this, "");
    /**
     * The column <code>pg_catalog.pg_stat_user_tables.n_tup_hot_upd</code>.
     */
    public final TableField<PgStatUserTablesRecord, Long> N_TUP_HOT_UPD = createField(DSL.name("n_tup_hot_upd"), SQLDataType.BIGINT, this, "");
    /**
     * The column <code>pg_catalog.pg_stat_user_tables.n_tup_newpage_upd</code>.
     */
    public final TableField<PgStatUserTablesRecord, Long> N_TUP_NEWPAGE_UPD = createField(DSL.name("n_tup_newpage_upd"), SQLDataType.BIGINT, this, "");
    /**
     * The column <code>pg_catalog.pg_stat_user_tables.n_live_tup</code>.
     */
    public final TableField<PgStatUserTablesRecord, Long> N_LIVE_TUP = createField(DSL.name("n_live_tup"), SQLDataType.BIGINT, this, "");
    /**
     * The column <code>pg_catalog.pg_stat_user_tables.n_dead_tup</code>.
     */
    public final TableField<PgStatUserTablesRecord, Long> N_DEAD_TUP = createField(DSL.name("n_dead_tup"), SQLDataType.BIGINT, this, "");
    /**
     * The column
     * <code>pg_catalog.pg_stat_user_tables.n_mod_since_analyze</code>.
     */
    public final TableField<PgStatUserTablesRecord, Long> N_MOD_SINCE_ANALYZE = createField(DSL.name("n_mod_since_analyze"), SQLDataType.BIGINT, this, "");
    /**
     * The column
     * <code>pg_catalog.pg_stat_user_tables.n_ins_since_vacuum</code>.
     */
    public final TableField<PgStatUserTablesRecord, Long> N_INS_SINCE_VACUUM = createField(DSL.name("n_ins_since_vacuum"), SQLDataType.BIGINT, this, "");
    /**
     * The column <code>pg_catalog.pg_stat_user_tables.last_vacuum</code>.
     */
    public final TableField<PgStatUserTablesRecord, OffsetDateTime> LAST_VACUUM = createField(DSL.name("last_vacuum"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");
    /**
     * The column <code>pg_catalog.pg_stat_user_tables.last_autovacuum</code>.
     */
    public final TableField<PgStatUserTablesRecord, OffsetDateTime> LAST_AUTOVACUUM = createField(DSL.name("last_autovacuum"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");
    /**
     * The column <code>pg_catalog.pg_stat_user_tables.last_analyze</code>.
     */
    public final TableField<PgStatUserTablesRecord, OffsetDateTime> LAST_ANALYZE = createField(DSL.name("last_analyze"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");
    /**
     * The column <code>pg_catalog.pg_stat_user_tables.last_autoanalyze</code>.
     */
    public final TableField<PgStatUserTablesRecord, OffsetDateTime> LAST_AUTOANALYZE = createField(DSL.name("last_autoanalyze"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");
    /**
     * The column <code>pg_catalog.pg_stat_user_tables.vacuum_count</code>.
     */
    public final TableField<PgStatUserTablesRecord, Long> VACUUM_COUNT = createField(DSL.name("vacuum_count"), SQLDataType.BIGINT, this, "");
    /**
     * The column <code>pg_catalog.pg_stat_user_tables.autovacuum_count</code>.
     */
    public final TableField<PgStatUserTablesRecord, Long> AUTOVACUUM_COUNT = createField(DSL.name("autovacuum_count"), SQLDataType.BIGINT, this, "");
    /**
     * The column <code>pg_catalog.pg_stat_user_tables.analyze_count</code>.
     */
    public final TableField<PgStatUserTablesRecord, Long> ANALYZE_COUNT = createField(DSL.name("analyze_count"), SQLDataType.BIGINT, this, "");
    /**
     * The column <code>pg_catalog.pg_stat_user_tables.autoanalyze_count</code>.
     */
    public final TableField<PgStatUserTablesRecord, Long> AUTOANALYZE_COUNT = createField(DSL.name("autoanalyze_count"), SQLDataType.BIGINT, this, "");

    private PgStatUserTables(Name alias, Table<PgStatUserTablesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PgStatUserTables(Name alias, Table<PgStatUserTablesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
                create view "pg_stat_user_tables" as  SELECT relid,
                  schemaname,
                  relname,
                  seq_scan,
                  last_seq_scan,
                  seq_tup_read,
                  idx_scan,
                  last_idx_scan,
                  idx_tup_fetch,
                  n_tup_ins,
                  n_tup_upd,
                  n_tup_del,
                  n_tup_hot_upd,
                  n_tup_newpage_upd,
                  n_live_tup,
                  n_dead_tup,
                  n_mod_since_analyze,
                  n_ins_since_vacuum,
                  last_vacuum,
                  last_autovacuum,
                  last_analyze,
                  last_autoanalyze,
                  vacuum_count,
                  autovacuum_count,
                  analyze_count,
                  autoanalyze_count
                 FROM pg_stat_all_tables
                WHERE ((schemaname <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name])) AND (schemaname !~ '^pg_toast'::text));
                """), where);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_stat_user_tables</code> table
     * reference
     */
    public PgStatUserTables(String alias) {
        this(DSL.name(alias), PG_STAT_USER_TABLES);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_stat_user_tables</code> table
     * reference
     */
    public PgStatUserTables(Name alias) {
        this(alias, PG_STAT_USER_TABLES);
    }

    /**
     * Create a <code>pg_catalog.pg_stat_user_tables</code> table reference
     */
    public PgStatUserTables() {
        this(DSL.name("pg_stat_user_tables"), null);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgStatUserTablesRecord> getRecordType() {
        return PgStatUserTablesRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public PgStatUserTables as(String alias) {
        return new PgStatUserTables(DSL.name(alias), this);
    }

    @Override
    public PgStatUserTables as(Name alias) {
        return new PgStatUserTables(alias, this);
    }

    @Override
    public PgStatUserTables as(Table<?> alias) {
        return new PgStatUserTables(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PgStatUserTables rename(String name) {
        return new PgStatUserTables(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgStatUserTables rename(Name name) {
        return new PgStatUserTables(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgStatUserTables rename(Table<?> name) {
        return new PgStatUserTables(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgStatUserTables where(Condition condition) {
        return new PgStatUserTables(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgStatUserTables where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgStatUserTables where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgStatUserTables where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgStatUserTables where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgStatUserTables where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgStatUserTables where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgStatUserTables where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgStatUserTables whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgStatUserTables whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
