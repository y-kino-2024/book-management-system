/*
 * This file is generated by jOOQ.
 */
package bookmanagementsystem.jooq.pg_catalog.tables;


import bookmanagementsystem.jooq.pg_catalog.PgCatalog;
import bookmanagementsystem.jooq.pg_catalog.tables.records.PgWalSummaryContentsRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.DefaultDataType;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgWalSummaryContents extends TableImpl<PgWalSummaryContentsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pg_catalog.pg_wal_summary_contents</code>
     */
    public static final PgWalSummaryContents PG_WAL_SUMMARY_CONTENTS = new PgWalSummaryContents();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgWalSummaryContentsRecord> getRecordType() {
        return PgWalSummaryContentsRecord.class;
    }

    /**
     * The column <code>pg_catalog.pg_wal_summary_contents.relfilenode</code>.
     */
    public final TableField<PgWalSummaryContentsRecord, Long> RELFILENODE = createField(DSL.name("relfilenode"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_wal_summary_contents.reltablespace</code>.
     */
    public final TableField<PgWalSummaryContentsRecord, Long> RELTABLESPACE = createField(DSL.name("reltablespace"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_wal_summary_contents.reldatabase</code>.
     */
    public final TableField<PgWalSummaryContentsRecord, Long> RELDATABASE = createField(DSL.name("reldatabase"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_wal_summary_contents.relforknumber</code>.
     */
    public final TableField<PgWalSummaryContentsRecord, Short> RELFORKNUMBER = createField(DSL.name("relforknumber"), SQLDataType.SMALLINT, this, "");

    /**
     * The column
     * <code>pg_catalog.pg_wal_summary_contents.relblocknumber</code>.
     */
    public final TableField<PgWalSummaryContentsRecord, Long> RELBLOCKNUMBER = createField(DSL.name("relblocknumber"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>pg_catalog.pg_wal_summary_contents.is_limit_block</code>.
     */
    public final TableField<PgWalSummaryContentsRecord, Boolean> IS_LIMIT_BLOCK = createField(DSL.name("is_limit_block"), SQLDataType.BOOLEAN, this, "");

    private PgWalSummaryContents(Name alias, Table<PgWalSummaryContentsRecord> aliased) {
        this(alias, aliased, new Field[] {
            DSL.val(null, SQLDataType.BIGINT),
            DSL.val(null, DefaultDataType.getDefaultDataType("\"pg_catalog\".\"pg_lsn\"")),
            DSL.val(null, DefaultDataType.getDefaultDataType("\"pg_catalog\".\"pg_lsn\""))
        });
    }

    private PgWalSummaryContents(Name alias, Table<PgWalSummaryContentsRecord> aliased, Field<?>[] parameters) {
        this(alias, aliased, parameters, null);
    }

    private PgWalSummaryContents(Name alias, Table<PgWalSummaryContentsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function(), where);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_wal_summary_contents</code> table
     * reference
     */
    public PgWalSummaryContents(String alias) {
        this(DSL.name(alias), PG_WAL_SUMMARY_CONTENTS);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_wal_summary_contents</code> table
     * reference
     */
    public PgWalSummaryContents(Name alias) {
        this(alias, PG_WAL_SUMMARY_CONTENTS);
    }

    /**
     * Create a <code>pg_catalog.pg_wal_summary_contents</code> table reference
     */
    public PgWalSummaryContents() {
        this(DSL.name("pg_wal_summary_contents"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public PgWalSummaryContents as(String alias) {
        return new PgWalSummaryContents(DSL.name(alias), this, parameters);
    }

    @Override
    public PgWalSummaryContents as(Name alias) {
        return new PgWalSummaryContents(alias, this, parameters);
    }

    @Override
    public PgWalSummaryContents as(Table<?> alias) {
        return new PgWalSummaryContents(alias.getQualifiedName(), this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public PgWalSummaryContents rename(String name) {
        return new PgWalSummaryContents(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public PgWalSummaryContents rename(Name name) {
        return new PgWalSummaryContents(name, null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public PgWalSummaryContents rename(Table<?> name) {
        return new PgWalSummaryContents(name.getQualifiedName(), null, parameters);
    }

    /**
     * Call this table-valued function
     */
    public PgWalSummaryContents call(
          Long tli
        , Object startLsn
        , Object endLsn
    ) {
        PgWalSummaryContents result = new PgWalSummaryContents(DSL.name("pg_wal_summary_contents"), null, new Field[] {
            DSL.val(tli, SQLDataType.BIGINT),
            DSL.val(startLsn, DefaultDataType.getDefaultDataType("\"pg_catalog\".\"pg_lsn\"")),
            DSL.val(endLsn, DefaultDataType.getDefaultDataType("\"pg_catalog\".\"pg_lsn\""))
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    /**
     * Call this table-valued function
     */
    public PgWalSummaryContents call(
          Field<Long> tli
        , Field<Object> startLsn
        , Field<Object> endLsn
    ) {
        PgWalSummaryContents result = new PgWalSummaryContents(DSL.name("pg_wal_summary_contents"), null, new Field[] {
            tli,
            startLsn,
            endLsn
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }
}
