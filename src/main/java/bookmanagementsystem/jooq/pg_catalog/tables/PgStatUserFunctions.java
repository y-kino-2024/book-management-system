/*
 * This file is generated by jOOQ.
 */
package bookmanagementsystem.jooq.pg_catalog.tables;


import bookmanagementsystem.jooq.pg_catalog.PgCatalog;
import bookmanagementsystem.jooq.pg_catalog.tables.records.PgStatUserFunctionsRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Collection;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class PgStatUserFunctions extends TableImpl<PgStatUserFunctionsRecord> {

    /**
     * The reference instance of <code>pg_catalog.pg_stat_user_functions</code>
     */
    public static final PgStatUserFunctions PG_STAT_USER_FUNCTIONS = new PgStatUserFunctions();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>pg_catalog.pg_stat_user_functions.funcid</code>.
     */
    public final TableField<PgStatUserFunctionsRecord, Long> FUNCID = createField(DSL.name("funcid"), SQLDataType.BIGINT, this, "");
    /**
     * The column <code>pg_catalog.pg_stat_user_functions.schemaname</code>.
     */
    public final TableField<PgStatUserFunctionsRecord, String> SCHEMANAME = createField(DSL.name("schemaname"), SQLDataType.VARCHAR, this, "");
    /**
     * The column <code>pg_catalog.pg_stat_user_functions.funcname</code>.
     */
    public final TableField<PgStatUserFunctionsRecord, String> FUNCNAME = createField(DSL.name("funcname"), SQLDataType.VARCHAR, this, "");
    /**
     * The column <code>pg_catalog.pg_stat_user_functions.calls</code>.
     */
    public final TableField<PgStatUserFunctionsRecord, Long> CALLS = createField(DSL.name("calls"), SQLDataType.BIGINT, this, "");
    /**
     * The column <code>pg_catalog.pg_stat_user_functions.total_time</code>.
     */
    public final TableField<PgStatUserFunctionsRecord, Double> TOTAL_TIME = createField(DSL.name("total_time"), SQLDataType.DOUBLE, this, "");
    /**
     * The column <code>pg_catalog.pg_stat_user_functions.self_time</code>.
     */
    public final TableField<PgStatUserFunctionsRecord, Double> SELF_TIME = createField(DSL.name("self_time"), SQLDataType.DOUBLE, this, "");

    private PgStatUserFunctions(Name alias, Table<PgStatUserFunctionsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PgStatUserFunctions(Name alias, Table<PgStatUserFunctionsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
                create view "pg_stat_user_functions" as  SELECT p.oid AS funcid,
                  n.nspname AS schemaname,
                  p.proname AS funcname,
                  pg_stat_get_function_calls(p.oid) AS calls,
                  pg_stat_get_function_total_time(p.oid) AS total_time,
                  pg_stat_get_function_self_time(p.oid) AS self_time
                 FROM (pg_proc p
                   LEFT JOIN pg_namespace n ON ((n.oid = p.pronamespace)))
                WHERE ((p.prolang <> (12)::oid) AND (pg_stat_get_function_calls(p.oid) IS NOT NULL));
                """), where);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_stat_user_functions</code> table
     * reference
     */
    public PgStatUserFunctions(String alias) {
        this(DSL.name(alias), PG_STAT_USER_FUNCTIONS);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_stat_user_functions</code> table
     * reference
     */
    public PgStatUserFunctions(Name alias) {
        this(alias, PG_STAT_USER_FUNCTIONS);
    }

    /**
     * Create a <code>pg_catalog.pg_stat_user_functions</code> table reference
     */
    public PgStatUserFunctions() {
        this(DSL.name("pg_stat_user_functions"), null);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgStatUserFunctionsRecord> getRecordType() {
        return PgStatUserFunctionsRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public PgStatUserFunctions as(String alias) {
        return new PgStatUserFunctions(DSL.name(alias), this);
    }

    @Override
    public PgStatUserFunctions as(Name alias) {
        return new PgStatUserFunctions(alias, this);
    }

    @Override
    public PgStatUserFunctions as(Table<?> alias) {
        return new PgStatUserFunctions(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PgStatUserFunctions rename(String name) {
        return new PgStatUserFunctions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgStatUserFunctions rename(Name name) {
        return new PgStatUserFunctions(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgStatUserFunctions rename(Table<?> name) {
        return new PgStatUserFunctions(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgStatUserFunctions where(Condition condition) {
        return new PgStatUserFunctions(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgStatUserFunctions where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgStatUserFunctions where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgStatUserFunctions where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgStatUserFunctions where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgStatUserFunctions where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgStatUserFunctions where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgStatUserFunctions where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgStatUserFunctions whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgStatUserFunctions whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
