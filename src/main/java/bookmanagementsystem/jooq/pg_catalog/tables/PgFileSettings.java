/*
 * This file is generated by jOOQ.
 */
package bookmanagementsystem.jooq.pg_catalog.tables;


import bookmanagementsystem.jooq.pg_catalog.PgCatalog;
import bookmanagementsystem.jooq.pg_catalog.tables.records.PgFileSettingsRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Collection;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class PgFileSettings extends TableImpl<PgFileSettingsRecord> {

    /**
     * The reference instance of <code>pg_catalog.pg_file_settings</code>
     */
    public static final PgFileSettings PG_FILE_SETTINGS = new PgFileSettings();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>pg_catalog.pg_file_settings.sourcefile</code>.
     */
    public final TableField<PgFileSettingsRecord, String> SOURCEFILE = createField(DSL.name("sourcefile"), SQLDataType.CLOB, this, "");
    /**
     * The column <code>pg_catalog.pg_file_settings.sourceline</code>.
     */
    public final TableField<PgFileSettingsRecord, Integer> SOURCELINE = createField(DSL.name("sourceline"), SQLDataType.INTEGER, this, "");
    /**
     * The column <code>pg_catalog.pg_file_settings.seqno</code>.
     */
    public final TableField<PgFileSettingsRecord, Integer> SEQNO = createField(DSL.name("seqno"), SQLDataType.INTEGER, this, "");
    /**
     * The column <code>pg_catalog.pg_file_settings.name</code>.
     */
    public final TableField<PgFileSettingsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");
    /**
     * The column <code>pg_catalog.pg_file_settings.setting</code>.
     */
    public final TableField<PgFileSettingsRecord, String> SETTING = createField(DSL.name("setting"), SQLDataType.CLOB, this, "");
    /**
     * The column <code>pg_catalog.pg_file_settings.applied</code>.
     */
    public final TableField<PgFileSettingsRecord, Boolean> APPLIED = createField(DSL.name("applied"), SQLDataType.BOOLEAN, this, "");
    /**
     * The column <code>pg_catalog.pg_file_settings.error</code>.
     */
    public final TableField<PgFileSettingsRecord, String> ERROR = createField(DSL.name("error"), SQLDataType.CLOB, this, "");

    private PgFileSettings(Name alias, Table<PgFileSettingsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PgFileSettings(Name alias, Table<PgFileSettingsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
                create view "pg_file_settings" as  SELECT sourcefile,
                 sourceline,
                 seqno,
                 name,
                 setting,
                 applied,
                 error
                FROM pg_show_all_file_settings() a(sourcefile, sourceline, seqno, name, setting, applied, error);
                """), where);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_file_settings</code> table
     * reference
     */
    public PgFileSettings(String alias) {
        this(DSL.name(alias), PG_FILE_SETTINGS);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_file_settings</code> table
     * reference
     */
    public PgFileSettings(Name alias) {
        this(alias, PG_FILE_SETTINGS);
    }

    /**
     * Create a <code>pg_catalog.pg_file_settings</code> table reference
     */
    public PgFileSettings() {
        this(DSL.name("pg_file_settings"), null);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgFileSettingsRecord> getRecordType() {
        return PgFileSettingsRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public PgFileSettings as(String alias) {
        return new PgFileSettings(DSL.name(alias), this);
    }

    @Override
    public PgFileSettings as(Name alias) {
        return new PgFileSettings(alias, this);
    }

    @Override
    public PgFileSettings as(Table<?> alias) {
        return new PgFileSettings(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PgFileSettings rename(String name) {
        return new PgFileSettings(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgFileSettings rename(Name name) {
        return new PgFileSettings(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgFileSettings rename(Table<?> name) {
        return new PgFileSettings(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgFileSettings where(Condition condition) {
        return new PgFileSettings(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgFileSettings where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgFileSettings where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgFileSettings where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgFileSettings where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgFileSettings where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgFileSettings where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgFileSettings where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgFileSettings whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgFileSettings whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
