/*
 * This file is generated by jOOQ.
 */
package bookmanagementsystem.jooq.pg_catalog.tables;


import bookmanagementsystem.jooq.pg_catalog.PgCatalog;
import bookmanagementsystem.jooq.pg_catalog.tables.records.JsonbArrayElementsTextRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class JsonbArrayElementsText extends TableImpl<JsonbArrayElementsTextRecord> {

    /**
     * The reference instance of
     * <code>pg_catalog.jsonb_array_elements_text</code>
     */
    public static final JsonbArrayElementsText JSONB_ARRAY_ELEMENTS_TEXT = new JsonbArrayElementsText();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>pg_catalog.jsonb_array_elements_text.value</code>.
     */
    public final TableField<JsonbArrayElementsTextRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.CLOB, this, "");

    private JsonbArrayElementsText(Name alias, Table<JsonbArrayElementsTextRecord> aliased) {
        this(alias, aliased, new Field[]{
                DSL.val(null, SQLDataType.JSONB)
        });
    }

    private JsonbArrayElementsText(Name alias, Table<JsonbArrayElementsTextRecord> aliased, Field<?>[] parameters) {
        this(alias, aliased, parameters, null);
    }

    private JsonbArrayElementsText(Name alias, Table<JsonbArrayElementsTextRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function(), where);
    }

    /**
     * Create an aliased <code>pg_catalog.jsonb_array_elements_text</code> table
     * reference
     */
    public JsonbArrayElementsText(String alias) {
        this(DSL.name(alias), JSONB_ARRAY_ELEMENTS_TEXT);
    }

    /**
     * Create an aliased <code>pg_catalog.jsonb_array_elements_text</code> table
     * reference
     */
    public JsonbArrayElementsText(Name alias) {
        this(alias, JSONB_ARRAY_ELEMENTS_TEXT);
    }

    /**
     * Create a <code>pg_catalog.jsonb_array_elements_text</code> table
     * reference
     */
    public JsonbArrayElementsText() {
        this(DSL.name("jsonb_array_elements_text"), null);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JsonbArrayElementsTextRecord> getRecordType() {
        return JsonbArrayElementsTextRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public JsonbArrayElementsText as(String alias) {
        return new JsonbArrayElementsText(DSL.name(alias), this, parameters);
    }

    @Override
    public JsonbArrayElementsText as(Name alias) {
        return new JsonbArrayElementsText(alias, this, parameters);
    }

    @Override
    public JsonbArrayElementsText as(Table<?> alias) {
        return new JsonbArrayElementsText(alias.getQualifiedName(), this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public JsonbArrayElementsText rename(String name) {
        return new JsonbArrayElementsText(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public JsonbArrayElementsText rename(Name name) {
        return new JsonbArrayElementsText(name, null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public JsonbArrayElementsText rename(Table<?> name) {
        return new JsonbArrayElementsText(name.getQualifiedName(), null, parameters);
    }

    /**
     * Call this table-valued function
     */
    public JsonbArrayElementsText call(
            JSONB fromJson
    ) {
        JsonbArrayElementsText result = new JsonbArrayElementsText(DSL.name("jsonb_array_elements_text"), null, new Field[]{
                DSL.val(fromJson, SQLDataType.JSONB)
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    /**
     * Call this table-valued function
     */
    public JsonbArrayElementsText call(
            Field<JSONB> fromJson
    ) {
        JsonbArrayElementsText result = new JsonbArrayElementsText(DSL.name("jsonb_array_elements_text"), null, new Field[]{
                fromJson
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }
}
