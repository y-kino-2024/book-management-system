/*
 * This file is generated by jOOQ.
 */
package bookmanagementsystem.jooq.pg_catalog.tables;


import bookmanagementsystem.jooq.pg_catalog.Keys;
import bookmanagementsystem.jooq.pg_catalog.PgCatalog;
import bookmanagementsystem.jooq.pg_catalog.tables.records.PgTsConfigRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class PgTsConfig extends TableImpl<PgTsConfigRecord> {

    /**
     * The reference instance of <code>pg_catalog.pg_ts_config</code>
     */
    public static final PgTsConfig PG_TS_CONFIG = new PgTsConfig();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>pg_catalog.pg_ts_config.oid</code>.
     */
    public final TableField<PgTsConfigRecord, Long> OID = createField(DSL.name("oid"), SQLDataType.BIGINT.nullable(false), this, "");
    /**
     * The column <code>pg_catalog.pg_ts_config.cfgname</code>.
     */
    public final TableField<PgTsConfigRecord, String> CFGNAME = createField(DSL.name("cfgname"), SQLDataType.VARCHAR.nullable(false), this, "");
    /**
     * The column <code>pg_catalog.pg_ts_config.cfgnamespace</code>.
     */
    public final TableField<PgTsConfigRecord, Long> CFGNAMESPACE = createField(DSL.name("cfgnamespace"), SQLDataType.BIGINT.nullable(false), this, "");
    /**
     * The column <code>pg_catalog.pg_ts_config.cfgowner</code>.
     */
    public final TableField<PgTsConfigRecord, Long> CFGOWNER = createField(DSL.name("cfgowner"), SQLDataType.BIGINT.nullable(false), this, "");
    /**
     * The column <code>pg_catalog.pg_ts_config.cfgparser</code>.
     */
    public final TableField<PgTsConfigRecord, Long> CFGPARSER = createField(DSL.name("cfgparser"), SQLDataType.BIGINT.nullable(false), this, "");

    private PgTsConfig(Name alias, Table<PgTsConfigRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PgTsConfig(Name alias, Table<PgTsConfigRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_ts_config</code> table reference
     */
    public PgTsConfig(String alias) {
        this(DSL.name(alias), PG_TS_CONFIG);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_ts_config</code> table reference
     */
    public PgTsConfig(Name alias) {
        this(alias, PG_TS_CONFIG);
    }

    /**
     * Create a <code>pg_catalog.pg_ts_config</code> table reference
     */
    public PgTsConfig() {
        this(DSL.name("pg_ts_config"), null);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgTsConfigRecord> getRecordType() {
        return PgTsConfigRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public UniqueKey<PgTsConfigRecord> getPrimaryKey() {
        return Keys.PG_TS_CONFIG_OID_INDEX;
    }

    @Override
    public List<UniqueKey<PgTsConfigRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.PG_TS_CONFIG_CFGNAME_INDEX);
    }

    @Override
    public PgTsConfig as(String alias) {
        return new PgTsConfig(DSL.name(alias), this);
    }

    @Override
    public PgTsConfig as(Name alias) {
        return new PgTsConfig(alias, this);
    }

    @Override
    public PgTsConfig as(Table<?> alias) {
        return new PgTsConfig(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PgTsConfig rename(String name) {
        return new PgTsConfig(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgTsConfig rename(Name name) {
        return new PgTsConfig(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgTsConfig rename(Table<?> name) {
        return new PgTsConfig(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgTsConfig where(Condition condition) {
        return new PgTsConfig(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgTsConfig where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgTsConfig where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgTsConfig where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgTsConfig where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgTsConfig where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgTsConfig where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgTsConfig where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgTsConfig whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgTsConfig whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
