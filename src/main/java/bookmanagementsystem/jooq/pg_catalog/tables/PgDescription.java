/*
 * This file is generated by jOOQ.
 */
package bookmanagementsystem.jooq.pg_catalog.tables;


import bookmanagementsystem.jooq.pg_catalog.Keys;
import bookmanagementsystem.jooq.pg_catalog.PgCatalog;
import bookmanagementsystem.jooq.pg_catalog.tables.records.PgDescriptionRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Collection;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class PgDescription extends TableImpl<PgDescriptionRecord> {

    /**
     * The reference instance of <code>pg_catalog.pg_description</code>
     */
    public static final PgDescription PG_DESCRIPTION = new PgDescription();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>pg_catalog.pg_description.objoid</code>.
     */
    public final TableField<PgDescriptionRecord, Long> OBJOID = createField(DSL.name("objoid"), SQLDataType.BIGINT.nullable(false), this, "");
    /**
     * The column <code>pg_catalog.pg_description.classoid</code>.
     */
    public final TableField<PgDescriptionRecord, Long> CLASSOID = createField(DSL.name("classoid"), SQLDataType.BIGINT.nullable(false), this, "");
    /**
     * The column <code>pg_catalog.pg_description.objsubid</code>.
     */
    public final TableField<PgDescriptionRecord, Integer> OBJSUBID = createField(DSL.name("objsubid"), SQLDataType.INTEGER.nullable(false), this, "");
    /**
     * The column <code>pg_catalog.pg_description.description</code>.
     */
    public final TableField<PgDescriptionRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.nullable(false), this, "");

    private PgDescription(Name alias, Table<PgDescriptionRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PgDescription(Name alias, Table<PgDescriptionRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_description</code> table reference
     */
    public PgDescription(String alias) {
        this(DSL.name(alias), PG_DESCRIPTION);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_description</code> table reference
     */
    public PgDescription(Name alias) {
        this(alias, PG_DESCRIPTION);
    }

    /**
     * Create a <code>pg_catalog.pg_description</code> table reference
     */
    public PgDescription() {
        this(DSL.name("pg_description"), null);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgDescriptionRecord> getRecordType() {
        return PgDescriptionRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public UniqueKey<PgDescriptionRecord> getPrimaryKey() {
        return Keys.PG_DESCRIPTION_O_C_O_INDEX;
    }

    @Override
    public PgDescription as(String alias) {
        return new PgDescription(DSL.name(alias), this);
    }

    @Override
    public PgDescription as(Name alias) {
        return new PgDescription(alias, this);
    }

    @Override
    public PgDescription as(Table<?> alias) {
        return new PgDescription(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PgDescription rename(String name) {
        return new PgDescription(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgDescription rename(Name name) {
        return new PgDescription(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgDescription rename(Table<?> name) {
        return new PgDescription(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgDescription where(Condition condition) {
        return new PgDescription(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgDescription where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgDescription where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgDescription where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgDescription where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgDescription where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgDescription where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgDescription where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgDescription whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgDescription whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
