/*
 * This file is generated by jOOQ.
 */
package bookmanagementsystem.jooq.pg_catalog.tables;


import bookmanagementsystem.jooq.pg_catalog.PgCatalog;
import bookmanagementsystem.jooq.pg_catalog.tables.records.UnnestRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.DefaultDataType;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class Unnest extends TableImpl<UnnestRecord> {

    /**
     * The reference instance of <code>pg_catalog.unnest</code>
     */
    public static final Unnest UNNEST = new Unnest();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>pg_catalog.unnest.lexeme</code>.
     */
    public final TableField<UnnestRecord, String> LEXEME = createField(DSL.name("lexeme"), SQLDataType.CLOB, this, "");
    /**
     * The column <code>pg_catalog.unnest.positions</code>.
     */
    public final TableField<UnnestRecord, Short[]> POSITIONS = createField(DSL.name("positions"), SQLDataType.SMALLINT.array(), this, "");
    /**
     * The column <code>pg_catalog.unnest.weights</code>.
     */
    public final TableField<UnnestRecord, String[]> WEIGHTS = createField(DSL.name("weights"), SQLDataType.CLOB.array(), this, "");

    private Unnest(Name alias, Table<UnnestRecord> aliased) {
        this(alias, aliased, new Field[]{
                DSL.val(null, DefaultDataType.getDefaultDataType("\"pg_catalog\".\"tsvector\""))
        });
    }

    private Unnest(Name alias, Table<UnnestRecord> aliased, Field<?>[] parameters) {
        this(alias, aliased, parameters, null);
    }

    private Unnest(Name alias, Table<UnnestRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function(), where);
    }

    /**
     * Create an aliased <code>pg_catalog.unnest</code> table reference
     */
    public Unnest(String alias) {
        this(DSL.name(alias), UNNEST);
    }

    /**
     * Create an aliased <code>pg_catalog.unnest</code> table reference
     */
    public Unnest(Name alias) {
        this(alias, UNNEST);
    }

    /**
     * Create a <code>pg_catalog.unnest</code> table reference
     */
    public Unnest() {
        this(DSL.name("unnest"), null);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UnnestRecord> getRecordType() {
        return UnnestRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public Unnest as(String alias) {
        return new Unnest(DSL.name(alias), this, parameters);
    }

    @Override
    public Unnest as(Name alias) {
        return new Unnest(alias, this, parameters);
    }

    @Override
    public Unnest as(Table<?> alias) {
        return new Unnest(alias.getQualifiedName(), this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public Unnest rename(String name) {
        return new Unnest(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public Unnest rename(Name name) {
        return new Unnest(name, null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public Unnest rename(Table<?> name) {
        return new Unnest(name.getQualifiedName(), null, parameters);
    }

    /**
     * Call this table-valued function
     */
    public Unnest call(
            Object tsvector
    ) {
        Unnest result = new Unnest(DSL.name("unnest"), null, new Field[]{
                DSL.val(tsvector, DefaultDataType.getDefaultDataType("\"pg_catalog\".\"tsvector\""))
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    /**
     * Call this table-valued function
     */
    public Unnest call(
            Field<Object> tsvector
    ) {
        Unnest result = new Unnest(DSL.name("unnest"), null, new Field[]{
                tsvector
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }
}
