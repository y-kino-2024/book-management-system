/*
 * This file is generated by jOOQ.
 */
package bookmanagementsystem.jooq.pg_catalog.tables;


import bookmanagementsystem.jooq.pg_catalog.Keys;
import bookmanagementsystem.jooq.pg_catalog.PgCatalog;
import bookmanagementsystem.jooq.pg_catalog.tables.records.PgReplicationOriginRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgReplicationOrigin extends TableImpl<PgReplicationOriginRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pg_catalog.pg_replication_origin</code>
     */
    public static final PgReplicationOrigin PG_REPLICATION_ORIGIN = new PgReplicationOrigin();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgReplicationOriginRecord> getRecordType() {
        return PgReplicationOriginRecord.class;
    }

    /**
     * The column <code>pg_catalog.pg_replication_origin.roident</code>.
     */
    public final TableField<PgReplicationOriginRecord, Long> ROIDENT = createField(DSL.name("roident"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_replication_origin.roname</code>.
     */
    public final TableField<PgReplicationOriginRecord, String> RONAME = createField(DSL.name("roname"), SQLDataType.CLOB.nullable(false), this, "");

    private PgReplicationOrigin(Name alias, Table<PgReplicationOriginRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PgReplicationOrigin(Name alias, Table<PgReplicationOriginRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_replication_origin</code> table
     * reference
     */
    public PgReplicationOrigin(String alias) {
        this(DSL.name(alias), PG_REPLICATION_ORIGIN);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_replication_origin</code> table
     * reference
     */
    public PgReplicationOrigin(Name alias) {
        this(alias, PG_REPLICATION_ORIGIN);
    }

    /**
     * Create a <code>pg_catalog.pg_replication_origin</code> table reference
     */
    public PgReplicationOrigin() {
        this(DSL.name("pg_replication_origin"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public UniqueKey<PgReplicationOriginRecord> getPrimaryKey() {
        return Keys.PG_REPLICATION_ORIGIN_ROIIDENT_INDEX;
    }

    @Override
    public List<UniqueKey<PgReplicationOriginRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.PG_REPLICATION_ORIGIN_RONAME_INDEX);
    }

    @Override
    public PgReplicationOrigin as(String alias) {
        return new PgReplicationOrigin(DSL.name(alias), this);
    }

    @Override
    public PgReplicationOrigin as(Name alias) {
        return new PgReplicationOrigin(alias, this);
    }

    @Override
    public PgReplicationOrigin as(Table<?> alias) {
        return new PgReplicationOrigin(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PgReplicationOrigin rename(String name) {
        return new PgReplicationOrigin(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgReplicationOrigin rename(Name name) {
        return new PgReplicationOrigin(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgReplicationOrigin rename(Table<?> name) {
        return new PgReplicationOrigin(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgReplicationOrigin where(Condition condition) {
        return new PgReplicationOrigin(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgReplicationOrigin where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgReplicationOrigin where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgReplicationOrigin where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgReplicationOrigin where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgReplicationOrigin where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgReplicationOrigin where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgReplicationOrigin where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgReplicationOrigin whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgReplicationOrigin whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
