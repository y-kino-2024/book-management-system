/*
 * This file is generated by jOOQ.
 */
package bookmanagementsystem.jooq.pg_catalog.tables;


import bookmanagementsystem.jooq.pg_catalog.PgCatalog;
import bookmanagementsystem.jooq.pg_catalog.tables.records.GenerateSeriesRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.YearToSecond;

import java.time.OffsetDateTime;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class GenerateSeries extends TableImpl<GenerateSeriesRecord> {

    /**
     * The reference instance of <code>pg_catalog.generate_series</code>
     */
    public static final GenerateSeries GENERATE_SERIES = new GenerateSeries();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>pg_catalog.generate_series.generate_series</code>.
     */
    public final TableField<GenerateSeriesRecord, OffsetDateTime> GENERATE_SERIES_ = createField(DSL.name("generate_series"), SQLDataType.TIMESTAMPWITHTIMEZONE, this, "");

    private GenerateSeries(Name alias, Table<GenerateSeriesRecord> aliased) {
        this(alias, aliased, new Field[]{
                DSL.val(null, SQLDataType.TIMESTAMPWITHTIMEZONE(6)),
                DSL.val(null, SQLDataType.TIMESTAMPWITHTIMEZONE(6)),
                DSL.val(null, SQLDataType.INTERVAL)
        });
    }

    private GenerateSeries(Name alias, Table<GenerateSeriesRecord> aliased, Field<?>[] parameters) {
        this(alias, aliased, parameters, null);
    }

    private GenerateSeries(Name alias, Table<GenerateSeriesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function(), where);
    }

    /**
     * Create an aliased <code>pg_catalog.generate_series</code> table reference
     */
    public GenerateSeries(String alias) {
        this(DSL.name(alias), GENERATE_SERIES);
    }

    /**
     * Create an aliased <code>pg_catalog.generate_series</code> table reference
     */
    public GenerateSeries(Name alias) {
        this(alias, GENERATE_SERIES);
    }

    /**
     * Create a <code>pg_catalog.generate_series</code> table reference
     */
    public GenerateSeries() {
        this(DSL.name("generate_series"), null);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GenerateSeriesRecord> getRecordType() {
        return GenerateSeriesRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public GenerateSeries as(String alias) {
        return new GenerateSeries(DSL.name(alias), this, parameters);
    }

    @Override
    public GenerateSeries as(Name alias) {
        return new GenerateSeries(alias, this, parameters);
    }

    @Override
    public GenerateSeries as(Table<?> alias) {
        return new GenerateSeries(alias.getQualifiedName(), this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public GenerateSeries rename(String name) {
        return new GenerateSeries(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public GenerateSeries rename(Name name) {
        return new GenerateSeries(name, null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public GenerateSeries rename(Table<?> name) {
        return new GenerateSeries(name.getQualifiedName(), null, parameters);
    }

    /**
     * Call this table-valued function
     */
    public GenerateSeries call(
            OffsetDateTime __1
            , OffsetDateTime __2
            , YearToSecond __3
    ) {
        GenerateSeries result = new GenerateSeries(DSL.name("generate_series"), null, new Field[]{
                DSL.val(__1, SQLDataType.TIMESTAMPWITHTIMEZONE(6)),
                DSL.val(__2, SQLDataType.TIMESTAMPWITHTIMEZONE(6)),
                DSL.val(__3, SQLDataType.INTERVAL)
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    /**
     * Call this table-valued function
     */
    public GenerateSeries call(
            Field<OffsetDateTime> __1
            , Field<OffsetDateTime> __2
            , Field<YearToSecond> __3
    ) {
        GenerateSeries result = new GenerateSeries(DSL.name("generate_series"), null, new Field[]{
                __1,
                __2,
                __3
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }
}
