/*
 * This file is generated by jOOQ.
 */
package bookmanagementsystem.jooq.pg_catalog.tables;


import bookmanagementsystem.jooq.pg_catalog.PgCatalog;
import bookmanagementsystem.jooq.pg_catalog.tables.records.PgLsLogicalmapdirRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.OffsetDateTime;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class PgLsLogicalmapdir extends TableImpl<PgLsLogicalmapdirRecord> {

    /**
     * The reference instance of <code>pg_catalog.pg_ls_logicalmapdir</code>
     */
    public static final PgLsLogicalmapdir PG_LS_LOGICALMAPDIR = new PgLsLogicalmapdir();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>pg_catalog.pg_ls_logicalmapdir.name</code>.
     */
    public final TableField<PgLsLogicalmapdirRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");
    /**
     * The column <code>pg_catalog.pg_ls_logicalmapdir.size</code>.
     */
    public final TableField<PgLsLogicalmapdirRecord, Long> SIZE = createField(DSL.name("size"), SQLDataType.BIGINT, this, "");
    /**
     * The column <code>pg_catalog.pg_ls_logicalmapdir.modification</code>.
     */
    public final TableField<PgLsLogicalmapdirRecord, OffsetDateTime> MODIFICATION = createField(DSL.name("modification"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    private PgLsLogicalmapdir(Name alias, Table<PgLsLogicalmapdirRecord> aliased) {
        this(alias, aliased, new Field[]{
        });
    }

    private PgLsLogicalmapdir(Name alias, Table<PgLsLogicalmapdirRecord> aliased, Field<?>[] parameters) {
        this(alias, aliased, parameters, null);
    }

    private PgLsLogicalmapdir(Name alias, Table<PgLsLogicalmapdirRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function(), where);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_ls_logicalmapdir</code> table
     * reference
     */
    public PgLsLogicalmapdir(String alias) {
        this(DSL.name(alias), PG_LS_LOGICALMAPDIR);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_ls_logicalmapdir</code> table
     * reference
     */
    public PgLsLogicalmapdir(Name alias) {
        this(alias, PG_LS_LOGICALMAPDIR);
    }

    /**
     * Create a <code>pg_catalog.pg_ls_logicalmapdir</code> table reference
     */
    public PgLsLogicalmapdir() {
        this(DSL.name("pg_ls_logicalmapdir"), null);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgLsLogicalmapdirRecord> getRecordType() {
        return PgLsLogicalmapdirRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public PgLsLogicalmapdir as(String alias) {
        return new PgLsLogicalmapdir(DSL.name(alias), this, parameters);
    }

    @Override
    public PgLsLogicalmapdir as(Name alias) {
        return new PgLsLogicalmapdir(alias, this, parameters);
    }

    @Override
    public PgLsLogicalmapdir as(Table<?> alias) {
        return new PgLsLogicalmapdir(alias.getQualifiedName(), this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public PgLsLogicalmapdir rename(String name) {
        return new PgLsLogicalmapdir(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public PgLsLogicalmapdir rename(Name name) {
        return new PgLsLogicalmapdir(name, null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public PgLsLogicalmapdir rename(Table<?> name) {
        return new PgLsLogicalmapdir(name.getQualifiedName(), null, parameters);
    }

    /**
     * Call this table-valued function
     */
    public PgLsLogicalmapdir call() {
        PgLsLogicalmapdir result = new PgLsLogicalmapdir(DSL.name("pg_ls_logicalmapdir"), null, new Field[]{});

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }
}
