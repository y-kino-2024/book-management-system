/*
 * This file is generated by jOOQ.
 */
package bookmanagementsystem.jooq.pg_catalog.tables;


import bookmanagementsystem.jooq.pg_catalog.Keys;
import bookmanagementsystem.jooq.pg_catalog.PgCatalog;
import bookmanagementsystem.jooq.pg_catalog.tables.records.PgDefaultAclRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class PgDefaultAcl extends TableImpl<PgDefaultAclRecord> {

    /**
     * The reference instance of <code>pg_catalog.pg_default_acl</code>
     */
    public static final PgDefaultAcl PG_DEFAULT_ACL = new PgDefaultAcl();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>pg_catalog.pg_default_acl.oid</code>.
     */
    public final TableField<PgDefaultAclRecord, Long> OID = createField(DSL.name("oid"), SQLDataType.BIGINT.nullable(false), this, "");
    /**
     * The column <code>pg_catalog.pg_default_acl.defaclrole</code>.
     */
    public final TableField<PgDefaultAclRecord, Long> DEFACLROLE = createField(DSL.name("defaclrole"), SQLDataType.BIGINT.nullable(false), this, "");
    /**
     * The column <code>pg_catalog.pg_default_acl.defaclnamespace</code>.
     */
    public final TableField<PgDefaultAclRecord, Long> DEFACLNAMESPACE = createField(DSL.name("defaclnamespace"), SQLDataType.BIGINT.nullable(false), this, "");
    /**
     * The column <code>pg_catalog.pg_default_acl.defaclobjtype</code>.
     */
    public final TableField<PgDefaultAclRecord, String> DEFACLOBJTYPE = createField(DSL.name("defaclobjtype"), SQLDataType.CHAR.nullable(false), this, "");
    /**
     * The column <code>pg_catalog.pg_default_acl.defaclacl</code>.
     */
    public final TableField<PgDefaultAclRecord, String[]> DEFACLACL = createField(DSL.name("defaclacl"), SQLDataType.VARCHAR.array().nullable(false), this, "");

    private PgDefaultAcl(Name alias, Table<PgDefaultAclRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PgDefaultAcl(Name alias, Table<PgDefaultAclRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_default_acl</code> table reference
     */
    public PgDefaultAcl(String alias) {
        this(DSL.name(alias), PG_DEFAULT_ACL);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_default_acl</code> table reference
     */
    public PgDefaultAcl(Name alias) {
        this(alias, PG_DEFAULT_ACL);
    }

    /**
     * Create a <code>pg_catalog.pg_default_acl</code> table reference
     */
    public PgDefaultAcl() {
        this(DSL.name("pg_default_acl"), null);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgDefaultAclRecord> getRecordType() {
        return PgDefaultAclRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public UniqueKey<PgDefaultAclRecord> getPrimaryKey() {
        return Keys.PG_DEFAULT_ACL_OID_INDEX;
    }

    @Override
    public List<UniqueKey<PgDefaultAclRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.PG_DEFAULT_ACL_ROLE_NSP_OBJ_INDEX);
    }

    @Override
    public PgDefaultAcl as(String alias) {
        return new PgDefaultAcl(DSL.name(alias), this);
    }

    @Override
    public PgDefaultAcl as(Name alias) {
        return new PgDefaultAcl(alias, this);
    }

    @Override
    public PgDefaultAcl as(Table<?> alias) {
        return new PgDefaultAcl(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PgDefaultAcl rename(String name) {
        return new PgDefaultAcl(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgDefaultAcl rename(Name name) {
        return new PgDefaultAcl(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgDefaultAcl rename(Table<?> name) {
        return new PgDefaultAcl(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgDefaultAcl where(Condition condition) {
        return new PgDefaultAcl(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgDefaultAcl where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgDefaultAcl where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgDefaultAcl where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgDefaultAcl where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgDefaultAcl where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgDefaultAcl where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgDefaultAcl where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgDefaultAcl whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgDefaultAcl whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
