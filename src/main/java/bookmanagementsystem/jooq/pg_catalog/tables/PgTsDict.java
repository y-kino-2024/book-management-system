/*
 * This file is generated by jOOQ.
 */
package bookmanagementsystem.jooq.pg_catalog.tables;


import bookmanagementsystem.jooq.pg_catalog.Keys;
import bookmanagementsystem.jooq.pg_catalog.PgCatalog;
import bookmanagementsystem.jooq.pg_catalog.tables.records.PgTsDictRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class PgTsDict extends TableImpl<PgTsDictRecord> {

    /**
     * The reference instance of <code>pg_catalog.pg_ts_dict</code>
     */
    public static final PgTsDict PG_TS_DICT = new PgTsDict();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>pg_catalog.pg_ts_dict.oid</code>.
     */
    public final TableField<PgTsDictRecord, Long> OID = createField(DSL.name("oid"), SQLDataType.BIGINT.nullable(false), this, "");
    /**
     * The column <code>pg_catalog.pg_ts_dict.dictname</code>.
     */
    public final TableField<PgTsDictRecord, String> DICTNAME = createField(DSL.name("dictname"), SQLDataType.VARCHAR.nullable(false), this, "");
    /**
     * The column <code>pg_catalog.pg_ts_dict.dictnamespace</code>.
     */
    public final TableField<PgTsDictRecord, Long> DICTNAMESPACE = createField(DSL.name("dictnamespace"), SQLDataType.BIGINT.nullable(false), this, "");
    /**
     * The column <code>pg_catalog.pg_ts_dict.dictowner</code>.
     */
    public final TableField<PgTsDictRecord, Long> DICTOWNER = createField(DSL.name("dictowner"), SQLDataType.BIGINT.nullable(false), this, "");
    /**
     * The column <code>pg_catalog.pg_ts_dict.dicttemplate</code>.
     */
    public final TableField<PgTsDictRecord, Long> DICTTEMPLATE = createField(DSL.name("dicttemplate"), SQLDataType.BIGINT.nullable(false), this, "");
    /**
     * The column <code>pg_catalog.pg_ts_dict.dictinitoption</code>.
     */
    public final TableField<PgTsDictRecord, String> DICTINITOPTION = createField(DSL.name("dictinitoption"), SQLDataType.CLOB, this, "");

    private PgTsDict(Name alias, Table<PgTsDictRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PgTsDict(Name alias, Table<PgTsDictRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_ts_dict</code> table reference
     */
    public PgTsDict(String alias) {
        this(DSL.name(alias), PG_TS_DICT);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_ts_dict</code> table reference
     */
    public PgTsDict(Name alias) {
        this(alias, PG_TS_DICT);
    }

    /**
     * Create a <code>pg_catalog.pg_ts_dict</code> table reference
     */
    public PgTsDict() {
        this(DSL.name("pg_ts_dict"), null);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgTsDictRecord> getRecordType() {
        return PgTsDictRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public UniqueKey<PgTsDictRecord> getPrimaryKey() {
        return Keys.PG_TS_DICT_OID_INDEX;
    }

    @Override
    public List<UniqueKey<PgTsDictRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.PG_TS_DICT_DICTNAME_INDEX);
    }

    @Override
    public PgTsDict as(String alias) {
        return new PgTsDict(DSL.name(alias), this);
    }

    @Override
    public PgTsDict as(Name alias) {
        return new PgTsDict(alias, this);
    }

    @Override
    public PgTsDict as(Table<?> alias) {
        return new PgTsDict(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PgTsDict rename(String name) {
        return new PgTsDict(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgTsDict rename(Name name) {
        return new PgTsDict(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgTsDict rename(Table<?> name) {
        return new PgTsDict(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgTsDict where(Condition condition) {
        return new PgTsDict(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgTsDict where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgTsDict where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgTsDict where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgTsDict where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgTsDict where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgTsDict where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgTsDict where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgTsDict whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgTsDict whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
