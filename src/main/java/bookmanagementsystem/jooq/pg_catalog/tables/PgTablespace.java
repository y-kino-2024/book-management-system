/*
 * This file is generated by jOOQ.
 */
package bookmanagementsystem.jooq.pg_catalog.tables;


import bookmanagementsystem.jooq.pg_catalog.Keys;
import bookmanagementsystem.jooq.pg_catalog.PgCatalog;
import bookmanagementsystem.jooq.pg_catalog.tables.records.PgTablespaceRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgTablespace extends TableImpl<PgTablespaceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pg_catalog.pg_tablespace</code>
     */
    public static final PgTablespace PG_TABLESPACE = new PgTablespace();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgTablespaceRecord> getRecordType() {
        return PgTablespaceRecord.class;
    }

    /**
     * The column <code>pg_catalog.pg_tablespace.oid</code>.
     */
    public final TableField<PgTablespaceRecord, Long> OID = createField(DSL.name("oid"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_tablespace.spcname</code>.
     */
    public final TableField<PgTablespaceRecord, String> SPCNAME = createField(DSL.name("spcname"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_tablespace.spcowner</code>.
     */
    public final TableField<PgTablespaceRecord, Long> SPCOWNER = createField(DSL.name("spcowner"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_tablespace.spcacl</code>.
     */
    public final TableField<PgTablespaceRecord, String[]> SPCACL = createField(DSL.name("spcacl"), SQLDataType.VARCHAR.array(), this, "");

    /**
     * The column <code>pg_catalog.pg_tablespace.spcoptions</code>.
     */
    public final TableField<PgTablespaceRecord, String[]> SPCOPTIONS = createField(DSL.name("spcoptions"), SQLDataType.CLOB.array(), this, "");

    private PgTablespace(Name alias, Table<PgTablespaceRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PgTablespace(Name alias, Table<PgTablespaceRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_tablespace</code> table reference
     */
    public PgTablespace(String alias) {
        this(DSL.name(alias), PG_TABLESPACE);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_tablespace</code> table reference
     */
    public PgTablespace(Name alias) {
        this(alias, PG_TABLESPACE);
    }

    /**
     * Create a <code>pg_catalog.pg_tablespace</code> table reference
     */
    public PgTablespace() {
        this(DSL.name("pg_tablespace"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public UniqueKey<PgTablespaceRecord> getPrimaryKey() {
        return Keys.PG_TABLESPACE_OID_INDEX;
    }

    @Override
    public List<UniqueKey<PgTablespaceRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.PG_TABLESPACE_SPCNAME_INDEX);
    }

    @Override
    public PgTablespace as(String alias) {
        return new PgTablespace(DSL.name(alias), this);
    }

    @Override
    public PgTablespace as(Name alias) {
        return new PgTablespace(alias, this);
    }

    @Override
    public PgTablespace as(Table<?> alias) {
        return new PgTablespace(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PgTablespace rename(String name) {
        return new PgTablespace(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgTablespace rename(Name name) {
        return new PgTablespace(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgTablespace rename(Table<?> name) {
        return new PgTablespace(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgTablespace where(Condition condition) {
        return new PgTablespace(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgTablespace where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgTablespace where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgTablespace where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgTablespace where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgTablespace where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgTablespace where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgTablespace where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgTablespace whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgTablespace whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
