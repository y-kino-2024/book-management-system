/*
 * This file is generated by jOOQ.
 */
package bookmanagementsystem.jooq.pg_catalog.tables;


import bookmanagementsystem.jooq.pg_catalog.PgCatalog;
import bookmanagementsystem.jooq.pg_catalog.tables.records.PgGroupRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgGroup extends TableImpl<PgGroupRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pg_catalog.pg_group</code>
     */
    public static final PgGroup PG_GROUP = new PgGroup();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgGroupRecord> getRecordType() {
        return PgGroupRecord.class;
    }

    /**
     * The column <code>pg_catalog.pg_group.groname</code>.
     */
    public final TableField<PgGroupRecord, String> GRONAME = createField(DSL.name("groname"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>pg_catalog.pg_group.grosysid</code>.
     */
    public final TableField<PgGroupRecord, Long> GROSYSID = createField(DSL.name("grosysid"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_group.grolist</code>.
     */
    public final TableField<PgGroupRecord, Long[]> GROLIST = createField(DSL.name("grolist"), SQLDataType.BIGINT.array(), this, "");

    private PgGroup(Name alias, Table<PgGroupRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PgGroup(Name alias, Table<PgGroupRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "pg_group" as  SELECT rolname AS groname,
          oid AS grosysid,
          ARRAY( SELECT pg_auth_members.member
                 FROM pg_auth_members
                WHERE (pg_auth_members.roleid = pg_authid.oid)) AS grolist
         FROM pg_authid
        WHERE (NOT rolcanlogin);
        """), where);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_group</code> table reference
     */
    public PgGroup(String alias) {
        this(DSL.name(alias), PG_GROUP);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_group</code> table reference
     */
    public PgGroup(Name alias) {
        this(alias, PG_GROUP);
    }

    /**
     * Create a <code>pg_catalog.pg_group</code> table reference
     */
    public PgGroup() {
        this(DSL.name("pg_group"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public PgGroup as(String alias) {
        return new PgGroup(DSL.name(alias), this);
    }

    @Override
    public PgGroup as(Name alias) {
        return new PgGroup(alias, this);
    }

    @Override
    public PgGroup as(Table<?> alias) {
        return new PgGroup(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PgGroup rename(String name) {
        return new PgGroup(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgGroup rename(Name name) {
        return new PgGroup(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgGroup rename(Table<?> name) {
        return new PgGroup(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgGroup where(Condition condition) {
        return new PgGroup(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgGroup where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgGroup where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgGroup where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgGroup where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgGroup where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgGroup where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgGroup where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgGroup whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgGroup whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
