/*
 * This file is generated by jOOQ.
 */
package bookmanagementsystem.jooq.pg_catalog.tables.records;


import bookmanagementsystem.jooq.pg_catalog.tables.PgStatCheckpointer;

import java.time.OffsetDateTime;

import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgStatCheckpointerRecord extends TableRecordImpl<PgStatCheckpointerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>pg_catalog.pg_stat_checkpointer.num_timed</code>.
     */
    public void setNumTimed(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_checkpointer.num_timed</code>.
     */
    public Long getNumTimed() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_checkpointer.num_requested</code>.
     */
    public void setNumRequested(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_checkpointer.num_requested</code>.
     */
    public Long getNumRequested() {
        return (Long) get(1);
    }

    /**
     * Setter for
     * <code>pg_catalog.pg_stat_checkpointer.restartpoints_timed</code>.
     */
    public void setRestartpointsTimed(Long value) {
        set(2, value);
    }

    /**
     * Getter for
     * <code>pg_catalog.pg_stat_checkpointer.restartpoints_timed</code>.
     */
    public Long getRestartpointsTimed() {
        return (Long) get(2);
    }

    /**
     * Setter for
     * <code>pg_catalog.pg_stat_checkpointer.restartpoints_req</code>.
     */
    public void setRestartpointsReq(Long value) {
        set(3, value);
    }

    /**
     * Getter for
     * <code>pg_catalog.pg_stat_checkpointer.restartpoints_req</code>.
     */
    public Long getRestartpointsReq() {
        return (Long) get(3);
    }

    /**
     * Setter for
     * <code>pg_catalog.pg_stat_checkpointer.restartpoints_done</code>.
     */
    public void setRestartpointsDone(Long value) {
        set(4, value);
    }

    /**
     * Getter for
     * <code>pg_catalog.pg_stat_checkpointer.restartpoints_done</code>.
     */
    public Long getRestartpointsDone() {
        return (Long) get(4);
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_checkpointer.write_time</code>.
     */
    public void setWriteTime(Double value) {
        set(5, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_checkpointer.write_time</code>.
     */
    public Double getWriteTime() {
        return (Double) get(5);
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_checkpointer.sync_time</code>.
     */
    public void setSyncTime(Double value) {
        set(6, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_checkpointer.sync_time</code>.
     */
    public Double getSyncTime() {
        return (Double) get(6);
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_checkpointer.buffers_written</code>.
     */
    public void setBuffersWritten(Long value) {
        set(7, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_checkpointer.buffers_written</code>.
     */
    public Long getBuffersWritten() {
        return (Long) get(7);
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_checkpointer.stats_reset</code>.
     */
    public void setStatsReset(OffsetDateTime value) {
        set(8, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_checkpointer.stats_reset</code>.
     */
    public OffsetDateTime getStatsReset() {
        return (OffsetDateTime) get(8);
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PgStatCheckpointerRecord
     */
    public PgStatCheckpointerRecord() {
        super(PgStatCheckpointer.PG_STAT_CHECKPOINTER);
    }

    /**
     * Create a detached, initialised PgStatCheckpointerRecord
     */
    public PgStatCheckpointerRecord(Long numTimed, Long numRequested, Long restartpointsTimed, Long restartpointsReq, Long restartpointsDone, Double writeTime, Double syncTime, Long buffersWritten, OffsetDateTime statsReset) {
        super(PgStatCheckpointer.PG_STAT_CHECKPOINTER);

        setNumTimed(numTimed);
        setNumRequested(numRequested);
        setRestartpointsTimed(restartpointsTimed);
        setRestartpointsReq(restartpointsReq);
        setRestartpointsDone(restartpointsDone);
        setWriteTime(writeTime);
        setSyncTime(syncTime);
        setBuffersWritten(buffersWritten);
        setStatsReset(statsReset);
        resetChangedOnNotNull();
    }
}
