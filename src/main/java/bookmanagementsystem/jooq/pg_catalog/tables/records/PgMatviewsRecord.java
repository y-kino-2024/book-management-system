/*
 * This file is generated by jOOQ.
 */
package bookmanagementsystem.jooq.pg_catalog.tables.records;


import bookmanagementsystem.jooq.pg_catalog.tables.PgMatviews;

import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgMatviewsRecord extends TableRecordImpl<PgMatviewsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>pg_catalog.pg_matviews.schemaname</code>.
     */
    public void setSchemaname(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_matviews.schemaname</code>.
     */
    public String getSchemaname() {
        return (String) get(0);
    }

    /**
     * Setter for <code>pg_catalog.pg_matviews.matviewname</code>.
     */
    public void setMatviewname(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_matviews.matviewname</code>.
     */
    public String getMatviewname() {
        return (String) get(1);
    }

    /**
     * Setter for <code>pg_catalog.pg_matviews.matviewowner</code>.
     */
    public void setMatviewowner(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_matviews.matviewowner</code>.
     */
    public String getMatviewowner() {
        return (String) get(2);
    }

    /**
     * Setter for <code>pg_catalog.pg_matviews.tablespace</code>.
     */
    public void setTablespace(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_matviews.tablespace</code>.
     */
    public String getTablespace() {
        return (String) get(3);
    }

    /**
     * Setter for <code>pg_catalog.pg_matviews.hasindexes</code>.
     */
    public void setHasindexes(Boolean value) {
        set(4, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_matviews.hasindexes</code>.
     */
    public Boolean getHasindexes() {
        return (Boolean) get(4);
    }

    /**
     * Setter for <code>pg_catalog.pg_matviews.ispopulated</code>.
     */
    public void setIspopulated(Boolean value) {
        set(5, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_matviews.ispopulated</code>.
     */
    public Boolean getIspopulated() {
        return (Boolean) get(5);
    }

    /**
     * Setter for <code>pg_catalog.pg_matviews.definition</code>.
     */
    public void setDefinition(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_matviews.definition</code>.
     */
    public String getDefinition() {
        return (String) get(6);
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PgMatviewsRecord
     */
    public PgMatviewsRecord() {
        super(PgMatviews.PG_MATVIEWS);
    }

    /**
     * Create a detached, initialised PgMatviewsRecord
     */
    public PgMatviewsRecord(String schemaname, String matviewname, String matviewowner, String tablespace, Boolean hasindexes, Boolean ispopulated, String definition) {
        super(PgMatviews.PG_MATVIEWS);

        setSchemaname(schemaname);
        setMatviewname(matviewname);
        setMatviewowner(matviewowner);
        setTablespace(tablespace);
        setHasindexes(hasindexes);
        setIspopulated(ispopulated);
        setDefinition(definition);
        resetChangedOnNotNull();
    }
}
