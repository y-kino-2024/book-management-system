/*
 * This file is generated by jOOQ.
 */
package bookmanagementsystem.jooq.pg_catalog.tables;


import bookmanagementsystem.jooq.pg_catalog.PgCatalog;
import bookmanagementsystem.jooq.pg_catalog.tables.records.PgStatCheckpointerRecord;

import java.time.OffsetDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgStatCheckpointer extends TableImpl<PgStatCheckpointerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pg_catalog.pg_stat_checkpointer</code>
     */
    public static final PgStatCheckpointer PG_STAT_CHECKPOINTER = new PgStatCheckpointer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgStatCheckpointerRecord> getRecordType() {
        return PgStatCheckpointerRecord.class;
    }

    /**
     * The column <code>pg_catalog.pg_stat_checkpointer.num_timed</code>.
     */
    public final TableField<PgStatCheckpointerRecord, Long> NUM_TIMED = createField(DSL.name("num_timed"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_checkpointer.num_requested</code>.
     */
    public final TableField<PgStatCheckpointerRecord, Long> NUM_REQUESTED = createField(DSL.name("num_requested"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>pg_catalog.pg_stat_checkpointer.restartpoints_timed</code>.
     */
    public final TableField<PgStatCheckpointerRecord, Long> RESTARTPOINTS_TIMED = createField(DSL.name("restartpoints_timed"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>pg_catalog.pg_stat_checkpointer.restartpoints_req</code>.
     */
    public final TableField<PgStatCheckpointerRecord, Long> RESTARTPOINTS_REQ = createField(DSL.name("restartpoints_req"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>pg_catalog.pg_stat_checkpointer.restartpoints_done</code>.
     */
    public final TableField<PgStatCheckpointerRecord, Long> RESTARTPOINTS_DONE = createField(DSL.name("restartpoints_done"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_checkpointer.write_time</code>.
     */
    public final TableField<PgStatCheckpointerRecord, Double> WRITE_TIME = createField(DSL.name("write_time"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_checkpointer.sync_time</code>.
     */
    public final TableField<PgStatCheckpointerRecord, Double> SYNC_TIME = createField(DSL.name("sync_time"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_checkpointer.buffers_written</code>.
     */
    public final TableField<PgStatCheckpointerRecord, Long> BUFFERS_WRITTEN = createField(DSL.name("buffers_written"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_checkpointer.stats_reset</code>.
     */
    public final TableField<PgStatCheckpointerRecord, OffsetDateTime> STATS_RESET = createField(DSL.name("stats_reset"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    private PgStatCheckpointer(Name alias, Table<PgStatCheckpointerRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PgStatCheckpointer(Name alias, Table<PgStatCheckpointerRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "pg_stat_checkpointer" as  SELECT pg_stat_get_checkpointer_num_timed() AS num_timed,
        pg_stat_get_checkpointer_num_requested() AS num_requested,
        pg_stat_get_checkpointer_restartpoints_timed() AS restartpoints_timed,
        pg_stat_get_checkpointer_restartpoints_requested() AS restartpoints_req,
        pg_stat_get_checkpointer_restartpoints_performed() AS restartpoints_done,
        pg_stat_get_checkpointer_write_time() AS write_time,
        pg_stat_get_checkpointer_sync_time() AS sync_time,
        pg_stat_get_checkpointer_buffers_written() AS buffers_written,
        pg_stat_get_checkpointer_stat_reset_time() AS stats_reset;
        """), where);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_stat_checkpointer</code> table
     * reference
     */
    public PgStatCheckpointer(String alias) {
        this(DSL.name(alias), PG_STAT_CHECKPOINTER);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_stat_checkpointer</code> table
     * reference
     */
    public PgStatCheckpointer(Name alias) {
        this(alias, PG_STAT_CHECKPOINTER);
    }

    /**
     * Create a <code>pg_catalog.pg_stat_checkpointer</code> table reference
     */
    public PgStatCheckpointer() {
        this(DSL.name("pg_stat_checkpointer"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public PgStatCheckpointer as(String alias) {
        return new PgStatCheckpointer(DSL.name(alias), this);
    }

    @Override
    public PgStatCheckpointer as(Name alias) {
        return new PgStatCheckpointer(alias, this);
    }

    @Override
    public PgStatCheckpointer as(Table<?> alias) {
        return new PgStatCheckpointer(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PgStatCheckpointer rename(String name) {
        return new PgStatCheckpointer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgStatCheckpointer rename(Name name) {
        return new PgStatCheckpointer(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgStatCheckpointer rename(Table<?> name) {
        return new PgStatCheckpointer(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgStatCheckpointer where(Condition condition) {
        return new PgStatCheckpointer(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgStatCheckpointer where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgStatCheckpointer where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgStatCheckpointer where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgStatCheckpointer where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgStatCheckpointer where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgStatCheckpointer where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgStatCheckpointer where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgStatCheckpointer whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgStatCheckpointer whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
