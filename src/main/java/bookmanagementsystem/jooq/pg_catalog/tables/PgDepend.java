/*
 * This file is generated by jOOQ.
 */
package bookmanagementsystem.jooq.pg_catalog.tables;


import bookmanagementsystem.jooq.pg_catalog.Indexes;
import bookmanagementsystem.jooq.pg_catalog.PgCatalog;
import bookmanagementsystem.jooq.pg_catalog.tables.records.PgDependRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgDepend extends TableImpl<PgDependRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pg_catalog.pg_depend</code>
     */
    public static final PgDepend PG_DEPEND = new PgDepend();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgDependRecord> getRecordType() {
        return PgDependRecord.class;
    }

    /**
     * The column <code>pg_catalog.pg_depend.classid</code>.
     */
    public final TableField<PgDependRecord, Long> CLASSID = createField(DSL.name("classid"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_depend.objid</code>.
     */
    public final TableField<PgDependRecord, Long> OBJID = createField(DSL.name("objid"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_depend.objsubid</code>.
     */
    public final TableField<PgDependRecord, Integer> OBJSUBID = createField(DSL.name("objsubid"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_depend.refclassid</code>.
     */
    public final TableField<PgDependRecord, Long> REFCLASSID = createField(DSL.name("refclassid"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_depend.refobjid</code>.
     */
    public final TableField<PgDependRecord, Long> REFOBJID = createField(DSL.name("refobjid"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_depend.refobjsubid</code>.
     */
    public final TableField<PgDependRecord, Integer> REFOBJSUBID = createField(DSL.name("refobjsubid"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_depend.deptype</code>.
     */
    public final TableField<PgDependRecord, String> DEPTYPE = createField(DSL.name("deptype"), SQLDataType.CHAR.nullable(false), this, "");

    private PgDepend(Name alias, Table<PgDependRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PgDepend(Name alias, Table<PgDependRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_depend</code> table reference
     */
    public PgDepend(String alias) {
        this(DSL.name(alias), PG_DEPEND);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_depend</code> table reference
     */
    public PgDepend(Name alias) {
        this(alias, PG_DEPEND);
    }

    /**
     * Create a <code>pg_catalog.pg_depend</code> table reference
     */
    public PgDepend() {
        this(DSL.name("pg_depend"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.PG_DEPEND_DEPENDER_INDEX, Indexes.PG_DEPEND_REFERENCE_INDEX);
    }

    @Override
    public PgDepend as(String alias) {
        return new PgDepend(DSL.name(alias), this);
    }

    @Override
    public PgDepend as(Name alias) {
        return new PgDepend(alias, this);
    }

    @Override
    public PgDepend as(Table<?> alias) {
        return new PgDepend(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PgDepend rename(String name) {
        return new PgDepend(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgDepend rename(Name name) {
        return new PgDepend(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgDepend rename(Table<?> name) {
        return new PgDepend(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgDepend where(Condition condition) {
        return new PgDepend(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgDepend where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgDepend where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgDepend where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgDepend where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgDepend where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgDepend where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgDepend where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgDepend whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgDepend whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
