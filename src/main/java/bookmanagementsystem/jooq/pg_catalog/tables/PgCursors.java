/*
 * This file is generated by jOOQ.
 */
package bookmanagementsystem.jooq.pg_catalog.tables;


import bookmanagementsystem.jooq.pg_catalog.PgCatalog;
import bookmanagementsystem.jooq.pg_catalog.tables.records.PgCursorsRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.OffsetDateTime;
import java.util.Collection;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class PgCursors extends TableImpl<PgCursorsRecord> {

    /**
     * The reference instance of <code>pg_catalog.pg_cursors</code>
     */
    public static final PgCursors PG_CURSORS = new PgCursors();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>pg_catalog.pg_cursors.name</code>.
     */
    public final TableField<PgCursorsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");
    /**
     * The column <code>pg_catalog.pg_cursors.statement</code>.
     */
    public final TableField<PgCursorsRecord, String> STATEMENT = createField(DSL.name("statement"), SQLDataType.CLOB, this, "");
    /**
     * The column <code>pg_catalog.pg_cursors.is_holdable</code>.
     */
    public final TableField<PgCursorsRecord, Boolean> IS_HOLDABLE = createField(DSL.name("is_holdable"), SQLDataType.BOOLEAN, this, "");
    /**
     * The column <code>pg_catalog.pg_cursors.is_binary</code>.
     */
    public final TableField<PgCursorsRecord, Boolean> IS_BINARY = createField(DSL.name("is_binary"), SQLDataType.BOOLEAN, this, "");
    /**
     * The column <code>pg_catalog.pg_cursors.is_scrollable</code>.
     */
    public final TableField<PgCursorsRecord, Boolean> IS_SCROLLABLE = createField(DSL.name("is_scrollable"), SQLDataType.BOOLEAN, this, "");
    /**
     * The column <code>pg_catalog.pg_cursors.creation_time</code>.
     */
    public final TableField<PgCursorsRecord, OffsetDateTime> CREATION_TIME = createField(DSL.name("creation_time"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    private PgCursors(Name alias, Table<PgCursorsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PgCursors(Name alias, Table<PgCursorsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
                create view "pg_cursors" as  SELECT name,
                 statement,
                 is_holdable,
                 is_binary,
                 is_scrollable,
                 creation_time
                FROM pg_cursor() c(name, statement, is_holdable, is_binary, is_scrollable, creation_time);
                """), where);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_cursors</code> table reference
     */
    public PgCursors(String alias) {
        this(DSL.name(alias), PG_CURSORS);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_cursors</code> table reference
     */
    public PgCursors(Name alias) {
        this(alias, PG_CURSORS);
    }

    /**
     * Create a <code>pg_catalog.pg_cursors</code> table reference
     */
    public PgCursors() {
        this(DSL.name("pg_cursors"), null);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgCursorsRecord> getRecordType() {
        return PgCursorsRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public PgCursors as(String alias) {
        return new PgCursors(DSL.name(alias), this);
    }

    @Override
    public PgCursors as(Name alias) {
        return new PgCursors(alias, this);
    }

    @Override
    public PgCursors as(Table<?> alias) {
        return new PgCursors(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PgCursors rename(String name) {
        return new PgCursors(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgCursors rename(Name name) {
        return new PgCursors(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgCursors rename(Table<?> name) {
        return new PgCursors(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgCursors where(Condition condition) {
        return new PgCursors(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgCursors where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgCursors where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgCursors where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgCursors where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgCursors where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgCursors where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgCursors where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgCursors whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgCursors whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
