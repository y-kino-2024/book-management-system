/*
 * This file is generated by jOOQ.
 */
package bookmanagementsystem.jooq.pg_catalog.tables;


import bookmanagementsystem.jooq.pg_catalog.Keys;
import bookmanagementsystem.jooq.pg_catalog.PgCatalog;
import bookmanagementsystem.jooq.pg_catalog.tables.records.PgDbRoleSettingRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Collection;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class PgDbRoleSetting extends TableImpl<PgDbRoleSettingRecord> {

    /**
     * The reference instance of <code>pg_catalog.pg_db_role_setting</code>
     */
    public static final PgDbRoleSetting PG_DB_ROLE_SETTING = new PgDbRoleSetting();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>pg_catalog.pg_db_role_setting.setdatabase</code>.
     */
    public final TableField<PgDbRoleSettingRecord, Long> SETDATABASE = createField(DSL.name("setdatabase"), SQLDataType.BIGINT.nullable(false), this, "");
    /**
     * The column <code>pg_catalog.pg_db_role_setting.setrole</code>.
     */
    public final TableField<PgDbRoleSettingRecord, Long> SETROLE = createField(DSL.name("setrole"), SQLDataType.BIGINT.nullable(false), this, "");
    /**
     * The column <code>pg_catalog.pg_db_role_setting.setconfig</code>.
     */
    public final TableField<PgDbRoleSettingRecord, String[]> SETCONFIG = createField(DSL.name("setconfig"), SQLDataType.CLOB.array(), this, "");

    private PgDbRoleSetting(Name alias, Table<PgDbRoleSettingRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PgDbRoleSetting(Name alias, Table<PgDbRoleSettingRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_db_role_setting</code> table
     * reference
     */
    public PgDbRoleSetting(String alias) {
        this(DSL.name(alias), PG_DB_ROLE_SETTING);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_db_role_setting</code> table
     * reference
     */
    public PgDbRoleSetting(Name alias) {
        this(alias, PG_DB_ROLE_SETTING);
    }

    /**
     * Create a <code>pg_catalog.pg_db_role_setting</code> table reference
     */
    public PgDbRoleSetting() {
        this(DSL.name("pg_db_role_setting"), null);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgDbRoleSettingRecord> getRecordType() {
        return PgDbRoleSettingRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public UniqueKey<PgDbRoleSettingRecord> getPrimaryKey() {
        return Keys.PG_DB_ROLE_SETTING_DATABASEID_ROL_INDEX;
    }

    @Override
    public PgDbRoleSetting as(String alias) {
        return new PgDbRoleSetting(DSL.name(alias), this);
    }

    @Override
    public PgDbRoleSetting as(Name alias) {
        return new PgDbRoleSetting(alias, this);
    }

    @Override
    public PgDbRoleSetting as(Table<?> alias) {
        return new PgDbRoleSetting(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PgDbRoleSetting rename(String name) {
        return new PgDbRoleSetting(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgDbRoleSetting rename(Name name) {
        return new PgDbRoleSetting(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgDbRoleSetting rename(Table<?> name) {
        return new PgDbRoleSetting(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgDbRoleSetting where(Condition condition) {
        return new PgDbRoleSetting(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgDbRoleSetting where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgDbRoleSetting where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgDbRoleSetting where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgDbRoleSetting where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgDbRoleSetting where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgDbRoleSetting where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgDbRoleSetting where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgDbRoleSetting whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgDbRoleSetting whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
