/*
 * This file is generated by jOOQ.
 */
package bookmanagementsystem.jooq.pg_catalog.tables;


import bookmanagementsystem.jooq.pg_catalog.PgCatalog;
import bookmanagementsystem.jooq.pg_catalog.tables.records.PgMatviewsRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Collection;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class PgMatviews extends TableImpl<PgMatviewsRecord> {

    /**
     * The reference instance of <code>pg_catalog.pg_matviews</code>
     */
    public static final PgMatviews PG_MATVIEWS = new PgMatviews();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>pg_catalog.pg_matviews.schemaname</code>.
     */
    public final TableField<PgMatviewsRecord, String> SCHEMANAME = createField(DSL.name("schemaname"), SQLDataType.VARCHAR, this, "");
    /**
     * The column <code>pg_catalog.pg_matviews.matviewname</code>.
     */
    public final TableField<PgMatviewsRecord, String> MATVIEWNAME = createField(DSL.name("matviewname"), SQLDataType.VARCHAR, this, "");
    /**
     * The column <code>pg_catalog.pg_matviews.matviewowner</code>.
     */
    public final TableField<PgMatviewsRecord, String> MATVIEWOWNER = createField(DSL.name("matviewowner"), SQLDataType.VARCHAR, this, "");
    /**
     * The column <code>pg_catalog.pg_matviews.tablespace</code>.
     */
    public final TableField<PgMatviewsRecord, String> TABLESPACE = createField(DSL.name("tablespace"), SQLDataType.VARCHAR, this, "");
    /**
     * The column <code>pg_catalog.pg_matviews.hasindexes</code>.
     */
    public final TableField<PgMatviewsRecord, Boolean> HASINDEXES = createField(DSL.name("hasindexes"), SQLDataType.BOOLEAN, this, "");
    /**
     * The column <code>pg_catalog.pg_matviews.ispopulated</code>.
     */
    public final TableField<PgMatviewsRecord, Boolean> ISPOPULATED = createField(DSL.name("ispopulated"), SQLDataType.BOOLEAN, this, "");
    /**
     * The column <code>pg_catalog.pg_matviews.definition</code>.
     */
    public final TableField<PgMatviewsRecord, String> DEFINITION = createField(DSL.name("definition"), SQLDataType.CLOB, this, "");

    private PgMatviews(Name alias, Table<PgMatviewsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PgMatviews(Name alias, Table<PgMatviewsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
                create view "pg_matviews" as  SELECT n.nspname AS schemaname,
                  c.relname AS matviewname,
                  pg_get_userbyid(c.relowner) AS matviewowner,
                  t.spcname AS tablespace,
                  c.relhasindex AS hasindexes,
                  c.relispopulated AS ispopulated,
                  pg_get_viewdef(c.oid) AS definition
                 FROM ((pg_class c
                   LEFT JOIN pg_namespace n ON ((n.oid = c.relnamespace)))
                   LEFT JOIN pg_tablespace t ON ((t.oid = c.reltablespace)))
                WHERE (c.relkind = 'm'::"char");
                """), where);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_matviews</code> table reference
     */
    public PgMatviews(String alias) {
        this(DSL.name(alias), PG_MATVIEWS);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_matviews</code> table reference
     */
    public PgMatviews(Name alias) {
        this(alias, PG_MATVIEWS);
    }

    /**
     * Create a <code>pg_catalog.pg_matviews</code> table reference
     */
    public PgMatviews() {
        this(DSL.name("pg_matviews"), null);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgMatviewsRecord> getRecordType() {
        return PgMatviewsRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public PgMatviews as(String alias) {
        return new PgMatviews(DSL.name(alias), this);
    }

    @Override
    public PgMatviews as(Name alias) {
        return new PgMatviews(alias, this);
    }

    @Override
    public PgMatviews as(Table<?> alias) {
        return new PgMatviews(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PgMatviews rename(String name) {
        return new PgMatviews(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgMatviews rename(Name name) {
        return new PgMatviews(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgMatviews rename(Table<?> name) {
        return new PgMatviews(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgMatviews where(Condition condition) {
        return new PgMatviews(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgMatviews where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgMatviews where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgMatviews where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgMatviews where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgMatviews where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgMatviews where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgMatviews where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgMatviews whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgMatviews whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
