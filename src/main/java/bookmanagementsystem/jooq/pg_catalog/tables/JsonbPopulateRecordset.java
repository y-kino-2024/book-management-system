/*
 * This file is generated by jOOQ.
 */
package bookmanagementsystem.jooq.pg_catalog.tables;


import bookmanagementsystem.jooq.pg_catalog.PgCatalog;
import bookmanagementsystem.jooq.pg_catalog.tables.records.JsonbPopulateRecordsetRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.DefaultDataType;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class JsonbPopulateRecordset extends TableImpl<JsonbPopulateRecordsetRecord> {

    /**
     * The reference instance of
     * <code>pg_catalog.jsonb_populate_recordset</code>
     */
    public static final JsonbPopulateRecordset JSONB_POPULATE_RECORDSET = new JsonbPopulateRecordset();
    private static final long serialVersionUID = 1L;
    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public final TableField<JsonbPopulateRecordsetRecord, Object> JSONB_POPULATE_RECORDSET_ = createField(DSL.name("jsonb_populate_recordset"), DefaultDataType.getDefaultDataType("\"anyelement\""), this, "");

    private JsonbPopulateRecordset(Name alias, Table<JsonbPopulateRecordsetRecord> aliased) {
        this(alias, aliased, new Field[]{
                DSL.val(null, DefaultDataType.getDefaultDataType("\"pg_catalog\".\"anyelement\"")),
                DSL.val(null, SQLDataType.JSONB)
        });
    }

    private JsonbPopulateRecordset(Name alias, Table<JsonbPopulateRecordsetRecord> aliased, Field<?>[] parameters) {
        this(alias, aliased, parameters, null);
    }

    private JsonbPopulateRecordset(Name alias, Table<JsonbPopulateRecordsetRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function(), where);
    }

    /**
     * Create an aliased <code>pg_catalog.jsonb_populate_recordset</code> table
     * reference
     */
    public JsonbPopulateRecordset(String alias) {
        this(DSL.name(alias), JSONB_POPULATE_RECORDSET);
    }

    /**
     * Create an aliased <code>pg_catalog.jsonb_populate_recordset</code> table
     * reference
     */
    public JsonbPopulateRecordset(Name alias) {
        this(alias, JSONB_POPULATE_RECORDSET);
    }

    /**
     * Create a <code>pg_catalog.jsonb_populate_recordset</code> table reference
     */
    public JsonbPopulateRecordset() {
        this(DSL.name("jsonb_populate_recordset"), null);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JsonbPopulateRecordsetRecord> getRecordType() {
        return JsonbPopulateRecordsetRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public JsonbPopulateRecordset as(String alias) {
        return new JsonbPopulateRecordset(DSL.name(alias), this, parameters);
    }

    @Override
    public JsonbPopulateRecordset as(Name alias) {
        return new JsonbPopulateRecordset(alias, this, parameters);
    }

    @Override
    public JsonbPopulateRecordset as(Table<?> alias) {
        return new JsonbPopulateRecordset(alias.getQualifiedName(), this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public JsonbPopulateRecordset rename(String name) {
        return new JsonbPopulateRecordset(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public JsonbPopulateRecordset rename(Name name) {
        return new JsonbPopulateRecordset(name, null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public JsonbPopulateRecordset rename(Table<?> name) {
        return new JsonbPopulateRecordset(name.getQualifiedName(), null, parameters);
    }

    /**
     * Call this table-valued function
     */
    public JsonbPopulateRecordset call(
            Object __1
            , JSONB __2
    ) {
        JsonbPopulateRecordset result = new JsonbPopulateRecordset(DSL.name("jsonb_populate_recordset"), null, new Field[]{
                DSL.val(__1, DefaultDataType.getDefaultDataType("\"pg_catalog\".\"anyelement\"")),
                DSL.val(__2, SQLDataType.JSONB)
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    /**
     * Call this table-valued function
     */
    public JsonbPopulateRecordset call(
            Field<Object> __1
            , Field<JSONB> __2
    ) {
        JsonbPopulateRecordset result = new JsonbPopulateRecordset(DSL.name("jsonb_populate_recordset"), null, new Field[]{
                __1,
                __2
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }
}
