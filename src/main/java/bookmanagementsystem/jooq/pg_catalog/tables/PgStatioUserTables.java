/*
 * This file is generated by jOOQ.
 */
package bookmanagementsystem.jooq.pg_catalog.tables;


import bookmanagementsystem.jooq.pg_catalog.PgCatalog;
import bookmanagementsystem.jooq.pg_catalog.tables.records.PgStatioUserTablesRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgStatioUserTables extends TableImpl<PgStatioUserTablesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pg_catalog.pg_statio_user_tables</code>
     */
    public static final PgStatioUserTables PG_STATIO_USER_TABLES = new PgStatioUserTables();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgStatioUserTablesRecord> getRecordType() {
        return PgStatioUserTablesRecord.class;
    }

    /**
     * The column <code>pg_catalog.pg_statio_user_tables.relid</code>.
     */
    public final TableField<PgStatioUserTablesRecord, Long> RELID = createField(DSL.name("relid"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_statio_user_tables.schemaname</code>.
     */
    public final TableField<PgStatioUserTablesRecord, String> SCHEMANAME = createField(DSL.name("schemaname"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>pg_catalog.pg_statio_user_tables.relname</code>.
     */
    public final TableField<PgStatioUserTablesRecord, String> RELNAME = createField(DSL.name("relname"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>pg_catalog.pg_statio_user_tables.heap_blks_read</code>.
     */
    public final TableField<PgStatioUserTablesRecord, Long> HEAP_BLKS_READ = createField(DSL.name("heap_blks_read"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_statio_user_tables.heap_blks_hit</code>.
     */
    public final TableField<PgStatioUserTablesRecord, Long> HEAP_BLKS_HIT = createField(DSL.name("heap_blks_hit"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_statio_user_tables.idx_blks_read</code>.
     */
    public final TableField<PgStatioUserTablesRecord, Long> IDX_BLKS_READ = createField(DSL.name("idx_blks_read"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_statio_user_tables.idx_blks_hit</code>.
     */
    public final TableField<PgStatioUserTablesRecord, Long> IDX_BLKS_HIT = createField(DSL.name("idx_blks_hit"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_statio_user_tables.toast_blks_read</code>.
     */
    public final TableField<PgStatioUserTablesRecord, Long> TOAST_BLKS_READ = createField(DSL.name("toast_blks_read"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_statio_user_tables.toast_blks_hit</code>.
     */
    public final TableField<PgStatioUserTablesRecord, Long> TOAST_BLKS_HIT = createField(DSL.name("toast_blks_hit"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_statio_user_tables.tidx_blks_read</code>.
     */
    public final TableField<PgStatioUserTablesRecord, Long> TIDX_BLKS_READ = createField(DSL.name("tidx_blks_read"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_statio_user_tables.tidx_blks_hit</code>.
     */
    public final TableField<PgStatioUserTablesRecord, Long> TIDX_BLKS_HIT = createField(DSL.name("tidx_blks_hit"), SQLDataType.BIGINT, this, "");

    private PgStatioUserTables(Name alias, Table<PgStatioUserTablesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PgStatioUserTables(Name alias, Table<PgStatioUserTablesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "pg_statio_user_tables" as  SELECT relid,
          schemaname,
          relname,
          heap_blks_read,
          heap_blks_hit,
          idx_blks_read,
          idx_blks_hit,
          toast_blks_read,
          toast_blks_hit,
          tidx_blks_read,
          tidx_blks_hit
         FROM pg_statio_all_tables
        WHERE ((schemaname <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name])) AND (schemaname !~ '^pg_toast'::text));
        """), where);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_statio_user_tables</code> table
     * reference
     */
    public PgStatioUserTables(String alias) {
        this(DSL.name(alias), PG_STATIO_USER_TABLES);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_statio_user_tables</code> table
     * reference
     */
    public PgStatioUserTables(Name alias) {
        this(alias, PG_STATIO_USER_TABLES);
    }

    /**
     * Create a <code>pg_catalog.pg_statio_user_tables</code> table reference
     */
    public PgStatioUserTables() {
        this(DSL.name("pg_statio_user_tables"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public PgStatioUserTables as(String alias) {
        return new PgStatioUserTables(DSL.name(alias), this);
    }

    @Override
    public PgStatioUserTables as(Name alias) {
        return new PgStatioUserTables(alias, this);
    }

    @Override
    public PgStatioUserTables as(Table<?> alias) {
        return new PgStatioUserTables(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PgStatioUserTables rename(String name) {
        return new PgStatioUserTables(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgStatioUserTables rename(Name name) {
        return new PgStatioUserTables(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgStatioUserTables rename(Table<?> name) {
        return new PgStatioUserTables(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgStatioUserTables where(Condition condition) {
        return new PgStatioUserTables(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgStatioUserTables where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgStatioUserTables where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgStatioUserTables where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgStatioUserTables where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgStatioUserTables where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgStatioUserTables where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgStatioUserTables where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgStatioUserTables whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgStatioUserTables whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
