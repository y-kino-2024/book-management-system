/*
 * This file is generated by jOOQ.
 */
package bookmanagementsystem.jooq.pg_catalog.tables;


import bookmanagementsystem.jooq.pg_catalog.PgCatalog;
import bookmanagementsystem.jooq.pg_catalog.tables.records.PgStatGetRecoveryPrefetchRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.OffsetDateTime;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class PgStatGetRecoveryPrefetch extends TableImpl<PgStatGetRecoveryPrefetchRecord> {

    /**
     * The reference instance of
     * <code>pg_catalog.pg_stat_get_recovery_prefetch</code>
     */
    public static final PgStatGetRecoveryPrefetch PG_STAT_GET_RECOVERY_PREFETCH = new PgStatGetRecoveryPrefetch();
    private static final long serialVersionUID = 1L;
    /**
     * The column
     * <code>pg_catalog.pg_stat_get_recovery_prefetch.stats_reset</code>.
     */
    public final TableField<PgStatGetRecoveryPrefetchRecord, OffsetDateTime> STATS_RESET = createField(DSL.name("stats_reset"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");
    /**
     * The column
     * <code>pg_catalog.pg_stat_get_recovery_prefetch.prefetch</code>.
     */
    public final TableField<PgStatGetRecoveryPrefetchRecord, Long> PREFETCH = createField(DSL.name("prefetch"), SQLDataType.BIGINT, this, "");
    /**
     * The column <code>pg_catalog.pg_stat_get_recovery_prefetch.hit</code>.
     */
    public final TableField<PgStatGetRecoveryPrefetchRecord, Long> HIT = createField(DSL.name("hit"), SQLDataType.BIGINT, this, "");
    /**
     * The column
     * <code>pg_catalog.pg_stat_get_recovery_prefetch.skip_init</code>.
     */
    public final TableField<PgStatGetRecoveryPrefetchRecord, Long> SKIP_INIT = createField(DSL.name("skip_init"), SQLDataType.BIGINT, this, "");
    /**
     * The column
     * <code>pg_catalog.pg_stat_get_recovery_prefetch.skip_new</code>.
     */
    public final TableField<PgStatGetRecoveryPrefetchRecord, Long> SKIP_NEW = createField(DSL.name("skip_new"), SQLDataType.BIGINT, this, "");
    /**
     * The column
     * <code>pg_catalog.pg_stat_get_recovery_prefetch.skip_fpw</code>.
     */
    public final TableField<PgStatGetRecoveryPrefetchRecord, Long> SKIP_FPW = createField(DSL.name("skip_fpw"), SQLDataType.BIGINT, this, "");
    /**
     * The column
     * <code>pg_catalog.pg_stat_get_recovery_prefetch.skip_rep</code>.
     */
    public final TableField<PgStatGetRecoveryPrefetchRecord, Long> SKIP_REP = createField(DSL.name("skip_rep"), SQLDataType.BIGINT, this, "");
    /**
     * The column
     * <code>pg_catalog.pg_stat_get_recovery_prefetch.wal_distance</code>.
     */
    public final TableField<PgStatGetRecoveryPrefetchRecord, Integer> WAL_DISTANCE = createField(DSL.name("wal_distance"), SQLDataType.INTEGER, this, "");
    /**
     * The column
     * <code>pg_catalog.pg_stat_get_recovery_prefetch.block_distance</code>.
     */
    public final TableField<PgStatGetRecoveryPrefetchRecord, Integer> BLOCK_DISTANCE = createField(DSL.name("block_distance"), SQLDataType.INTEGER, this, "");
    /**
     * The column
     * <code>pg_catalog.pg_stat_get_recovery_prefetch.io_depth</code>.
     */
    public final TableField<PgStatGetRecoveryPrefetchRecord, Integer> IO_DEPTH = createField(DSL.name("io_depth"), SQLDataType.INTEGER, this, "");

    private PgStatGetRecoveryPrefetch(Name alias, Table<PgStatGetRecoveryPrefetchRecord> aliased) {
        this(alias, aliased, new Field[]{
        });
    }

    private PgStatGetRecoveryPrefetch(Name alias, Table<PgStatGetRecoveryPrefetchRecord> aliased, Field<?>[] parameters) {
        this(alias, aliased, parameters, null);
    }

    private PgStatGetRecoveryPrefetch(Name alias, Table<PgStatGetRecoveryPrefetchRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function(), where);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_stat_get_recovery_prefetch</code>
     * table reference
     */
    public PgStatGetRecoveryPrefetch(String alias) {
        this(DSL.name(alias), PG_STAT_GET_RECOVERY_PREFETCH);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_stat_get_recovery_prefetch</code>
     * table reference
     */
    public PgStatGetRecoveryPrefetch(Name alias) {
        this(alias, PG_STAT_GET_RECOVERY_PREFETCH);
    }

    /**
     * Create a <code>pg_catalog.pg_stat_get_recovery_prefetch</code> table
     * reference
     */
    public PgStatGetRecoveryPrefetch() {
        this(DSL.name("pg_stat_get_recovery_prefetch"), null);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgStatGetRecoveryPrefetchRecord> getRecordType() {
        return PgStatGetRecoveryPrefetchRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public PgStatGetRecoveryPrefetch as(String alias) {
        return new PgStatGetRecoveryPrefetch(DSL.name(alias), this, parameters);
    }

    @Override
    public PgStatGetRecoveryPrefetch as(Name alias) {
        return new PgStatGetRecoveryPrefetch(alias, this, parameters);
    }

    @Override
    public PgStatGetRecoveryPrefetch as(Table<?> alias) {
        return new PgStatGetRecoveryPrefetch(alias.getQualifiedName(), this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public PgStatGetRecoveryPrefetch rename(String name) {
        return new PgStatGetRecoveryPrefetch(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public PgStatGetRecoveryPrefetch rename(Name name) {
        return new PgStatGetRecoveryPrefetch(name, null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public PgStatGetRecoveryPrefetch rename(Table<?> name) {
        return new PgStatGetRecoveryPrefetch(name.getQualifiedName(), null, parameters);
    }

    /**
     * Call this table-valued function
     */
    public PgStatGetRecoveryPrefetch call() {
        PgStatGetRecoveryPrefetch result = new PgStatGetRecoveryPrefetch(DSL.name("pg_stat_get_recovery_prefetch"), null, new Field[]{});

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }
}
