/*
 * This file is generated by jOOQ.
 */
package bookmanagementsystem.jooq.pg_catalog.tables;


import bookmanagementsystem.jooq.pg_catalog.PgCatalog;
import bookmanagementsystem.jooq.pg_catalog.tables.records.PgStatioUserIndexesRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Collection;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class PgStatioUserIndexes extends TableImpl<PgStatioUserIndexesRecord> {

    /**
     * The reference instance of <code>pg_catalog.pg_statio_user_indexes</code>
     */
    public static final PgStatioUserIndexes PG_STATIO_USER_INDEXES = new PgStatioUserIndexes();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>pg_catalog.pg_statio_user_indexes.relid</code>.
     */
    public final TableField<PgStatioUserIndexesRecord, Long> RELID = createField(DSL.name("relid"), SQLDataType.BIGINT, this, "");
    /**
     * The column <code>pg_catalog.pg_statio_user_indexes.indexrelid</code>.
     */
    public final TableField<PgStatioUserIndexesRecord, Long> INDEXRELID = createField(DSL.name("indexrelid"), SQLDataType.BIGINT, this, "");
    /**
     * The column <code>pg_catalog.pg_statio_user_indexes.schemaname</code>.
     */
    public final TableField<PgStatioUserIndexesRecord, String> SCHEMANAME = createField(DSL.name("schemaname"), SQLDataType.VARCHAR, this, "");
    /**
     * The column <code>pg_catalog.pg_statio_user_indexes.relname</code>.
     */
    public final TableField<PgStatioUserIndexesRecord, String> RELNAME = createField(DSL.name("relname"), SQLDataType.VARCHAR, this, "");
    /**
     * The column <code>pg_catalog.pg_statio_user_indexes.indexrelname</code>.
     */
    public final TableField<PgStatioUserIndexesRecord, String> INDEXRELNAME = createField(DSL.name("indexrelname"), SQLDataType.VARCHAR, this, "");
    /**
     * The column <code>pg_catalog.pg_statio_user_indexes.idx_blks_read</code>.
     */
    public final TableField<PgStatioUserIndexesRecord, Long> IDX_BLKS_READ = createField(DSL.name("idx_blks_read"), SQLDataType.BIGINT, this, "");
    /**
     * The column <code>pg_catalog.pg_statio_user_indexes.idx_blks_hit</code>.
     */
    public final TableField<PgStatioUserIndexesRecord, Long> IDX_BLKS_HIT = createField(DSL.name("idx_blks_hit"), SQLDataType.BIGINT, this, "");

    private PgStatioUserIndexes(Name alias, Table<PgStatioUserIndexesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PgStatioUserIndexes(Name alias, Table<PgStatioUserIndexesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
                create view "pg_statio_user_indexes" as  SELECT relid,
                  indexrelid,
                  schemaname,
                  relname,
                  indexrelname,
                  idx_blks_read,
                  idx_blks_hit
                 FROM pg_statio_all_indexes
                WHERE ((schemaname <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name])) AND (schemaname !~ '^pg_toast'::text));
                """), where);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_statio_user_indexes</code> table
     * reference
     */
    public PgStatioUserIndexes(String alias) {
        this(DSL.name(alias), PG_STATIO_USER_INDEXES);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_statio_user_indexes</code> table
     * reference
     */
    public PgStatioUserIndexes(Name alias) {
        this(alias, PG_STATIO_USER_INDEXES);
    }

    /**
     * Create a <code>pg_catalog.pg_statio_user_indexes</code> table reference
     */
    public PgStatioUserIndexes() {
        this(DSL.name("pg_statio_user_indexes"), null);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgStatioUserIndexesRecord> getRecordType() {
        return PgStatioUserIndexesRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public PgStatioUserIndexes as(String alias) {
        return new PgStatioUserIndexes(DSL.name(alias), this);
    }

    @Override
    public PgStatioUserIndexes as(Name alias) {
        return new PgStatioUserIndexes(alias, this);
    }

    @Override
    public PgStatioUserIndexes as(Table<?> alias) {
        return new PgStatioUserIndexes(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PgStatioUserIndexes rename(String name) {
        return new PgStatioUserIndexes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgStatioUserIndexes rename(Name name) {
        return new PgStatioUserIndexes(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgStatioUserIndexes rename(Table<?> name) {
        return new PgStatioUserIndexes(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgStatioUserIndexes where(Condition condition) {
        return new PgStatioUserIndexes(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgStatioUserIndexes where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgStatioUserIndexes where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgStatioUserIndexes where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgStatioUserIndexes where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgStatioUserIndexes where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgStatioUserIndexes where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgStatioUserIndexes where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgStatioUserIndexes whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgStatioUserIndexes whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
