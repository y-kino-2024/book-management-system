/*
 * This file is generated by jOOQ.
 */
package bookmanagementsystem.jooq.pg_catalog.tables;


import bookmanagementsystem.jooq.pg_catalog.PgCatalog;
import bookmanagementsystem.jooq.pg_catalog.tables.records.PgStatAllIndexesRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.OffsetDateTime;
import java.util.Collection;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class PgStatAllIndexes extends TableImpl<PgStatAllIndexesRecord> {

    /**
     * The reference instance of <code>pg_catalog.pg_stat_all_indexes</code>
     */
    public static final PgStatAllIndexes PG_STAT_ALL_INDEXES = new PgStatAllIndexes();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>pg_catalog.pg_stat_all_indexes.relid</code>.
     */
    public final TableField<PgStatAllIndexesRecord, Long> RELID = createField(DSL.name("relid"), SQLDataType.BIGINT, this, "");
    /**
     * The column <code>pg_catalog.pg_stat_all_indexes.indexrelid</code>.
     */
    public final TableField<PgStatAllIndexesRecord, Long> INDEXRELID = createField(DSL.name("indexrelid"), SQLDataType.BIGINT, this, "");
    /**
     * The column <code>pg_catalog.pg_stat_all_indexes.schemaname</code>.
     */
    public final TableField<PgStatAllIndexesRecord, String> SCHEMANAME = createField(DSL.name("schemaname"), SQLDataType.VARCHAR, this, "");
    /**
     * The column <code>pg_catalog.pg_stat_all_indexes.relname</code>.
     */
    public final TableField<PgStatAllIndexesRecord, String> RELNAME = createField(DSL.name("relname"), SQLDataType.VARCHAR, this, "");
    /**
     * The column <code>pg_catalog.pg_stat_all_indexes.indexrelname</code>.
     */
    public final TableField<PgStatAllIndexesRecord, String> INDEXRELNAME = createField(DSL.name("indexrelname"), SQLDataType.VARCHAR, this, "");
    /**
     * The column <code>pg_catalog.pg_stat_all_indexes.idx_scan</code>.
     */
    public final TableField<PgStatAllIndexesRecord, Long> IDX_SCAN = createField(DSL.name("idx_scan"), SQLDataType.BIGINT, this, "");
    /**
     * The column <code>pg_catalog.pg_stat_all_indexes.last_idx_scan</code>.
     */
    public final TableField<PgStatAllIndexesRecord, OffsetDateTime> LAST_IDX_SCAN = createField(DSL.name("last_idx_scan"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");
    /**
     * The column <code>pg_catalog.pg_stat_all_indexes.idx_tup_read</code>.
     */
    public final TableField<PgStatAllIndexesRecord, Long> IDX_TUP_READ = createField(DSL.name("idx_tup_read"), SQLDataType.BIGINT, this, "");
    /**
     * The column <code>pg_catalog.pg_stat_all_indexes.idx_tup_fetch</code>.
     */
    public final TableField<PgStatAllIndexesRecord, Long> IDX_TUP_FETCH = createField(DSL.name("idx_tup_fetch"), SQLDataType.BIGINT, this, "");

    private PgStatAllIndexes(Name alias, Table<PgStatAllIndexesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PgStatAllIndexes(Name alias, Table<PgStatAllIndexesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
                create view "pg_stat_all_indexes" as  SELECT c.oid AS relid,
                  i.oid AS indexrelid,
                  n.nspname AS schemaname,
                  c.relname,
                  i.relname AS indexrelname,
                  pg_stat_get_numscans(i.oid) AS idx_scan,
                  pg_stat_get_lastscan(i.oid) AS last_idx_scan,
                  pg_stat_get_tuples_returned(i.oid) AS idx_tup_read,
                  pg_stat_get_tuples_fetched(i.oid) AS idx_tup_fetch
                 FROM (((pg_class c
                   JOIN pg_index x ON ((c.oid = x.indrelid)))
                   JOIN pg_class i ON ((i.oid = x.indexrelid)))
                   LEFT JOIN pg_namespace n ON ((n.oid = c.relnamespace)))
                WHERE (c.relkind = ANY (ARRAY['r'::"char", 't'::"char", 'm'::"char"]));
                """), where);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_stat_all_indexes</code> table
     * reference
     */
    public PgStatAllIndexes(String alias) {
        this(DSL.name(alias), PG_STAT_ALL_INDEXES);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_stat_all_indexes</code> table
     * reference
     */
    public PgStatAllIndexes(Name alias) {
        this(alias, PG_STAT_ALL_INDEXES);
    }

    /**
     * Create a <code>pg_catalog.pg_stat_all_indexes</code> table reference
     */
    public PgStatAllIndexes() {
        this(DSL.name("pg_stat_all_indexes"), null);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgStatAllIndexesRecord> getRecordType() {
        return PgStatAllIndexesRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public PgStatAllIndexes as(String alias) {
        return new PgStatAllIndexes(DSL.name(alias), this);
    }

    @Override
    public PgStatAllIndexes as(Name alias) {
        return new PgStatAllIndexes(alias, this);
    }

    @Override
    public PgStatAllIndexes as(Table<?> alias) {
        return new PgStatAllIndexes(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PgStatAllIndexes rename(String name) {
        return new PgStatAllIndexes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgStatAllIndexes rename(Name name) {
        return new PgStatAllIndexes(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgStatAllIndexes rename(Table<?> name) {
        return new PgStatAllIndexes(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgStatAllIndexes where(Condition condition) {
        return new PgStatAllIndexes(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgStatAllIndexes where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgStatAllIndexes where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgStatAllIndexes where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgStatAllIndexes where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgStatAllIndexes where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgStatAllIndexes where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgStatAllIndexes where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgStatAllIndexes whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgStatAllIndexes whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
