/*
 * This file is generated by jOOQ.
 */
package bookmanagementsystem.jooq.pg_catalog.tables;


import bookmanagementsystem.jooq.pg_catalog.Keys;
import bookmanagementsystem.jooq.pg_catalog.PgCatalog;
import bookmanagementsystem.jooq.pg_catalog.tables.records.PgAuthidRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class PgAuthid extends TableImpl<PgAuthidRecord> {

    /**
     * The reference instance of <code>pg_catalog.pg_authid</code>
     */
    public static final PgAuthid PG_AUTHID = new PgAuthid();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>pg_catalog.pg_authid.oid</code>.
     */
    public final TableField<PgAuthidRecord, Long> OID = createField(DSL.name("oid"), SQLDataType.BIGINT.nullable(false), this, "");
    /**
     * The column <code>pg_catalog.pg_authid.rolname</code>.
     */
    public final TableField<PgAuthidRecord, String> ROLNAME = createField(DSL.name("rolname"), SQLDataType.VARCHAR.nullable(false), this, "");
    /**
     * The column <code>pg_catalog.pg_authid.rolsuper</code>.
     */
    public final TableField<PgAuthidRecord, Boolean> ROLSUPER = createField(DSL.name("rolsuper"), SQLDataType.BOOLEAN.nullable(false), this, "");
    /**
     * The column <code>pg_catalog.pg_authid.rolinherit</code>.
     */
    public final TableField<PgAuthidRecord, Boolean> ROLINHERIT = createField(DSL.name("rolinherit"), SQLDataType.BOOLEAN.nullable(false), this, "");
    /**
     * The column <code>pg_catalog.pg_authid.rolcreaterole</code>.
     */
    public final TableField<PgAuthidRecord, Boolean> ROLCREATEROLE = createField(DSL.name("rolcreaterole"), SQLDataType.BOOLEAN.nullable(false), this, "");
    /**
     * The column <code>pg_catalog.pg_authid.rolcreatedb</code>.
     */
    public final TableField<PgAuthidRecord, Boolean> ROLCREATEDB = createField(DSL.name("rolcreatedb"), SQLDataType.BOOLEAN.nullable(false), this, "");
    /**
     * The column <code>pg_catalog.pg_authid.rolcanlogin</code>.
     */
    public final TableField<PgAuthidRecord, Boolean> ROLCANLOGIN = createField(DSL.name("rolcanlogin"), SQLDataType.BOOLEAN.nullable(false), this, "");
    /**
     * The column <code>pg_catalog.pg_authid.rolreplication</code>.
     */
    public final TableField<PgAuthidRecord, Boolean> ROLREPLICATION = createField(DSL.name("rolreplication"), SQLDataType.BOOLEAN.nullable(false), this, "");
    /**
     * The column <code>pg_catalog.pg_authid.rolbypassrls</code>.
     */
    public final TableField<PgAuthidRecord, Boolean> ROLBYPASSRLS = createField(DSL.name("rolbypassrls"), SQLDataType.BOOLEAN.nullable(false), this, "");
    /**
     * The column <code>pg_catalog.pg_authid.rolconnlimit</code>.
     */
    public final TableField<PgAuthidRecord, Integer> ROLCONNLIMIT = createField(DSL.name("rolconnlimit"), SQLDataType.INTEGER.nullable(false), this, "");
    /**
     * The column <code>pg_catalog.pg_authid.rolpassword</code>.
     */
    public final TableField<PgAuthidRecord, String> ROLPASSWORD = createField(DSL.name("rolpassword"), SQLDataType.CLOB, this, "");
    /**
     * The column <code>pg_catalog.pg_authid.rolvaliduntil</code>.
     */
    public final TableField<PgAuthidRecord, OffsetDateTime> ROLVALIDUNTIL = createField(DSL.name("rolvaliduntil"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    private PgAuthid(Name alias, Table<PgAuthidRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PgAuthid(Name alias, Table<PgAuthidRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_authid</code> table reference
     */
    public PgAuthid(String alias) {
        this(DSL.name(alias), PG_AUTHID);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_authid</code> table reference
     */
    public PgAuthid(Name alias) {
        this(alias, PG_AUTHID);
    }

    /**
     * Create a <code>pg_catalog.pg_authid</code> table reference
     */
    public PgAuthid() {
        this(DSL.name("pg_authid"), null);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgAuthidRecord> getRecordType() {
        return PgAuthidRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public UniqueKey<PgAuthidRecord> getPrimaryKey() {
        return Keys.PG_AUTHID_OID_INDEX;
    }

    @Override
    public List<UniqueKey<PgAuthidRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.PG_AUTHID_ROLNAME_INDEX);
    }

    @Override
    public PgAuthid as(String alias) {
        return new PgAuthid(DSL.name(alias), this);
    }

    @Override
    public PgAuthid as(Name alias) {
        return new PgAuthid(alias, this);
    }

    @Override
    public PgAuthid as(Table<?> alias) {
        return new PgAuthid(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PgAuthid rename(String name) {
        return new PgAuthid(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgAuthid rename(Name name) {
        return new PgAuthid(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgAuthid rename(Table<?> name) {
        return new PgAuthid(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgAuthid where(Condition condition) {
        return new PgAuthid(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgAuthid where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgAuthid where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgAuthid where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgAuthid where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgAuthid where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgAuthid where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgAuthid where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgAuthid whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgAuthid whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
