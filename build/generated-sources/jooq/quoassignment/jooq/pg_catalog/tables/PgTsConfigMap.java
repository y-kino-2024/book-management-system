/*
 * This file is generated by jOOQ.
 */
package quoassignment.jooq.pg_catalog.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import quoassignment.jooq.pg_catalog.Keys;
import quoassignment.jooq.pg_catalog.PgCatalog;
import quoassignment.jooq.pg_catalog.tables.records.PgTsConfigMapRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgTsConfigMap extends TableImpl<PgTsConfigMapRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pg_catalog.pg_ts_config_map</code>
     */
    public static final PgTsConfigMap PG_TS_CONFIG_MAP = new PgTsConfigMap();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgTsConfigMapRecord> getRecordType() {
        return PgTsConfigMapRecord.class;
    }

    /**
     * The column <code>pg_catalog.pg_ts_config_map.mapcfg</code>.
     */
    public final TableField<PgTsConfigMapRecord, Long> MAPCFG = createField(DSL.name("mapcfg"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_ts_config_map.maptokentype</code>.
     */
    public final TableField<PgTsConfigMapRecord, Integer> MAPTOKENTYPE = createField(DSL.name("maptokentype"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_ts_config_map.mapseqno</code>.
     */
    public final TableField<PgTsConfigMapRecord, Integer> MAPSEQNO = createField(DSL.name("mapseqno"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_ts_config_map.mapdict</code>.
     */
    public final TableField<PgTsConfigMapRecord, Long> MAPDICT = createField(DSL.name("mapdict"), SQLDataType.BIGINT.nullable(false), this, "");

    private PgTsConfigMap(Name alias, Table<PgTsConfigMapRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PgTsConfigMap(Name alias, Table<PgTsConfigMapRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_ts_config_map</code> table
     * reference
     */
    public PgTsConfigMap(String alias) {
        this(DSL.name(alias), PG_TS_CONFIG_MAP);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_ts_config_map</code> table
     * reference
     */
    public PgTsConfigMap(Name alias) {
        this(alias, PG_TS_CONFIG_MAP);
    }

    /**
     * Create a <code>pg_catalog.pg_ts_config_map</code> table reference
     */
    public PgTsConfigMap() {
        this(DSL.name("pg_ts_config_map"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public UniqueKey<PgTsConfigMapRecord> getPrimaryKey() {
        return Keys.PG_TS_CONFIG_MAP_INDEX;
    }

    @Override
    public PgTsConfigMap as(String alias) {
        return new PgTsConfigMap(DSL.name(alias), this);
    }

    @Override
    public PgTsConfigMap as(Name alias) {
        return new PgTsConfigMap(alias, this);
    }

    @Override
    public PgTsConfigMap as(Table<?> alias) {
        return new PgTsConfigMap(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PgTsConfigMap rename(String name) {
        return new PgTsConfigMap(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgTsConfigMap rename(Name name) {
        return new PgTsConfigMap(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgTsConfigMap rename(Table<?> name) {
        return new PgTsConfigMap(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgTsConfigMap where(Condition condition) {
        return new PgTsConfigMap(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgTsConfigMap where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgTsConfigMap where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgTsConfigMap where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgTsConfigMap where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgTsConfigMap where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgTsConfigMap where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgTsConfigMap where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgTsConfigMap whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgTsConfigMap whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
