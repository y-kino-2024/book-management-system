/*
 * This file is generated by jOOQ.
 */
package quoassignment.jooq.pg_catalog.tables;


import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import quoassignment.jooq.pg_catalog.PgCatalog;
import quoassignment.jooq.pg_catalog.tables.records.PgGetKeywordsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgGetKeywords extends TableImpl<PgGetKeywordsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pg_catalog.pg_get_keywords</code>
     */
    public static final PgGetKeywords PG_GET_KEYWORDS = new PgGetKeywords();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgGetKeywordsRecord> getRecordType() {
        return PgGetKeywordsRecord.class;
    }

    /**
     * The column <code>pg_catalog.pg_get_keywords.word</code>.
     */
    public final TableField<PgGetKeywordsRecord, String> WORD = createField(DSL.name("word"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.pg_get_keywords.catcode</code>.
     */
    public final TableField<PgGetKeywordsRecord, String> CATCODE = createField(DSL.name("catcode"), SQLDataType.CHAR, this, "");

    /**
     * The column <code>pg_catalog.pg_get_keywords.barelabel</code>.
     */
    public final TableField<PgGetKeywordsRecord, Boolean> BARELABEL = createField(DSL.name("barelabel"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>pg_catalog.pg_get_keywords.catdesc</code>.
     */
    public final TableField<PgGetKeywordsRecord, String> CATDESC = createField(DSL.name("catdesc"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.pg_get_keywords.baredesc</code>.
     */
    public final TableField<PgGetKeywordsRecord, String> BAREDESC = createField(DSL.name("baredesc"), SQLDataType.CLOB, this, "");

    private PgGetKeywords(Name alias, Table<PgGetKeywordsRecord> aliased) {
        this(alias, aliased, new Field[] {
        });
    }

    private PgGetKeywords(Name alias, Table<PgGetKeywordsRecord> aliased, Field<?>[] parameters) {
        this(alias, aliased, parameters, null);
    }

    private PgGetKeywords(Name alias, Table<PgGetKeywordsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function(), where);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_get_keywords</code> table reference
     */
    public PgGetKeywords(String alias) {
        this(DSL.name(alias), PG_GET_KEYWORDS);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_get_keywords</code> table reference
     */
    public PgGetKeywords(Name alias) {
        this(alias, PG_GET_KEYWORDS);
    }

    /**
     * Create a <code>pg_catalog.pg_get_keywords</code> table reference
     */
    public PgGetKeywords() {
        this(DSL.name("pg_get_keywords"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public PgGetKeywords as(String alias) {
        return new PgGetKeywords(DSL.name(alias), this, parameters);
    }

    @Override
    public PgGetKeywords as(Name alias) {
        return new PgGetKeywords(alias, this, parameters);
    }

    @Override
    public PgGetKeywords as(Table<?> alias) {
        return new PgGetKeywords(alias.getQualifiedName(), this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public PgGetKeywords rename(String name) {
        return new PgGetKeywords(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public PgGetKeywords rename(Name name) {
        return new PgGetKeywords(name, null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public PgGetKeywords rename(Table<?> name) {
        return new PgGetKeywords(name.getQualifiedName(), null, parameters);
    }

    /**
     * Call this table-valued function
     */
    public PgGetKeywords call() {
        PgGetKeywords result = new PgGetKeywords(DSL.name("pg_get_keywords"), null, new Field[] {});

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }
}
