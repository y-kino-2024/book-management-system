/*
 * This file is generated by jOOQ.
 */
package quoassignment.jooq.pg_catalog.tables.records;


import java.time.OffsetDateTime;

import org.jooq.impl.TableRecordImpl;

import quoassignment.jooq.pg_catalog.tables.PgPreparedStatements;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgPreparedStatementsRecord extends TableRecordImpl<PgPreparedStatementsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>pg_catalog.pg_prepared_statements.name</code>.
     */
    public void setName(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_prepared_statements.name</code>.
     */
    public String getName() {
        return (String) get(0);
    }

    /**
     * Setter for <code>pg_catalog.pg_prepared_statements.statement</code>.
     */
    public void setStatement(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_prepared_statements.statement</code>.
     */
    public String getStatement() {
        return (String) get(1);
    }

    /**
     * Setter for <code>pg_catalog.pg_prepared_statements.prepare_time</code>.
     */
    public void setPrepareTime(OffsetDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_prepared_statements.prepare_time</code>.
     */
    public OffsetDateTime getPrepareTime() {
        return (OffsetDateTime) get(2);
    }

    /**
     * Setter for
     * <code>pg_catalog.pg_prepared_statements.parameter_types</code>.
     */
    public void setParameterTypes(Object[] value) {
        set(3, value);
    }

    /**
     * Getter for
     * <code>pg_catalog.pg_prepared_statements.parameter_types</code>.
     */
    public Object[] getParameterTypes() {
        return (Object[]) get(3);
    }

    /**
     * Setter for <code>pg_catalog.pg_prepared_statements.result_types</code>.
     */
    public void setResultTypes(Object[] value) {
        set(4, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_prepared_statements.result_types</code>.
     */
    public Object[] getResultTypes() {
        return (Object[]) get(4);
    }

    /**
     * Setter for <code>pg_catalog.pg_prepared_statements.from_sql</code>.
     */
    public void setFromSql(Boolean value) {
        set(5, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_prepared_statements.from_sql</code>.
     */
    public Boolean getFromSql() {
        return (Boolean) get(5);
    }

    /**
     * Setter for <code>pg_catalog.pg_prepared_statements.generic_plans</code>.
     */
    public void setGenericPlans(Long value) {
        set(6, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_prepared_statements.generic_plans</code>.
     */
    public Long getGenericPlans() {
        return (Long) get(6);
    }

    /**
     * Setter for <code>pg_catalog.pg_prepared_statements.custom_plans</code>.
     */
    public void setCustomPlans(Long value) {
        set(7, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_prepared_statements.custom_plans</code>.
     */
    public Long getCustomPlans() {
        return (Long) get(7);
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PgPreparedStatementsRecord
     */
    public PgPreparedStatementsRecord() {
        super(PgPreparedStatements.PG_PREPARED_STATEMENTS);
    }

    /**
     * Create a detached, initialised PgPreparedStatementsRecord
     */
    public PgPreparedStatementsRecord(String name, String statement, OffsetDateTime prepareTime, Object[] parameterTypes, Object[] resultTypes, Boolean fromSql, Long genericPlans, Long customPlans) {
        super(PgPreparedStatements.PG_PREPARED_STATEMENTS);

        setName(name);
        setStatement(statement);
        setPrepareTime(prepareTime);
        setParameterTypes(parameterTypes);
        setResultTypes(resultTypes);
        setFromSql(fromSql);
        setGenericPlans(genericPlans);
        setCustomPlans(customPlans);
        resetChangedOnNotNull();
    }
}
