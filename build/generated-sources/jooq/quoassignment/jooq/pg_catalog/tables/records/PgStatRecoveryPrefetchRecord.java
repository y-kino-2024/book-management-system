/*
 * This file is generated by jOOQ.
 */
package quoassignment.jooq.pg_catalog.tables.records;


import java.time.OffsetDateTime;

import org.jooq.impl.TableRecordImpl;

import quoassignment.jooq.pg_catalog.tables.PgStatRecoveryPrefetch;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgStatRecoveryPrefetchRecord extends TableRecordImpl<PgStatRecoveryPrefetchRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>pg_catalog.pg_stat_recovery_prefetch.stats_reset</code>.
     */
    public void setStatsReset(OffsetDateTime value) {
        set(0, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_recovery_prefetch.stats_reset</code>.
     */
    public OffsetDateTime getStatsReset() {
        return (OffsetDateTime) get(0);
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_recovery_prefetch.prefetch</code>.
     */
    public void setPrefetch(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_recovery_prefetch.prefetch</code>.
     */
    public Long getPrefetch() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_recovery_prefetch.hit</code>.
     */
    public void setHit(Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_recovery_prefetch.hit</code>.
     */
    public Long getHit() {
        return (Long) get(2);
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_recovery_prefetch.skip_init</code>.
     */
    public void setSkipInit(Long value) {
        set(3, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_recovery_prefetch.skip_init</code>.
     */
    public Long getSkipInit() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_recovery_prefetch.skip_new</code>.
     */
    public void setSkipNew(Long value) {
        set(4, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_recovery_prefetch.skip_new</code>.
     */
    public Long getSkipNew() {
        return (Long) get(4);
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_recovery_prefetch.skip_fpw</code>.
     */
    public void setSkipFpw(Long value) {
        set(5, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_recovery_prefetch.skip_fpw</code>.
     */
    public Long getSkipFpw() {
        return (Long) get(5);
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_recovery_prefetch.skip_rep</code>.
     */
    public void setSkipRep(Long value) {
        set(6, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_recovery_prefetch.skip_rep</code>.
     */
    public Long getSkipRep() {
        return (Long) get(6);
    }

    /**
     * Setter for
     * <code>pg_catalog.pg_stat_recovery_prefetch.wal_distance</code>.
     */
    public void setWalDistance(Integer value) {
        set(7, value);
    }

    /**
     * Getter for
     * <code>pg_catalog.pg_stat_recovery_prefetch.wal_distance</code>.
     */
    public Integer getWalDistance() {
        return (Integer) get(7);
    }

    /**
     * Setter for
     * <code>pg_catalog.pg_stat_recovery_prefetch.block_distance</code>.
     */
    public void setBlockDistance(Integer value) {
        set(8, value);
    }

    /**
     * Getter for
     * <code>pg_catalog.pg_stat_recovery_prefetch.block_distance</code>.
     */
    public Integer getBlockDistance() {
        return (Integer) get(8);
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_recovery_prefetch.io_depth</code>.
     */
    public void setIoDepth(Integer value) {
        set(9, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_recovery_prefetch.io_depth</code>.
     */
    public Integer getIoDepth() {
        return (Integer) get(9);
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PgStatRecoveryPrefetchRecord
     */
    public PgStatRecoveryPrefetchRecord() {
        super(PgStatRecoveryPrefetch.PG_STAT_RECOVERY_PREFETCH);
    }

    /**
     * Create a detached, initialised PgStatRecoveryPrefetchRecord
     */
    public PgStatRecoveryPrefetchRecord(OffsetDateTime statsReset, Long prefetch, Long hit, Long skipInit, Long skipNew, Long skipFpw, Long skipRep, Integer walDistance, Integer blockDistance, Integer ioDepth) {
        super(PgStatRecoveryPrefetch.PG_STAT_RECOVERY_PREFETCH);

        setStatsReset(statsReset);
        setPrefetch(prefetch);
        setHit(hit);
        setSkipInit(skipInit);
        setSkipNew(skipNew);
        setSkipFpw(skipFpw);
        setSkipRep(skipRep);
        setWalDistance(walDistance);
        setBlockDistance(blockDistance);
        setIoDepth(ioDepth);
        resetChangedOnNotNull();
    }
}
