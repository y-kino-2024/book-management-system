/*
 * This file is generated by jOOQ.
 */
package quoassignment.jooq.pg_catalog.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import quoassignment.jooq.pg_catalog.PgCatalog;
import quoassignment.jooq.pg_catalog.tables.records.PgRulesRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgRules extends TableImpl<PgRulesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pg_catalog.pg_rules</code>
     */
    public static final PgRules PG_RULES = new PgRules();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgRulesRecord> getRecordType() {
        return PgRulesRecord.class;
    }

    /**
     * The column <code>pg_catalog.pg_rules.schemaname</code>.
     */
    public final TableField<PgRulesRecord, String> SCHEMANAME = createField(DSL.name("schemaname"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>pg_catalog.pg_rules.tablename</code>.
     */
    public final TableField<PgRulesRecord, String> TABLENAME = createField(DSL.name("tablename"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>pg_catalog.pg_rules.rulename</code>.
     */
    public final TableField<PgRulesRecord, String> RULENAME = createField(DSL.name("rulename"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>pg_catalog.pg_rules.definition</code>.
     */
    public final TableField<PgRulesRecord, String> DEFINITION = createField(DSL.name("definition"), SQLDataType.CLOB, this, "");

    private PgRules(Name alias, Table<PgRulesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PgRules(Name alias, Table<PgRulesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "pg_rules" as  SELECT n.nspname AS schemaname,
          c.relname AS tablename,
          r.rulename,
          pg_get_ruledef(r.oid) AS definition
         FROM ((pg_rewrite r
           JOIN pg_class c ON ((c.oid = r.ev_class)))
           LEFT JOIN pg_namespace n ON ((n.oid = c.relnamespace)))
        WHERE (r.rulename <> '_RETURN'::name);
        """), where);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_rules</code> table reference
     */
    public PgRules(String alias) {
        this(DSL.name(alias), PG_RULES);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_rules</code> table reference
     */
    public PgRules(Name alias) {
        this(alias, PG_RULES);
    }

    /**
     * Create a <code>pg_catalog.pg_rules</code> table reference
     */
    public PgRules() {
        this(DSL.name("pg_rules"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public PgRules as(String alias) {
        return new PgRules(DSL.name(alias), this);
    }

    @Override
    public PgRules as(Name alias) {
        return new PgRules(alias, this);
    }

    @Override
    public PgRules as(Table<?> alias) {
        return new PgRules(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PgRules rename(String name) {
        return new PgRules(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgRules rename(Name name) {
        return new PgRules(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgRules rename(Table<?> name) {
        return new PgRules(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgRules where(Condition condition) {
        return new PgRules(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgRules where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgRules where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgRules where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgRules where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgRules where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgRules where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgRules where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgRules whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgRules whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
