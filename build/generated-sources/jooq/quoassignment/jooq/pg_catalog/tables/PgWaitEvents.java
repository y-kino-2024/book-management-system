/*
 * This file is generated by jOOQ.
 */
package quoassignment.jooq.pg_catalog.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import quoassignment.jooq.pg_catalog.PgCatalog;
import quoassignment.jooq.pg_catalog.tables.records.PgWaitEventsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgWaitEvents extends TableImpl<PgWaitEventsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pg_catalog.pg_wait_events</code>
     */
    public static final PgWaitEvents PG_WAIT_EVENTS = new PgWaitEvents();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgWaitEventsRecord> getRecordType() {
        return PgWaitEventsRecord.class;
    }

    /**
     * The column <code>pg_catalog.pg_wait_events.type</code>.
     */
    public final TableField<PgWaitEventsRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.pg_wait_events.name</code>.
     */
    public final TableField<PgWaitEventsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.pg_wait_events.description</code>.
     */
    public final TableField<PgWaitEventsRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    private PgWaitEvents(Name alias, Table<PgWaitEventsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PgWaitEvents(Name alias, Table<PgWaitEventsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "pg_wait_events" as  SELECT type,
         name,
         description
        FROM pg_get_wait_events() pg_get_wait_events(type, name, description);
        """), where);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_wait_events</code> table reference
     */
    public PgWaitEvents(String alias) {
        this(DSL.name(alias), PG_WAIT_EVENTS);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_wait_events</code> table reference
     */
    public PgWaitEvents(Name alias) {
        this(alias, PG_WAIT_EVENTS);
    }

    /**
     * Create a <code>pg_catalog.pg_wait_events</code> table reference
     */
    public PgWaitEvents() {
        this(DSL.name("pg_wait_events"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public PgWaitEvents as(String alias) {
        return new PgWaitEvents(DSL.name(alias), this);
    }

    @Override
    public PgWaitEvents as(Name alias) {
        return new PgWaitEvents(alias, this);
    }

    @Override
    public PgWaitEvents as(Table<?> alias) {
        return new PgWaitEvents(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PgWaitEvents rename(String name) {
        return new PgWaitEvents(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgWaitEvents rename(Name name) {
        return new PgWaitEvents(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgWaitEvents rename(Table<?> name) {
        return new PgWaitEvents(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgWaitEvents where(Condition condition) {
        return new PgWaitEvents(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgWaitEvents where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgWaitEvents where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgWaitEvents where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgWaitEvents where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgWaitEvents where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgWaitEvents where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgWaitEvents where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgWaitEvents whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgWaitEvents whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
