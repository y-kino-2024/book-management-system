/*
 * This file is generated by jOOQ.
 */
package quoassignment.jooq.pg_catalog.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import quoassignment.jooq.pg_catalog.Indexes;
import quoassignment.jooq.pg_catalog.PgCatalog;
import quoassignment.jooq.pg_catalog.tables.records.PgShdependRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgShdepend extends TableImpl<PgShdependRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pg_catalog.pg_shdepend</code>
     */
    public static final PgShdepend PG_SHDEPEND = new PgShdepend();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgShdependRecord> getRecordType() {
        return PgShdependRecord.class;
    }

    /**
     * The column <code>pg_catalog.pg_shdepend.dbid</code>.
     */
    public final TableField<PgShdependRecord, Long> DBID = createField(DSL.name("dbid"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_shdepend.classid</code>.
     */
    public final TableField<PgShdependRecord, Long> CLASSID = createField(DSL.name("classid"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_shdepend.objid</code>.
     */
    public final TableField<PgShdependRecord, Long> OBJID = createField(DSL.name("objid"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_shdepend.objsubid</code>.
     */
    public final TableField<PgShdependRecord, Integer> OBJSUBID = createField(DSL.name("objsubid"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_shdepend.refclassid</code>.
     */
    public final TableField<PgShdependRecord, Long> REFCLASSID = createField(DSL.name("refclassid"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_shdepend.refobjid</code>.
     */
    public final TableField<PgShdependRecord, Long> REFOBJID = createField(DSL.name("refobjid"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_shdepend.deptype</code>.
     */
    public final TableField<PgShdependRecord, String> DEPTYPE = createField(DSL.name("deptype"), SQLDataType.CHAR.nullable(false), this, "");

    private PgShdepend(Name alias, Table<PgShdependRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PgShdepend(Name alias, Table<PgShdependRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_shdepend</code> table reference
     */
    public PgShdepend(String alias) {
        this(DSL.name(alias), PG_SHDEPEND);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_shdepend</code> table reference
     */
    public PgShdepend(Name alias) {
        this(alias, PG_SHDEPEND);
    }

    /**
     * Create a <code>pg_catalog.pg_shdepend</code> table reference
     */
    public PgShdepend() {
        this(DSL.name("pg_shdepend"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.PG_SHDEPEND_DEPENDER_INDEX, Indexes.PG_SHDEPEND_REFERENCE_INDEX);
    }

    @Override
    public PgShdepend as(String alias) {
        return new PgShdepend(DSL.name(alias), this);
    }

    @Override
    public PgShdepend as(Name alias) {
        return new PgShdepend(alias, this);
    }

    @Override
    public PgShdepend as(Table<?> alias) {
        return new PgShdepend(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PgShdepend rename(String name) {
        return new PgShdepend(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgShdepend rename(Name name) {
        return new PgShdepend(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgShdepend rename(Table<?> name) {
        return new PgShdepend(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgShdepend where(Condition condition) {
        return new PgShdepend(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgShdepend where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgShdepend where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgShdepend where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgShdepend where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgShdepend where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgShdepend where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgShdepend where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgShdepend whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgShdepend whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
