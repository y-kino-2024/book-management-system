/*
 * This file is generated by jOOQ.
 */
package quoassignment.jooq.pg_catalog.tables;


import java.time.OffsetDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import quoassignment.jooq.pg_catalog.PgCatalog;
import quoassignment.jooq.pg_catalog.tables.records.PgStatIoRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgStatIo extends TableImpl<PgStatIoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pg_catalog.pg_stat_io</code>
     */
    public static final PgStatIo PG_STAT_IO = new PgStatIo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgStatIoRecord> getRecordType() {
        return PgStatIoRecord.class;
    }

    /**
     * The column <code>pg_catalog.pg_stat_io.backend_type</code>.
     */
    public final TableField<PgStatIoRecord, String> BACKEND_TYPE = createField(DSL.name("backend_type"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_io.object</code>.
     */
    public final TableField<PgStatIoRecord, String> OBJECT = createField(DSL.name("object"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_io.context</code>.
     */
    public final TableField<PgStatIoRecord, String> CONTEXT = createField(DSL.name("context"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_io.reads</code>.
     */
    public final TableField<PgStatIoRecord, Long> READS = createField(DSL.name("reads"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_io.read_time</code>.
     */
    public final TableField<PgStatIoRecord, Double> READ_TIME = createField(DSL.name("read_time"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_io.writes</code>.
     */
    public final TableField<PgStatIoRecord, Long> WRITES = createField(DSL.name("writes"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_io.write_time</code>.
     */
    public final TableField<PgStatIoRecord, Double> WRITE_TIME = createField(DSL.name("write_time"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_io.writebacks</code>.
     */
    public final TableField<PgStatIoRecord, Long> WRITEBACKS = createField(DSL.name("writebacks"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_io.writeback_time</code>.
     */
    public final TableField<PgStatIoRecord, Double> WRITEBACK_TIME = createField(DSL.name("writeback_time"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_io.extends</code>.
     */
    public final TableField<PgStatIoRecord, Long> EXTENDS = createField(DSL.name("extends"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_io.extend_time</code>.
     */
    public final TableField<PgStatIoRecord, Double> EXTEND_TIME = createField(DSL.name("extend_time"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_io.op_bytes</code>.
     */
    public final TableField<PgStatIoRecord, Long> OP_BYTES = createField(DSL.name("op_bytes"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_io.hits</code>.
     */
    public final TableField<PgStatIoRecord, Long> HITS = createField(DSL.name("hits"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_io.evictions</code>.
     */
    public final TableField<PgStatIoRecord, Long> EVICTIONS = createField(DSL.name("evictions"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_io.reuses</code>.
     */
    public final TableField<PgStatIoRecord, Long> REUSES = createField(DSL.name("reuses"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_io.fsyncs</code>.
     */
    public final TableField<PgStatIoRecord, Long> FSYNCS = createField(DSL.name("fsyncs"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_io.fsync_time</code>.
     */
    public final TableField<PgStatIoRecord, Double> FSYNC_TIME = createField(DSL.name("fsync_time"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_io.stats_reset</code>.
     */
    public final TableField<PgStatIoRecord, OffsetDateTime> STATS_RESET = createField(DSL.name("stats_reset"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    private PgStatIo(Name alias, Table<PgStatIoRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PgStatIo(Name alias, Table<PgStatIoRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "pg_stat_io" as  SELECT backend_type,
         object,
         context,
         reads,
         read_time,
         writes,
         write_time,
         writebacks,
         writeback_time,
         extends,
         extend_time,
         op_bytes,
         hits,
         evictions,
         reuses,
         fsyncs,
         fsync_time,
         stats_reset
        FROM pg_stat_get_io() b(backend_type, object, context, reads, read_time, writes, write_time, writebacks, writeback_time, extends, extend_time, op_bytes, hits, evictions, reuses, fsyncs, fsync_time, stats_reset);
        """), where);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_stat_io</code> table reference
     */
    public PgStatIo(String alias) {
        this(DSL.name(alias), PG_STAT_IO);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_stat_io</code> table reference
     */
    public PgStatIo(Name alias) {
        this(alias, PG_STAT_IO);
    }

    /**
     * Create a <code>pg_catalog.pg_stat_io</code> table reference
     */
    public PgStatIo() {
        this(DSL.name("pg_stat_io"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public PgStatIo as(String alias) {
        return new PgStatIo(DSL.name(alias), this);
    }

    @Override
    public PgStatIo as(Name alias) {
        return new PgStatIo(alias, this);
    }

    @Override
    public PgStatIo as(Table<?> alias) {
        return new PgStatIo(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PgStatIo rename(String name) {
        return new PgStatIo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgStatIo rename(Name name) {
        return new PgStatIo(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgStatIo rename(Table<?> name) {
        return new PgStatIo(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgStatIo where(Condition condition) {
        return new PgStatIo(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgStatIo where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgStatIo where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgStatIo where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgStatIo where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgStatIo where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgStatIo where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgStatIo where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgStatIo whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgStatIo whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
