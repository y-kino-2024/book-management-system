/*
 * This file is generated by jOOQ.
 */
package quoassignment.jooq.pg_catalog.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import quoassignment.jooq.pg_catalog.PgCatalog;
import quoassignment.jooq.pg_catalog.tables.records.PgStatioSysIndexesRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgStatioSysIndexes extends TableImpl<PgStatioSysIndexesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pg_catalog.pg_statio_sys_indexes</code>
     */
    public static final PgStatioSysIndexes PG_STATIO_SYS_INDEXES = new PgStatioSysIndexes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgStatioSysIndexesRecord> getRecordType() {
        return PgStatioSysIndexesRecord.class;
    }

    /**
     * The column <code>pg_catalog.pg_statio_sys_indexes.relid</code>.
     */
    public final TableField<PgStatioSysIndexesRecord, Long> RELID = createField(DSL.name("relid"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_statio_sys_indexes.indexrelid</code>.
     */
    public final TableField<PgStatioSysIndexesRecord, Long> INDEXRELID = createField(DSL.name("indexrelid"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_statio_sys_indexes.schemaname</code>.
     */
    public final TableField<PgStatioSysIndexesRecord, String> SCHEMANAME = createField(DSL.name("schemaname"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>pg_catalog.pg_statio_sys_indexes.relname</code>.
     */
    public final TableField<PgStatioSysIndexesRecord, String> RELNAME = createField(DSL.name("relname"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>pg_catalog.pg_statio_sys_indexes.indexrelname</code>.
     */
    public final TableField<PgStatioSysIndexesRecord, String> INDEXRELNAME = createField(DSL.name("indexrelname"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>pg_catalog.pg_statio_sys_indexes.idx_blks_read</code>.
     */
    public final TableField<PgStatioSysIndexesRecord, Long> IDX_BLKS_READ = createField(DSL.name("idx_blks_read"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_statio_sys_indexes.idx_blks_hit</code>.
     */
    public final TableField<PgStatioSysIndexesRecord, Long> IDX_BLKS_HIT = createField(DSL.name("idx_blks_hit"), SQLDataType.BIGINT, this, "");

    private PgStatioSysIndexes(Name alias, Table<PgStatioSysIndexesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PgStatioSysIndexes(Name alias, Table<PgStatioSysIndexesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "pg_statio_sys_indexes" as  SELECT relid,
          indexrelid,
          schemaname,
          relname,
          indexrelname,
          idx_blks_read,
          idx_blks_hit
         FROM pg_statio_all_indexes
        WHERE ((schemaname = ANY (ARRAY['pg_catalog'::name, 'information_schema'::name])) OR (schemaname ~ '^pg_toast'::text));
        """), where);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_statio_sys_indexes</code> table
     * reference
     */
    public PgStatioSysIndexes(String alias) {
        this(DSL.name(alias), PG_STATIO_SYS_INDEXES);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_statio_sys_indexes</code> table
     * reference
     */
    public PgStatioSysIndexes(Name alias) {
        this(alias, PG_STATIO_SYS_INDEXES);
    }

    /**
     * Create a <code>pg_catalog.pg_statio_sys_indexes</code> table reference
     */
    public PgStatioSysIndexes() {
        this(DSL.name("pg_statio_sys_indexes"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public PgStatioSysIndexes as(String alias) {
        return new PgStatioSysIndexes(DSL.name(alias), this);
    }

    @Override
    public PgStatioSysIndexes as(Name alias) {
        return new PgStatioSysIndexes(alias, this);
    }

    @Override
    public PgStatioSysIndexes as(Table<?> alias) {
        return new PgStatioSysIndexes(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PgStatioSysIndexes rename(String name) {
        return new PgStatioSysIndexes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgStatioSysIndexes rename(Name name) {
        return new PgStatioSysIndexes(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgStatioSysIndexes rename(Table<?> name) {
        return new PgStatioSysIndexes(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgStatioSysIndexes where(Condition condition) {
        return new PgStatioSysIndexes(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgStatioSysIndexes where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgStatioSysIndexes where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgStatioSysIndexes where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgStatioSysIndexes where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgStatioSysIndexes where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgStatioSysIndexes where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgStatioSysIndexes where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgStatioSysIndexes whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgStatioSysIndexes whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
