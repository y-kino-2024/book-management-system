/*
 * This file is generated by jOOQ.
 */
package quoassignment.jooq.pg_catalog.tables;


import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import quoassignment.jooq.pg_catalog.PgCatalog;
import quoassignment.jooq.pg_catalog.tables.records.PgShowAllSettingsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgShowAllSettings extends TableImpl<PgShowAllSettingsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pg_catalog.pg_show_all_settings</code>
     */
    public static final PgShowAllSettings PG_SHOW_ALL_SETTINGS = new PgShowAllSettings();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgShowAllSettingsRecord> getRecordType() {
        return PgShowAllSettingsRecord.class;
    }

    /**
     * The column <code>pg_catalog.pg_show_all_settings.name</code>.
     */
    public final TableField<PgShowAllSettingsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.pg_show_all_settings.setting</code>.
     */
    public final TableField<PgShowAllSettingsRecord, String> SETTING = createField(DSL.name("setting"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.pg_show_all_settings.unit</code>.
     */
    public final TableField<PgShowAllSettingsRecord, String> UNIT = createField(DSL.name("unit"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.pg_show_all_settings.category</code>.
     */
    public final TableField<PgShowAllSettingsRecord, String> CATEGORY = createField(DSL.name("category"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.pg_show_all_settings.short_desc</code>.
     */
    public final TableField<PgShowAllSettingsRecord, String> SHORT_DESC = createField(DSL.name("short_desc"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.pg_show_all_settings.extra_desc</code>.
     */
    public final TableField<PgShowAllSettingsRecord, String> EXTRA_DESC = createField(DSL.name("extra_desc"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.pg_show_all_settings.context</code>.
     */
    public final TableField<PgShowAllSettingsRecord, String> CONTEXT = createField(DSL.name("context"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.pg_show_all_settings.vartype</code>.
     */
    public final TableField<PgShowAllSettingsRecord, String> VARTYPE = createField(DSL.name("vartype"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.pg_show_all_settings.source</code>.
     */
    public final TableField<PgShowAllSettingsRecord, String> SOURCE = createField(DSL.name("source"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.pg_show_all_settings.min_val</code>.
     */
    public final TableField<PgShowAllSettingsRecord, String> MIN_VAL = createField(DSL.name("min_val"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.pg_show_all_settings.max_val</code>.
     */
    public final TableField<PgShowAllSettingsRecord, String> MAX_VAL = createField(DSL.name("max_val"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.pg_show_all_settings.enumvals</code>.
     */
    public final TableField<PgShowAllSettingsRecord, String[]> ENUMVALS = createField(DSL.name("enumvals"), SQLDataType.CLOB.array(), this, "");

    /**
     * The column <code>pg_catalog.pg_show_all_settings.boot_val</code>.
     */
    public final TableField<PgShowAllSettingsRecord, String> BOOT_VAL = createField(DSL.name("boot_val"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.pg_show_all_settings.reset_val</code>.
     */
    public final TableField<PgShowAllSettingsRecord, String> RESET_VAL = createField(DSL.name("reset_val"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.pg_show_all_settings.sourcefile</code>.
     */
    public final TableField<PgShowAllSettingsRecord, String> SOURCEFILE = createField(DSL.name("sourcefile"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.pg_show_all_settings.sourceline</code>.
     */
    public final TableField<PgShowAllSettingsRecord, Integer> SOURCELINE = createField(DSL.name("sourceline"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>pg_catalog.pg_show_all_settings.pending_restart</code>.
     */
    public final TableField<PgShowAllSettingsRecord, Boolean> PENDING_RESTART = createField(DSL.name("pending_restart"), SQLDataType.BOOLEAN, this, "");

    private PgShowAllSettings(Name alias, Table<PgShowAllSettingsRecord> aliased) {
        this(alias, aliased, new Field[] {
        });
    }

    private PgShowAllSettings(Name alias, Table<PgShowAllSettingsRecord> aliased, Field<?>[] parameters) {
        this(alias, aliased, parameters, null);
    }

    private PgShowAllSettings(Name alias, Table<PgShowAllSettingsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function(), where);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_show_all_settings</code> table
     * reference
     */
    public PgShowAllSettings(String alias) {
        this(DSL.name(alias), PG_SHOW_ALL_SETTINGS);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_show_all_settings</code> table
     * reference
     */
    public PgShowAllSettings(Name alias) {
        this(alias, PG_SHOW_ALL_SETTINGS);
    }

    /**
     * Create a <code>pg_catalog.pg_show_all_settings</code> table reference
     */
    public PgShowAllSettings() {
        this(DSL.name("pg_show_all_settings"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public PgShowAllSettings as(String alias) {
        return new PgShowAllSettings(DSL.name(alias), this, parameters);
    }

    @Override
    public PgShowAllSettings as(Name alias) {
        return new PgShowAllSettings(alias, this, parameters);
    }

    @Override
    public PgShowAllSettings as(Table<?> alias) {
        return new PgShowAllSettings(alias.getQualifiedName(), this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public PgShowAllSettings rename(String name) {
        return new PgShowAllSettings(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public PgShowAllSettings rename(Name name) {
        return new PgShowAllSettings(name, null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public PgShowAllSettings rename(Table<?> name) {
        return new PgShowAllSettings(name.getQualifiedName(), null, parameters);
    }

    /**
     * Call this table-valued function
     */
    public PgShowAllSettings call() {
        PgShowAllSettings result = new PgShowAllSettings(DSL.name("pg_show_all_settings"), null, new Field[] {});

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }
}
