/*
 * This file is generated by jOOQ.
 */
package quoassignment.jooq.pg_catalog.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import quoassignment.jooq.pg_catalog.Keys;
import quoassignment.jooq.pg_catalog.PgCatalog;
import quoassignment.jooq.pg_catalog.tables.records.PgAmopRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgAmop extends TableImpl<PgAmopRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pg_catalog.pg_amop</code>
     */
    public static final PgAmop PG_AMOP = new PgAmop();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgAmopRecord> getRecordType() {
        return PgAmopRecord.class;
    }

    /**
     * The column <code>pg_catalog.pg_amop.oid</code>.
     */
    public final TableField<PgAmopRecord, Long> OID = createField(DSL.name("oid"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_amop.amopfamily</code>.
     */
    public final TableField<PgAmopRecord, Long> AMOPFAMILY = createField(DSL.name("amopfamily"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_amop.amoplefttype</code>.
     */
    public final TableField<PgAmopRecord, Long> AMOPLEFTTYPE = createField(DSL.name("amoplefttype"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_amop.amoprighttype</code>.
     */
    public final TableField<PgAmopRecord, Long> AMOPRIGHTTYPE = createField(DSL.name("amoprighttype"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_amop.amopstrategy</code>.
     */
    public final TableField<PgAmopRecord, Short> AMOPSTRATEGY = createField(DSL.name("amopstrategy"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_amop.amoppurpose</code>.
     */
    public final TableField<PgAmopRecord, String> AMOPPURPOSE = createField(DSL.name("amoppurpose"), SQLDataType.CHAR.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_amop.amopopr</code>.
     */
    public final TableField<PgAmopRecord, Long> AMOPOPR = createField(DSL.name("amopopr"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_amop.amopmethod</code>.
     */
    public final TableField<PgAmopRecord, Long> AMOPMETHOD = createField(DSL.name("amopmethod"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_amop.amopsortfamily</code>.
     */
    public final TableField<PgAmopRecord, Long> AMOPSORTFAMILY = createField(DSL.name("amopsortfamily"), SQLDataType.BIGINT.nullable(false), this, "");

    private PgAmop(Name alias, Table<PgAmopRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PgAmop(Name alias, Table<PgAmopRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_amop</code> table reference
     */
    public PgAmop(String alias) {
        this(DSL.name(alias), PG_AMOP);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_amop</code> table reference
     */
    public PgAmop(Name alias) {
        this(alias, PG_AMOP);
    }

    /**
     * Create a <code>pg_catalog.pg_amop</code> table reference
     */
    public PgAmop() {
        this(DSL.name("pg_amop"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public UniqueKey<PgAmopRecord> getPrimaryKey() {
        return Keys.PG_AMOP_OID_INDEX;
    }

    @Override
    public List<UniqueKey<PgAmopRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.PG_AMOP_FAM_STRAT_INDEX, Keys.PG_AMOP_OPR_FAM_INDEX);
    }

    @Override
    public PgAmop as(String alias) {
        return new PgAmop(DSL.name(alias), this);
    }

    @Override
    public PgAmop as(Name alias) {
        return new PgAmop(alias, this);
    }

    @Override
    public PgAmop as(Table<?> alias) {
        return new PgAmop(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PgAmop rename(String name) {
        return new PgAmop(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgAmop rename(Name name) {
        return new PgAmop(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgAmop rename(Table<?> name) {
        return new PgAmop(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgAmop where(Condition condition) {
        return new PgAmop(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgAmop where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgAmop where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgAmop where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgAmop where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgAmop where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgAmop where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PgAmop where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgAmop whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PgAmop whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
