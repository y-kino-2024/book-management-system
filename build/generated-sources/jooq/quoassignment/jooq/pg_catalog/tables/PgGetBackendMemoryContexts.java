/*
 * This file is generated by jOOQ.
 */
package quoassignment.jooq.pg_catalog.tables;


import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import quoassignment.jooq.pg_catalog.PgCatalog;
import quoassignment.jooq.pg_catalog.tables.records.PgGetBackendMemoryContextsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgGetBackendMemoryContexts extends TableImpl<PgGetBackendMemoryContextsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>pg_catalog.pg_get_backend_memory_contexts</code>
     */
    public static final PgGetBackendMemoryContexts PG_GET_BACKEND_MEMORY_CONTEXTS = new PgGetBackendMemoryContexts();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgGetBackendMemoryContextsRecord> getRecordType() {
        return PgGetBackendMemoryContextsRecord.class;
    }

    /**
     * The column <code>pg_catalog.pg_get_backend_memory_contexts.name</code>.
     */
    public final TableField<PgGetBackendMemoryContextsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.pg_get_backend_memory_contexts.ident</code>.
     */
    public final TableField<PgGetBackendMemoryContextsRecord, String> IDENT = createField(DSL.name("ident"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.pg_get_backend_memory_contexts.parent</code>.
     */
    public final TableField<PgGetBackendMemoryContextsRecord, String> PARENT = createField(DSL.name("parent"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.pg_get_backend_memory_contexts.level</code>.
     */
    public final TableField<PgGetBackendMemoryContextsRecord, Integer> LEVEL = createField(DSL.name("level"), SQLDataType.INTEGER, this, "");

    /**
     * The column
     * <code>pg_catalog.pg_get_backend_memory_contexts.total_bytes</code>.
     */
    public final TableField<PgGetBackendMemoryContextsRecord, Long> TOTAL_BYTES = createField(DSL.name("total_bytes"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>pg_catalog.pg_get_backend_memory_contexts.total_nblocks</code>.
     */
    public final TableField<PgGetBackendMemoryContextsRecord, Long> TOTAL_NBLOCKS = createField(DSL.name("total_nblocks"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>pg_catalog.pg_get_backend_memory_contexts.free_bytes</code>.
     */
    public final TableField<PgGetBackendMemoryContextsRecord, Long> FREE_BYTES = createField(DSL.name("free_bytes"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>pg_catalog.pg_get_backend_memory_contexts.free_chunks</code>.
     */
    public final TableField<PgGetBackendMemoryContextsRecord, Long> FREE_CHUNKS = createField(DSL.name("free_chunks"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>pg_catalog.pg_get_backend_memory_contexts.used_bytes</code>.
     */
    public final TableField<PgGetBackendMemoryContextsRecord, Long> USED_BYTES = createField(DSL.name("used_bytes"), SQLDataType.BIGINT, this, "");

    private PgGetBackendMemoryContexts(Name alias, Table<PgGetBackendMemoryContextsRecord> aliased) {
        this(alias, aliased, new Field[] {
        });
    }

    private PgGetBackendMemoryContexts(Name alias, Table<PgGetBackendMemoryContextsRecord> aliased, Field<?>[] parameters) {
        this(alias, aliased, parameters, null);
    }

    private PgGetBackendMemoryContexts(Name alias, Table<PgGetBackendMemoryContextsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function(), where);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_get_backend_memory_contexts</code>
     * table reference
     */
    public PgGetBackendMemoryContexts(String alias) {
        this(DSL.name(alias), PG_GET_BACKEND_MEMORY_CONTEXTS);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_get_backend_memory_contexts</code>
     * table reference
     */
    public PgGetBackendMemoryContexts(Name alias) {
        this(alias, PG_GET_BACKEND_MEMORY_CONTEXTS);
    }

    /**
     * Create a <code>pg_catalog.pg_get_backend_memory_contexts</code> table
     * reference
     */
    public PgGetBackendMemoryContexts() {
        this(DSL.name("pg_get_backend_memory_contexts"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public PgGetBackendMemoryContexts as(String alias) {
        return new PgGetBackendMemoryContexts(DSL.name(alias), this, parameters);
    }

    @Override
    public PgGetBackendMemoryContexts as(Name alias) {
        return new PgGetBackendMemoryContexts(alias, this, parameters);
    }

    @Override
    public PgGetBackendMemoryContexts as(Table<?> alias) {
        return new PgGetBackendMemoryContexts(alias.getQualifiedName(), this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public PgGetBackendMemoryContexts rename(String name) {
        return new PgGetBackendMemoryContexts(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public PgGetBackendMemoryContexts rename(Name name) {
        return new PgGetBackendMemoryContexts(name, null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public PgGetBackendMemoryContexts rename(Table<?> name) {
        return new PgGetBackendMemoryContexts(name.getQualifiedName(), null, parameters);
    }

    /**
     * Call this table-valued function
     */
    public PgGetBackendMemoryContexts call() {
        PgGetBackendMemoryContexts result = new PgGetBackendMemoryContexts(DSL.name("pg_get_backend_memory_contexts"), null, new Field[] {});

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }
}
