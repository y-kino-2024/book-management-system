/*
 * This file is generated by jOOQ.
 */
package quoassignment.jooq.pg_catalog;


import java.time.OffsetDateTime;

import org.jooq.Configuration;
import org.jooq.Field;
import org.jooq.JSON;
import org.jooq.JSONB;
import org.jooq.Result;
import org.jooq.types.YearToSecond;

import quoassignment.jooq.pg_catalog.tables.Aclexplode;
import quoassignment.jooq.pg_catalog.tables.GenerateSeries;
import quoassignment.jooq.pg_catalog.tables.GenerateSubscripts;
import quoassignment.jooq.pg_catalog.tables.JsonArrayElements;
import quoassignment.jooq.pg_catalog.tables.JsonArrayElementsText;
import quoassignment.jooq.pg_catalog.tables.JsonEach;
import quoassignment.jooq.pg_catalog.tables.JsonEachText;
import quoassignment.jooq.pg_catalog.tables.JsonObjectKeys;
import quoassignment.jooq.pg_catalog.tables.JsonPopulateRecordset;
import quoassignment.jooq.pg_catalog.tables.JsonToRecordset;
import quoassignment.jooq.pg_catalog.tables.JsonbArrayElements;
import quoassignment.jooq.pg_catalog.tables.JsonbArrayElementsText;
import quoassignment.jooq.pg_catalog.tables.JsonbEach;
import quoassignment.jooq.pg_catalog.tables.JsonbEachText;
import quoassignment.jooq.pg_catalog.tables.JsonbObjectKeys;
import quoassignment.jooq.pg_catalog.tables.JsonbPathQuery;
import quoassignment.jooq.pg_catalog.tables.JsonbPathQueryTz;
import quoassignment.jooq.pg_catalog.tables.JsonbPopulateRecordset;
import quoassignment.jooq.pg_catalog.tables.JsonbToRecordset;
import quoassignment.jooq.pg_catalog.tables.PgAggregate;
import quoassignment.jooq.pg_catalog.tables.PgAm;
import quoassignment.jooq.pg_catalog.tables.PgAmop;
import quoassignment.jooq.pg_catalog.tables.PgAmproc;
import quoassignment.jooq.pg_catalog.tables.PgAttrdef;
import quoassignment.jooq.pg_catalog.tables.PgAttribute;
import quoassignment.jooq.pg_catalog.tables.PgAuthMembers;
import quoassignment.jooq.pg_catalog.tables.PgAuthid;
import quoassignment.jooq.pg_catalog.tables.PgAvailableExtensionVersions;
import quoassignment.jooq.pg_catalog.tables.PgAvailableExtensions;
import quoassignment.jooq.pg_catalog.tables.PgAvailableWalSummaries;
import quoassignment.jooq.pg_catalog.tables.PgBackendMemoryContexts;
import quoassignment.jooq.pg_catalog.tables.PgCast;
import quoassignment.jooq.pg_catalog.tables.PgClass;
import quoassignment.jooq.pg_catalog.tables.PgCollation;
import quoassignment.jooq.pg_catalog.tables.PgConfig;
import quoassignment.jooq.pg_catalog.tables.PgConstraint;
import quoassignment.jooq.pg_catalog.tables.PgConversion;
import quoassignment.jooq.pg_catalog.tables.PgCursor;
import quoassignment.jooq.pg_catalog.tables.PgCursors;
import quoassignment.jooq.pg_catalog.tables.PgDatabase;
import quoassignment.jooq.pg_catalog.tables.PgDbRoleSetting;
import quoassignment.jooq.pg_catalog.tables.PgDefaultAcl;
import quoassignment.jooq.pg_catalog.tables.PgDepend;
import quoassignment.jooq.pg_catalog.tables.PgDescription;
import quoassignment.jooq.pg_catalog.tables.PgEnum;
import quoassignment.jooq.pg_catalog.tables.PgEventTrigger;
import quoassignment.jooq.pg_catalog.tables.PgEventTriggerDdlCommands;
import quoassignment.jooq.pg_catalog.tables.PgEventTriggerDroppedObjects;
import quoassignment.jooq.pg_catalog.tables.PgExtension;
import quoassignment.jooq.pg_catalog.tables.PgExtensionUpdatePaths;
import quoassignment.jooq.pg_catalog.tables.PgFileSettings;
import quoassignment.jooq.pg_catalog.tables.PgForeignDataWrapper;
import quoassignment.jooq.pg_catalog.tables.PgForeignServer;
import quoassignment.jooq.pg_catalog.tables.PgForeignTable;
import quoassignment.jooq.pg_catalog.tables.PgGetBackendMemoryContexts;
import quoassignment.jooq.pg_catalog.tables.PgGetCatalogForeignKeys;
import quoassignment.jooq.pg_catalog.tables.PgGetKeywords;
import quoassignment.jooq.pg_catalog.tables.PgGetMultixactMembers;
import quoassignment.jooq.pg_catalog.tables.PgGetPublicationTables;
import quoassignment.jooq.pg_catalog.tables.PgGetReplicationSlots;
import quoassignment.jooq.pg_catalog.tables.PgGetShmemAllocations;
import quoassignment.jooq.pg_catalog.tables.PgGetWaitEvents;
import quoassignment.jooq.pg_catalog.tables.PgGetWalResourceManagers;
import quoassignment.jooq.pg_catalog.tables.PgGroup;
import quoassignment.jooq.pg_catalog.tables.PgHbaFileRules;
import quoassignment.jooq.pg_catalog.tables.PgIdentFileMappings;
import quoassignment.jooq.pg_catalog.tables.PgIndex;
import quoassignment.jooq.pg_catalog.tables.PgIndexes;
import quoassignment.jooq.pg_catalog.tables.PgInherits;
import quoassignment.jooq.pg_catalog.tables.PgInitPrivs;
import quoassignment.jooq.pg_catalog.tables.PgLanguage;
import quoassignment.jooq.pg_catalog.tables.PgLargeobject;
import quoassignment.jooq.pg_catalog.tables.PgLargeobjectMetadata;
import quoassignment.jooq.pg_catalog.tables.PgListeningChannels;
import quoassignment.jooq.pg_catalog.tables.PgLockStatus;
import quoassignment.jooq.pg_catalog.tables.PgLocks;
import quoassignment.jooq.pg_catalog.tables.PgLogicalSlotGetBinaryChanges;
import quoassignment.jooq.pg_catalog.tables.PgLogicalSlotGetChanges;
import quoassignment.jooq.pg_catalog.tables.PgLogicalSlotPeekBinaryChanges;
import quoassignment.jooq.pg_catalog.tables.PgLogicalSlotPeekChanges;
import quoassignment.jooq.pg_catalog.tables.PgLsArchiveStatusdir;
import quoassignment.jooq.pg_catalog.tables.PgLsDir;
import quoassignment.jooq.pg_catalog.tables.PgLsLogdir;
import quoassignment.jooq.pg_catalog.tables.PgLsLogicalmapdir;
import quoassignment.jooq.pg_catalog.tables.PgLsLogicalsnapdir;
import quoassignment.jooq.pg_catalog.tables.PgLsReplslotdir;
import quoassignment.jooq.pg_catalog.tables.PgLsTmpdir;
import quoassignment.jooq.pg_catalog.tables.PgLsWaldir;
import quoassignment.jooq.pg_catalog.tables.PgMatviews;
import quoassignment.jooq.pg_catalog.tables.PgMcvListItems;
import quoassignment.jooq.pg_catalog.tables.PgNamespace;
import quoassignment.jooq.pg_catalog.tables.PgOpclass;
import quoassignment.jooq.pg_catalog.tables.PgOperator;
import quoassignment.jooq.pg_catalog.tables.PgOpfamily;
import quoassignment.jooq.pg_catalog.tables.PgOptionsToTable;
import quoassignment.jooq.pg_catalog.tables.PgParameterAcl;
import quoassignment.jooq.pg_catalog.tables.PgPartitionAncestors;
import quoassignment.jooq.pg_catalog.tables.PgPartitionTree;
import quoassignment.jooq.pg_catalog.tables.PgPartitionedTable;
import quoassignment.jooq.pg_catalog.tables.PgPolicies;
import quoassignment.jooq.pg_catalog.tables.PgPolicy;
import quoassignment.jooq.pg_catalog.tables.PgPreparedStatement;
import quoassignment.jooq.pg_catalog.tables.PgPreparedStatements;
import quoassignment.jooq.pg_catalog.tables.PgPreparedXact;
import quoassignment.jooq.pg_catalog.tables.PgPreparedXacts;
import quoassignment.jooq.pg_catalog.tables.PgProc;
import quoassignment.jooq.pg_catalog.tables.PgPublication;
import quoassignment.jooq.pg_catalog.tables.PgPublicationNamespace;
import quoassignment.jooq.pg_catalog.tables.PgPublicationRel;
import quoassignment.jooq.pg_catalog.tables.PgPublicationTables;
import quoassignment.jooq.pg_catalog.tables.PgRange;
import quoassignment.jooq.pg_catalog.tables.PgReplicationOrigin;
import quoassignment.jooq.pg_catalog.tables.PgReplicationOriginStatus;
import quoassignment.jooq.pg_catalog.tables.PgReplicationSlots;
import quoassignment.jooq.pg_catalog.tables.PgRewrite;
import quoassignment.jooq.pg_catalog.tables.PgRoles;
import quoassignment.jooq.pg_catalog.tables.PgRules;
import quoassignment.jooq.pg_catalog.tables.PgSeclabel;
import quoassignment.jooq.pg_catalog.tables.PgSeclabels;
import quoassignment.jooq.pg_catalog.tables.PgSequence;
import quoassignment.jooq.pg_catalog.tables.PgSequences;
import quoassignment.jooq.pg_catalog.tables.PgSettings;
import quoassignment.jooq.pg_catalog.tables.PgShadow;
import quoassignment.jooq.pg_catalog.tables.PgShdepend;
import quoassignment.jooq.pg_catalog.tables.PgShdescription;
import quoassignment.jooq.pg_catalog.tables.PgShmemAllocations;
import quoassignment.jooq.pg_catalog.tables.PgShowAllFileSettings;
import quoassignment.jooq.pg_catalog.tables.PgShowAllSettings;
import quoassignment.jooq.pg_catalog.tables.PgShowReplicationOriginStatus;
import quoassignment.jooq.pg_catalog.tables.PgShseclabel;
import quoassignment.jooq.pg_catalog.tables.PgSnapshotXip;
import quoassignment.jooq.pg_catalog.tables.PgStatActivity;
import quoassignment.jooq.pg_catalog.tables.PgStatAllIndexes;
import quoassignment.jooq.pg_catalog.tables.PgStatAllTables;
import quoassignment.jooq.pg_catalog.tables.PgStatArchiver;
import quoassignment.jooq.pg_catalog.tables.PgStatBgwriter;
import quoassignment.jooq.pg_catalog.tables.PgStatCheckpointer;
import quoassignment.jooq.pg_catalog.tables.PgStatDatabase;
import quoassignment.jooq.pg_catalog.tables.PgStatDatabaseConflicts;
import quoassignment.jooq.pg_catalog.tables.PgStatGetActivity;
import quoassignment.jooq.pg_catalog.tables.PgStatGetBackendIdset;
import quoassignment.jooq.pg_catalog.tables.PgStatGetIo;
import quoassignment.jooq.pg_catalog.tables.PgStatGetProgressInfo;
import quoassignment.jooq.pg_catalog.tables.PgStatGetRecoveryPrefetch;
import quoassignment.jooq.pg_catalog.tables.PgStatGetSlru;
import quoassignment.jooq.pg_catalog.tables.PgStatGetSubscription;
import quoassignment.jooq.pg_catalog.tables.PgStatGetWalSenders;
import quoassignment.jooq.pg_catalog.tables.PgStatGssapi;
import quoassignment.jooq.pg_catalog.tables.PgStatIo;
import quoassignment.jooq.pg_catalog.tables.PgStatProgressAnalyze;
import quoassignment.jooq.pg_catalog.tables.PgStatProgressBasebackup;
import quoassignment.jooq.pg_catalog.tables.PgStatProgressCluster;
import quoassignment.jooq.pg_catalog.tables.PgStatProgressCopy;
import quoassignment.jooq.pg_catalog.tables.PgStatProgressCreateIndex;
import quoassignment.jooq.pg_catalog.tables.PgStatProgressVacuum;
import quoassignment.jooq.pg_catalog.tables.PgStatRecoveryPrefetch;
import quoassignment.jooq.pg_catalog.tables.PgStatReplication;
import quoassignment.jooq.pg_catalog.tables.PgStatReplicationSlots;
import quoassignment.jooq.pg_catalog.tables.PgStatSlru;
import quoassignment.jooq.pg_catalog.tables.PgStatSsl;
import quoassignment.jooq.pg_catalog.tables.PgStatSubscription;
import quoassignment.jooq.pg_catalog.tables.PgStatSubscriptionStats;
import quoassignment.jooq.pg_catalog.tables.PgStatSysIndexes;
import quoassignment.jooq.pg_catalog.tables.PgStatSysTables;
import quoassignment.jooq.pg_catalog.tables.PgStatUserFunctions;
import quoassignment.jooq.pg_catalog.tables.PgStatUserIndexes;
import quoassignment.jooq.pg_catalog.tables.PgStatUserTables;
import quoassignment.jooq.pg_catalog.tables.PgStatWal;
import quoassignment.jooq.pg_catalog.tables.PgStatWalReceiver;
import quoassignment.jooq.pg_catalog.tables.PgStatXactAllTables;
import quoassignment.jooq.pg_catalog.tables.PgStatXactSysTables;
import quoassignment.jooq.pg_catalog.tables.PgStatXactUserFunctions;
import quoassignment.jooq.pg_catalog.tables.PgStatXactUserTables;
import quoassignment.jooq.pg_catalog.tables.PgStatioAllIndexes;
import quoassignment.jooq.pg_catalog.tables.PgStatioAllSequences;
import quoassignment.jooq.pg_catalog.tables.PgStatioAllTables;
import quoassignment.jooq.pg_catalog.tables.PgStatioSysIndexes;
import quoassignment.jooq.pg_catalog.tables.PgStatioSysSequences;
import quoassignment.jooq.pg_catalog.tables.PgStatioSysTables;
import quoassignment.jooq.pg_catalog.tables.PgStatioUserIndexes;
import quoassignment.jooq.pg_catalog.tables.PgStatioUserSequences;
import quoassignment.jooq.pg_catalog.tables.PgStatioUserTables;
import quoassignment.jooq.pg_catalog.tables.PgStatistic;
import quoassignment.jooq.pg_catalog.tables.PgStatisticExt;
import quoassignment.jooq.pg_catalog.tables.PgStatisticExtData;
import quoassignment.jooq.pg_catalog.tables.PgStats;
import quoassignment.jooq.pg_catalog.tables.PgStatsExt;
import quoassignment.jooq.pg_catalog.tables.PgStatsExtExprs;
import quoassignment.jooq.pg_catalog.tables.PgSubscription;
import quoassignment.jooq.pg_catalog.tables.PgSubscriptionRel;
import quoassignment.jooq.pg_catalog.tables.PgTables;
import quoassignment.jooq.pg_catalog.tables.PgTablespace;
import quoassignment.jooq.pg_catalog.tables.PgTablespaceDatabases;
import quoassignment.jooq.pg_catalog.tables.PgTimezoneAbbrevs;
import quoassignment.jooq.pg_catalog.tables.PgTimezoneNames;
import quoassignment.jooq.pg_catalog.tables.PgTransform;
import quoassignment.jooq.pg_catalog.tables.PgTrigger;
import quoassignment.jooq.pg_catalog.tables.PgTsConfig;
import quoassignment.jooq.pg_catalog.tables.PgTsConfigMap;
import quoassignment.jooq.pg_catalog.tables.PgTsDict;
import quoassignment.jooq.pg_catalog.tables.PgTsParser;
import quoassignment.jooq.pg_catalog.tables.PgTsTemplate;
import quoassignment.jooq.pg_catalog.tables.PgType;
import quoassignment.jooq.pg_catalog.tables.PgUser;
import quoassignment.jooq.pg_catalog.tables.PgUserMapping;
import quoassignment.jooq.pg_catalog.tables.PgUserMappings;
import quoassignment.jooq.pg_catalog.tables.PgViews;
import quoassignment.jooq.pg_catalog.tables.PgWaitEvents;
import quoassignment.jooq.pg_catalog.tables.PgWalSummaryContents;
import quoassignment.jooq.pg_catalog.tables.RegexpMatches;
import quoassignment.jooq.pg_catalog.tables.RegexpSplitToTable;
import quoassignment.jooq.pg_catalog.tables.StringToTable;
import quoassignment.jooq.pg_catalog.tables.TsDebug;
import quoassignment.jooq.pg_catalog.tables.TsParse;
import quoassignment.jooq.pg_catalog.tables.TsStat;
import quoassignment.jooq.pg_catalog.tables.TsTokenType;
import quoassignment.jooq.pg_catalog.tables.TxidSnapshotXip;
import quoassignment.jooq.pg_catalog.tables.Unnest;
import quoassignment.jooq.pg_catalog.tables.records.AclexplodeRecord;
import quoassignment.jooq.pg_catalog.tables.records.GenerateSeriesRecord;
import quoassignment.jooq.pg_catalog.tables.records.GenerateSubscriptsRecord;
import quoassignment.jooq.pg_catalog.tables.records.JsonArrayElementsRecord;
import quoassignment.jooq.pg_catalog.tables.records.JsonArrayElementsTextRecord;
import quoassignment.jooq.pg_catalog.tables.records.JsonEachRecord;
import quoassignment.jooq.pg_catalog.tables.records.JsonEachTextRecord;
import quoassignment.jooq.pg_catalog.tables.records.JsonObjectKeysRecord;
import quoassignment.jooq.pg_catalog.tables.records.JsonPopulateRecordsetRecord;
import quoassignment.jooq.pg_catalog.tables.records.JsonToRecordsetRecord;
import quoassignment.jooq.pg_catalog.tables.records.JsonbArrayElementsRecord;
import quoassignment.jooq.pg_catalog.tables.records.JsonbArrayElementsTextRecord;
import quoassignment.jooq.pg_catalog.tables.records.JsonbEachRecord;
import quoassignment.jooq.pg_catalog.tables.records.JsonbEachTextRecord;
import quoassignment.jooq.pg_catalog.tables.records.JsonbObjectKeysRecord;
import quoassignment.jooq.pg_catalog.tables.records.JsonbPathQueryRecord;
import quoassignment.jooq.pg_catalog.tables.records.JsonbPathQueryTzRecord;
import quoassignment.jooq.pg_catalog.tables.records.JsonbPopulateRecordsetRecord;
import quoassignment.jooq.pg_catalog.tables.records.JsonbToRecordsetRecord;
import quoassignment.jooq.pg_catalog.tables.records.PgAvailableWalSummariesRecord;
import quoassignment.jooq.pg_catalog.tables.records.PgConfigRecord;
import quoassignment.jooq.pg_catalog.tables.records.PgCursorRecord;
import quoassignment.jooq.pg_catalog.tables.records.PgEventTriggerDdlCommandsRecord;
import quoassignment.jooq.pg_catalog.tables.records.PgEventTriggerDroppedObjectsRecord;
import quoassignment.jooq.pg_catalog.tables.records.PgExtensionUpdatePathsRecord;
import quoassignment.jooq.pg_catalog.tables.records.PgGetBackendMemoryContextsRecord;
import quoassignment.jooq.pg_catalog.tables.records.PgGetCatalogForeignKeysRecord;
import quoassignment.jooq.pg_catalog.tables.records.PgGetKeywordsRecord;
import quoassignment.jooq.pg_catalog.tables.records.PgGetMultixactMembersRecord;
import quoassignment.jooq.pg_catalog.tables.records.PgGetPublicationTablesRecord;
import quoassignment.jooq.pg_catalog.tables.records.PgGetReplicationSlotsRecord;
import quoassignment.jooq.pg_catalog.tables.records.PgGetShmemAllocationsRecord;
import quoassignment.jooq.pg_catalog.tables.records.PgGetWaitEventsRecord;
import quoassignment.jooq.pg_catalog.tables.records.PgGetWalResourceManagersRecord;
import quoassignment.jooq.pg_catalog.tables.records.PgHbaFileRulesRecord;
import quoassignment.jooq.pg_catalog.tables.records.PgListeningChannelsRecord;
import quoassignment.jooq.pg_catalog.tables.records.PgLockStatusRecord;
import quoassignment.jooq.pg_catalog.tables.records.PgLogicalSlotGetBinaryChangesRecord;
import quoassignment.jooq.pg_catalog.tables.records.PgLogicalSlotGetChangesRecord;
import quoassignment.jooq.pg_catalog.tables.records.PgLogicalSlotPeekBinaryChangesRecord;
import quoassignment.jooq.pg_catalog.tables.records.PgLogicalSlotPeekChangesRecord;
import quoassignment.jooq.pg_catalog.tables.records.PgLsArchiveStatusdirRecord;
import quoassignment.jooq.pg_catalog.tables.records.PgLsDirRecord;
import quoassignment.jooq.pg_catalog.tables.records.PgLsLogdirRecord;
import quoassignment.jooq.pg_catalog.tables.records.PgLsLogicalmapdirRecord;
import quoassignment.jooq.pg_catalog.tables.records.PgLsLogicalsnapdirRecord;
import quoassignment.jooq.pg_catalog.tables.records.PgLsReplslotdirRecord;
import quoassignment.jooq.pg_catalog.tables.records.PgLsTmpdirRecord;
import quoassignment.jooq.pg_catalog.tables.records.PgLsWaldirRecord;
import quoassignment.jooq.pg_catalog.tables.records.PgMcvListItemsRecord;
import quoassignment.jooq.pg_catalog.tables.records.PgOptionsToTableRecord;
import quoassignment.jooq.pg_catalog.tables.records.PgPartitionAncestorsRecord;
import quoassignment.jooq.pg_catalog.tables.records.PgPartitionTreeRecord;
import quoassignment.jooq.pg_catalog.tables.records.PgPreparedStatementRecord;
import quoassignment.jooq.pg_catalog.tables.records.PgPreparedXactRecord;
import quoassignment.jooq.pg_catalog.tables.records.PgShowAllFileSettingsRecord;
import quoassignment.jooq.pg_catalog.tables.records.PgShowAllSettingsRecord;
import quoassignment.jooq.pg_catalog.tables.records.PgShowReplicationOriginStatusRecord;
import quoassignment.jooq.pg_catalog.tables.records.PgSnapshotXipRecord;
import quoassignment.jooq.pg_catalog.tables.records.PgStatGetActivityRecord;
import quoassignment.jooq.pg_catalog.tables.records.PgStatGetBackendIdsetRecord;
import quoassignment.jooq.pg_catalog.tables.records.PgStatGetIoRecord;
import quoassignment.jooq.pg_catalog.tables.records.PgStatGetProgressInfoRecord;
import quoassignment.jooq.pg_catalog.tables.records.PgStatGetRecoveryPrefetchRecord;
import quoassignment.jooq.pg_catalog.tables.records.PgStatGetSlruRecord;
import quoassignment.jooq.pg_catalog.tables.records.PgStatGetSubscriptionRecord;
import quoassignment.jooq.pg_catalog.tables.records.PgStatGetWalSendersRecord;
import quoassignment.jooq.pg_catalog.tables.records.PgTablespaceDatabasesRecord;
import quoassignment.jooq.pg_catalog.tables.records.PgTimezoneAbbrevsRecord;
import quoassignment.jooq.pg_catalog.tables.records.PgTimezoneNamesRecord;
import quoassignment.jooq.pg_catalog.tables.records.PgWalSummaryContentsRecord;
import quoassignment.jooq.pg_catalog.tables.records.RegexpMatchesRecord;
import quoassignment.jooq.pg_catalog.tables.records.RegexpSplitToTableRecord;
import quoassignment.jooq.pg_catalog.tables.records.StringToTableRecord;
import quoassignment.jooq.pg_catalog.tables.records.TsDebugRecord;
import quoassignment.jooq.pg_catalog.tables.records.TsParseRecord;
import quoassignment.jooq.pg_catalog.tables.records.TsStatRecord;
import quoassignment.jooq.pg_catalog.tables.records.TsTokenTypeRecord;
import quoassignment.jooq.pg_catalog.tables.records.TxidSnapshotXipRecord;
import quoassignment.jooq.pg_catalog.tables.records.UnnestRecord;


/**
 * Convenience access to all tables in pg_catalog.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Tables {

    /**
     * The table <code>pg_catalog.aclexplode</code>.
     */
    public static final Aclexplode ACLEXPLODE = Aclexplode.ACLEXPLODE;

    /**
     * Call <code>pg_catalog.aclexplode</code>.
     */
    public static Result<AclexplodeRecord> ACLEXPLODE(
          Configuration configuration
        , String[] acl
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.Aclexplode.ACLEXPLODE.call(
              acl
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.aclexplode</code> as a table.
     */
    public static Aclexplode ACLEXPLODE(
          String[] acl
    ) {
        return quoassignment.jooq.pg_catalog.tables.Aclexplode.ACLEXPLODE.call(
            acl
        );
    }

    /**
     * Get <code>pg_catalog.aclexplode</code> as a table.
     */
    public static Aclexplode ACLEXPLODE(
          Field<String[]> acl
    ) {
        return quoassignment.jooq.pg_catalog.tables.Aclexplode.ACLEXPLODE.call(
            acl
        );
    }

    /**
     * The table <code>pg_catalog.generate_series</code>.
     */
    public static final GenerateSeries GENERATE_SERIES = GenerateSeries.GENERATE_SERIES;

    /**
     * Call <code>pg_catalog.generate_series</code>.
     */
    public static Result<GenerateSeriesRecord> GENERATE_SERIES(
          Configuration configuration
        , OffsetDateTime __1
        , OffsetDateTime __2
        , YearToSecond __3
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.GenerateSeries.GENERATE_SERIES.call(
              __1
            , __2
            , __3
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.generate_series</code> as a table.
     */
    public static GenerateSeries GENERATE_SERIES(
          OffsetDateTime __1
        , OffsetDateTime __2
        , YearToSecond __3
    ) {
        return quoassignment.jooq.pg_catalog.tables.GenerateSeries.GENERATE_SERIES.call(
            __1,
            __2,
            __3
        );
    }

    /**
     * Get <code>pg_catalog.generate_series</code> as a table.
     */
    public static GenerateSeries GENERATE_SERIES(
          Field<OffsetDateTime> __1
        , Field<OffsetDateTime> __2
        , Field<YearToSecond> __3
    ) {
        return quoassignment.jooq.pg_catalog.tables.GenerateSeries.GENERATE_SERIES.call(
            __1,
            __2,
            __3
        );
    }

    /**
     * The table <code>pg_catalog.generate_subscripts</code>.
     */
    public static final GenerateSubscripts GENERATE_SUBSCRIPTS = GenerateSubscripts.GENERATE_SUBSCRIPTS;

    /**
     * Call <code>pg_catalog.generate_subscripts</code>.
     */
    public static Result<GenerateSubscriptsRecord> GENERATE_SUBSCRIPTS(
          Configuration configuration
        , Object[] __1
        , Integer __2
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.GenerateSubscripts.GENERATE_SUBSCRIPTS.call(
              __1
            , __2
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.generate_subscripts</code> as a table.
     */
    public static GenerateSubscripts GENERATE_SUBSCRIPTS(
          Object[] __1
        , Integer __2
    ) {
        return quoassignment.jooq.pg_catalog.tables.GenerateSubscripts.GENERATE_SUBSCRIPTS.call(
            __1,
            __2
        );
    }

    /**
     * Get <code>pg_catalog.generate_subscripts</code> as a table.
     */
    public static GenerateSubscripts GENERATE_SUBSCRIPTS(
          Field<Object[]> __1
        , Field<Integer> __2
    ) {
        return quoassignment.jooq.pg_catalog.tables.GenerateSubscripts.GENERATE_SUBSCRIPTS.call(
            __1,
            __2
        );
    }

    /**
     * The table <code>pg_catalog.json_array_elements</code>.
     */
    public static final JsonArrayElements JSON_ARRAY_ELEMENTS = JsonArrayElements.JSON_ARRAY_ELEMENTS;

    /**
     * Call <code>pg_catalog.json_array_elements</code>.
     */
    public static Result<JsonArrayElementsRecord> JSON_ARRAY_ELEMENTS(
          Configuration configuration
        , JSON fromJson
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.JsonArrayElements.JSON_ARRAY_ELEMENTS.call(
              fromJson
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.json_array_elements</code> as a table.
     */
    public static JsonArrayElements JSON_ARRAY_ELEMENTS(
          JSON fromJson
    ) {
        return quoassignment.jooq.pg_catalog.tables.JsonArrayElements.JSON_ARRAY_ELEMENTS.call(
            fromJson
        );
    }

    /**
     * Get <code>pg_catalog.json_array_elements</code> as a table.
     */
    public static JsonArrayElements JSON_ARRAY_ELEMENTS(
          Field<JSON> fromJson
    ) {
        return quoassignment.jooq.pg_catalog.tables.JsonArrayElements.JSON_ARRAY_ELEMENTS.call(
            fromJson
        );
    }

    /**
     * The table <code>pg_catalog.json_array_elements_text</code>.
     */
    public static final JsonArrayElementsText JSON_ARRAY_ELEMENTS_TEXT = JsonArrayElementsText.JSON_ARRAY_ELEMENTS_TEXT;

    /**
     * Call <code>pg_catalog.json_array_elements_text</code>.
     */
    public static Result<JsonArrayElementsTextRecord> JSON_ARRAY_ELEMENTS_TEXT(
          Configuration configuration
        , JSON fromJson
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.JsonArrayElementsText.JSON_ARRAY_ELEMENTS_TEXT.call(
              fromJson
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.json_array_elements_text</code> as a table.
     */
    public static JsonArrayElementsText JSON_ARRAY_ELEMENTS_TEXT(
          JSON fromJson
    ) {
        return quoassignment.jooq.pg_catalog.tables.JsonArrayElementsText.JSON_ARRAY_ELEMENTS_TEXT.call(
            fromJson
        );
    }

    /**
     * Get <code>pg_catalog.json_array_elements_text</code> as a table.
     */
    public static JsonArrayElementsText JSON_ARRAY_ELEMENTS_TEXT(
          Field<JSON> fromJson
    ) {
        return quoassignment.jooq.pg_catalog.tables.JsonArrayElementsText.JSON_ARRAY_ELEMENTS_TEXT.call(
            fromJson
        );
    }

    /**
     * The table <code>pg_catalog.json_each</code>.
     */
    public static final JsonEach JSON_EACH = JsonEach.JSON_EACH;

    /**
     * Call <code>pg_catalog.json_each</code>.
     */
    public static Result<JsonEachRecord> JSON_EACH(
          Configuration configuration
        , JSON fromJson
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.JsonEach.JSON_EACH.call(
              fromJson
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.json_each</code> as a table.
     */
    public static JsonEach JSON_EACH(
          JSON fromJson
    ) {
        return quoassignment.jooq.pg_catalog.tables.JsonEach.JSON_EACH.call(
            fromJson
        );
    }

    /**
     * Get <code>pg_catalog.json_each</code> as a table.
     */
    public static JsonEach JSON_EACH(
          Field<JSON> fromJson
    ) {
        return quoassignment.jooq.pg_catalog.tables.JsonEach.JSON_EACH.call(
            fromJson
        );
    }

    /**
     * The table <code>pg_catalog.json_each_text</code>.
     */
    public static final JsonEachText JSON_EACH_TEXT = JsonEachText.JSON_EACH_TEXT;

    /**
     * Call <code>pg_catalog.json_each_text</code>.
     */
    public static Result<JsonEachTextRecord> JSON_EACH_TEXT(
          Configuration configuration
        , JSON fromJson
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.JsonEachText.JSON_EACH_TEXT.call(
              fromJson
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.json_each_text</code> as a table.
     */
    public static JsonEachText JSON_EACH_TEXT(
          JSON fromJson
    ) {
        return quoassignment.jooq.pg_catalog.tables.JsonEachText.JSON_EACH_TEXT.call(
            fromJson
        );
    }

    /**
     * Get <code>pg_catalog.json_each_text</code> as a table.
     */
    public static JsonEachText JSON_EACH_TEXT(
          Field<JSON> fromJson
    ) {
        return quoassignment.jooq.pg_catalog.tables.JsonEachText.JSON_EACH_TEXT.call(
            fromJson
        );
    }

    /**
     * The table <code>pg_catalog.json_object_keys</code>.
     */
    public static final JsonObjectKeys JSON_OBJECT_KEYS = JsonObjectKeys.JSON_OBJECT_KEYS;

    /**
     * Call <code>pg_catalog.json_object_keys</code>.
     */
    public static Result<JsonObjectKeysRecord> JSON_OBJECT_KEYS(
          Configuration configuration
        , JSON __1
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.JsonObjectKeys.JSON_OBJECT_KEYS.call(
              __1
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.json_object_keys</code> as a table.
     */
    public static JsonObjectKeys JSON_OBJECT_KEYS(
          JSON __1
    ) {
        return quoassignment.jooq.pg_catalog.tables.JsonObjectKeys.JSON_OBJECT_KEYS.call(
            __1
        );
    }

    /**
     * Get <code>pg_catalog.json_object_keys</code> as a table.
     */
    public static JsonObjectKeys JSON_OBJECT_KEYS(
          Field<JSON> __1
    ) {
        return quoassignment.jooq.pg_catalog.tables.JsonObjectKeys.JSON_OBJECT_KEYS.call(
            __1
        );
    }

    /**
     * The table <code>pg_catalog.json_populate_recordset</code>.
     */
    public static final JsonPopulateRecordset JSON_POPULATE_RECORDSET = JsonPopulateRecordset.JSON_POPULATE_RECORDSET;

    /**
     * @deprecated Unknown data type. Parameter type or return type is unknown.
     * If this is a qualified, user-defined type, it may have been excluded from
     * code generation. If this is a built-in type, you can define an explicit
     * {@link org.jooq.Binding} to specify how this type should be handled.
     * Deprecation can be turned off using {@literal
     * <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public static Result<JsonPopulateRecordsetRecord> JSON_POPULATE_RECORDSET(
          Configuration configuration
        , Object base
        , JSON fromJson
        , Boolean useJsonAsText
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.JsonPopulateRecordset.JSON_POPULATE_RECORDSET.call(
              base
            , fromJson
            , useJsonAsText
        )).fetch();
    }

    /**
     * @deprecated Unknown data type. Parameter type or return type is unknown.
     * If this is a qualified, user-defined type, it may have been excluded from
     * code generation. If this is a built-in type, you can define an explicit
     * {@link org.jooq.Binding} to specify how this type should be handled.
     * Deprecation can be turned off using {@literal
     * <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public static JsonPopulateRecordset JSON_POPULATE_RECORDSET(
          Object base
        , JSON fromJson
        , Boolean useJsonAsText
    ) {
        return quoassignment.jooq.pg_catalog.tables.JsonPopulateRecordset.JSON_POPULATE_RECORDSET.call(
            base,
            fromJson,
            useJsonAsText
        );
    }

    /**
     * @deprecated Unknown data type. Parameter type or return type is unknown.
     * If this is a qualified, user-defined type, it may have been excluded from
     * code generation. If this is a built-in type, you can define an explicit
     * {@link org.jooq.Binding} to specify how this type should be handled.
     * Deprecation can be turned off using {@literal
     * <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public static JsonPopulateRecordset JSON_POPULATE_RECORDSET(
          Field<Object> base
        , Field<JSON> fromJson
        , Field<Boolean> useJsonAsText
    ) {
        return quoassignment.jooq.pg_catalog.tables.JsonPopulateRecordset.JSON_POPULATE_RECORDSET.call(
            base,
            fromJson,
            useJsonAsText
        );
    }

    /**
     * The table <code>pg_catalog.json_to_recordset</code>.
     */
    public static final JsonToRecordset JSON_TO_RECORDSET = JsonToRecordset.JSON_TO_RECORDSET;

    /**
     * Call <code>pg_catalog.json_to_recordset</code>.
     */
    public static Result<JsonToRecordsetRecord> JSON_TO_RECORDSET(
          Configuration configuration
        , JSON __1
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.JsonToRecordset.JSON_TO_RECORDSET.call(
              __1
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.json_to_recordset</code> as a table.
     */
    public static JsonToRecordset JSON_TO_RECORDSET(
          JSON __1
    ) {
        return quoassignment.jooq.pg_catalog.tables.JsonToRecordset.JSON_TO_RECORDSET.call(
            __1
        );
    }

    /**
     * Get <code>pg_catalog.json_to_recordset</code> as a table.
     */
    public static JsonToRecordset JSON_TO_RECORDSET(
          Field<JSON> __1
    ) {
        return quoassignment.jooq.pg_catalog.tables.JsonToRecordset.JSON_TO_RECORDSET.call(
            __1
        );
    }

    /**
     * The table <code>pg_catalog.jsonb_array_elements</code>.
     */
    public static final JsonbArrayElements JSONB_ARRAY_ELEMENTS = JsonbArrayElements.JSONB_ARRAY_ELEMENTS;

    /**
     * Call <code>pg_catalog.jsonb_array_elements</code>.
     */
    public static Result<JsonbArrayElementsRecord> JSONB_ARRAY_ELEMENTS(
          Configuration configuration
        , JSONB fromJson
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.JsonbArrayElements.JSONB_ARRAY_ELEMENTS.call(
              fromJson
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.jsonb_array_elements</code> as a table.
     */
    public static JsonbArrayElements JSONB_ARRAY_ELEMENTS(
          JSONB fromJson
    ) {
        return quoassignment.jooq.pg_catalog.tables.JsonbArrayElements.JSONB_ARRAY_ELEMENTS.call(
            fromJson
        );
    }

    /**
     * Get <code>pg_catalog.jsonb_array_elements</code> as a table.
     */
    public static JsonbArrayElements JSONB_ARRAY_ELEMENTS(
          Field<JSONB> fromJson
    ) {
        return quoassignment.jooq.pg_catalog.tables.JsonbArrayElements.JSONB_ARRAY_ELEMENTS.call(
            fromJson
        );
    }

    /**
     * The table <code>pg_catalog.jsonb_array_elements_text</code>.
     */
    public static final JsonbArrayElementsText JSONB_ARRAY_ELEMENTS_TEXT = JsonbArrayElementsText.JSONB_ARRAY_ELEMENTS_TEXT;

    /**
     * Call <code>pg_catalog.jsonb_array_elements_text</code>.
     */
    public static Result<JsonbArrayElementsTextRecord> JSONB_ARRAY_ELEMENTS_TEXT(
          Configuration configuration
        , JSONB fromJson
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.JsonbArrayElementsText.JSONB_ARRAY_ELEMENTS_TEXT.call(
              fromJson
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.jsonb_array_elements_text</code> as a table.
     */
    public static JsonbArrayElementsText JSONB_ARRAY_ELEMENTS_TEXT(
          JSONB fromJson
    ) {
        return quoassignment.jooq.pg_catalog.tables.JsonbArrayElementsText.JSONB_ARRAY_ELEMENTS_TEXT.call(
            fromJson
        );
    }

    /**
     * Get <code>pg_catalog.jsonb_array_elements_text</code> as a table.
     */
    public static JsonbArrayElementsText JSONB_ARRAY_ELEMENTS_TEXT(
          Field<JSONB> fromJson
    ) {
        return quoassignment.jooq.pg_catalog.tables.JsonbArrayElementsText.JSONB_ARRAY_ELEMENTS_TEXT.call(
            fromJson
        );
    }

    /**
     * The table <code>pg_catalog.jsonb_each</code>.
     */
    public static final JsonbEach JSONB_EACH = JsonbEach.JSONB_EACH;

    /**
     * Call <code>pg_catalog.jsonb_each</code>.
     */
    public static Result<JsonbEachRecord> JSONB_EACH(
          Configuration configuration
        , JSONB fromJson
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.JsonbEach.JSONB_EACH.call(
              fromJson
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.jsonb_each</code> as a table.
     */
    public static JsonbEach JSONB_EACH(
          JSONB fromJson
    ) {
        return quoassignment.jooq.pg_catalog.tables.JsonbEach.JSONB_EACH.call(
            fromJson
        );
    }

    /**
     * Get <code>pg_catalog.jsonb_each</code> as a table.
     */
    public static JsonbEach JSONB_EACH(
          Field<JSONB> fromJson
    ) {
        return quoassignment.jooq.pg_catalog.tables.JsonbEach.JSONB_EACH.call(
            fromJson
        );
    }

    /**
     * The table <code>pg_catalog.jsonb_each_text</code>.
     */
    public static final JsonbEachText JSONB_EACH_TEXT = JsonbEachText.JSONB_EACH_TEXT;

    /**
     * Call <code>pg_catalog.jsonb_each_text</code>.
     */
    public static Result<JsonbEachTextRecord> JSONB_EACH_TEXT(
          Configuration configuration
        , JSONB fromJson
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.JsonbEachText.JSONB_EACH_TEXT.call(
              fromJson
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.jsonb_each_text</code> as a table.
     */
    public static JsonbEachText JSONB_EACH_TEXT(
          JSONB fromJson
    ) {
        return quoassignment.jooq.pg_catalog.tables.JsonbEachText.JSONB_EACH_TEXT.call(
            fromJson
        );
    }

    /**
     * Get <code>pg_catalog.jsonb_each_text</code> as a table.
     */
    public static JsonbEachText JSONB_EACH_TEXT(
          Field<JSONB> fromJson
    ) {
        return quoassignment.jooq.pg_catalog.tables.JsonbEachText.JSONB_EACH_TEXT.call(
            fromJson
        );
    }

    /**
     * The table <code>pg_catalog.jsonb_object_keys</code>.
     */
    public static final JsonbObjectKeys JSONB_OBJECT_KEYS = JsonbObjectKeys.JSONB_OBJECT_KEYS;

    /**
     * Call <code>pg_catalog.jsonb_object_keys</code>.
     */
    public static Result<JsonbObjectKeysRecord> JSONB_OBJECT_KEYS(
          Configuration configuration
        , JSONB __1
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.JsonbObjectKeys.JSONB_OBJECT_KEYS.call(
              __1
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.jsonb_object_keys</code> as a table.
     */
    public static JsonbObjectKeys JSONB_OBJECT_KEYS(
          JSONB __1
    ) {
        return quoassignment.jooq.pg_catalog.tables.JsonbObjectKeys.JSONB_OBJECT_KEYS.call(
            __1
        );
    }

    /**
     * Get <code>pg_catalog.jsonb_object_keys</code> as a table.
     */
    public static JsonbObjectKeys JSONB_OBJECT_KEYS(
          Field<JSONB> __1
    ) {
        return quoassignment.jooq.pg_catalog.tables.JsonbObjectKeys.JSONB_OBJECT_KEYS.call(
            __1
        );
    }

    /**
     * The table <code>pg_catalog.jsonb_path_query</code>.
     */
    public static final JsonbPathQuery JSONB_PATH_QUERY = JsonbPathQuery.JSONB_PATH_QUERY;

    /**
     * @deprecated Unknown data type. Parameter type or return type is unknown.
     * If this is a qualified, user-defined type, it may have been excluded from
     * code generation. If this is a built-in type, you can define an explicit
     * {@link org.jooq.Binding} to specify how this type should be handled.
     * Deprecation can be turned off using {@literal
     * <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public static Result<JsonbPathQueryRecord> JSONB_PATH_QUERY(
          Configuration configuration
        , JSONB target
        , Object path
        , JSONB vars
        , Boolean silent
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.JsonbPathQuery.JSONB_PATH_QUERY.call(
              target
            , path
            , vars
            , silent
        )).fetch();
    }

    /**
     * @deprecated Unknown data type. Parameter type or return type is unknown.
     * If this is a qualified, user-defined type, it may have been excluded from
     * code generation. If this is a built-in type, you can define an explicit
     * {@link org.jooq.Binding} to specify how this type should be handled.
     * Deprecation can be turned off using {@literal
     * <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public static JsonbPathQuery JSONB_PATH_QUERY(
          JSONB target
        , Object path
        , JSONB vars
        , Boolean silent
    ) {
        return quoassignment.jooq.pg_catalog.tables.JsonbPathQuery.JSONB_PATH_QUERY.call(
            target,
            path,
            vars,
            silent
        );
    }

    /**
     * @deprecated Unknown data type. Parameter type or return type is unknown.
     * If this is a qualified, user-defined type, it may have been excluded from
     * code generation. If this is a built-in type, you can define an explicit
     * {@link org.jooq.Binding} to specify how this type should be handled.
     * Deprecation can be turned off using {@literal
     * <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public static JsonbPathQuery JSONB_PATH_QUERY(
          Field<JSONB> target
        , Field<Object> path
        , Field<JSONB> vars
        , Field<Boolean> silent
    ) {
        return quoassignment.jooq.pg_catalog.tables.JsonbPathQuery.JSONB_PATH_QUERY.call(
            target,
            path,
            vars,
            silent
        );
    }

    /**
     * The table <code>pg_catalog.jsonb_path_query_tz</code>.
     */
    public static final JsonbPathQueryTz JSONB_PATH_QUERY_TZ = JsonbPathQueryTz.JSONB_PATH_QUERY_TZ;

    /**
     * @deprecated Unknown data type. Parameter type or return type is unknown.
     * If this is a qualified, user-defined type, it may have been excluded from
     * code generation. If this is a built-in type, you can define an explicit
     * {@link org.jooq.Binding} to specify how this type should be handled.
     * Deprecation can be turned off using {@literal
     * <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public static Result<JsonbPathQueryTzRecord> JSONB_PATH_QUERY_TZ(
          Configuration configuration
        , JSONB target
        , Object path
        , JSONB vars
        , Boolean silent
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.JsonbPathQueryTz.JSONB_PATH_QUERY_TZ.call(
              target
            , path
            , vars
            , silent
        )).fetch();
    }

    /**
     * @deprecated Unknown data type. Parameter type or return type is unknown.
     * If this is a qualified, user-defined type, it may have been excluded from
     * code generation. If this is a built-in type, you can define an explicit
     * {@link org.jooq.Binding} to specify how this type should be handled.
     * Deprecation can be turned off using {@literal
     * <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public static JsonbPathQueryTz JSONB_PATH_QUERY_TZ(
          JSONB target
        , Object path
        , JSONB vars
        , Boolean silent
    ) {
        return quoassignment.jooq.pg_catalog.tables.JsonbPathQueryTz.JSONB_PATH_QUERY_TZ.call(
            target,
            path,
            vars,
            silent
        );
    }

    /**
     * @deprecated Unknown data type. Parameter type or return type is unknown.
     * If this is a qualified, user-defined type, it may have been excluded from
     * code generation. If this is a built-in type, you can define an explicit
     * {@link org.jooq.Binding} to specify how this type should be handled.
     * Deprecation can be turned off using {@literal
     * <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public static JsonbPathQueryTz JSONB_PATH_QUERY_TZ(
          Field<JSONB> target
        , Field<Object> path
        , Field<JSONB> vars
        , Field<Boolean> silent
    ) {
        return quoassignment.jooq.pg_catalog.tables.JsonbPathQueryTz.JSONB_PATH_QUERY_TZ.call(
            target,
            path,
            vars,
            silent
        );
    }

    /**
     * The table <code>pg_catalog.jsonb_populate_recordset</code>.
     */
    public static final JsonbPopulateRecordset JSONB_POPULATE_RECORDSET = JsonbPopulateRecordset.JSONB_POPULATE_RECORDSET;

    /**
     * @deprecated Unknown data type. Parameter type or return type is unknown.
     * If this is a qualified, user-defined type, it may have been excluded from
     * code generation. If this is a built-in type, you can define an explicit
     * {@link org.jooq.Binding} to specify how this type should be handled.
     * Deprecation can be turned off using {@literal
     * <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public static Result<JsonbPopulateRecordsetRecord> JSONB_POPULATE_RECORDSET(
          Configuration configuration
        , Object __1
        , JSONB __2
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.JsonbPopulateRecordset.JSONB_POPULATE_RECORDSET.call(
              __1
            , __2
        )).fetch();
    }

    /**
     * @deprecated Unknown data type. Parameter type or return type is unknown.
     * If this is a qualified, user-defined type, it may have been excluded from
     * code generation. If this is a built-in type, you can define an explicit
     * {@link org.jooq.Binding} to specify how this type should be handled.
     * Deprecation can be turned off using {@literal
     * <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public static JsonbPopulateRecordset JSONB_POPULATE_RECORDSET(
          Object __1
        , JSONB __2
    ) {
        return quoassignment.jooq.pg_catalog.tables.JsonbPopulateRecordset.JSONB_POPULATE_RECORDSET.call(
            __1,
            __2
        );
    }

    /**
     * @deprecated Unknown data type. Parameter type or return type is unknown.
     * If this is a qualified, user-defined type, it may have been excluded from
     * code generation. If this is a built-in type, you can define an explicit
     * {@link org.jooq.Binding} to specify how this type should be handled.
     * Deprecation can be turned off using {@literal
     * <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public static JsonbPopulateRecordset JSONB_POPULATE_RECORDSET(
          Field<Object> __1
        , Field<JSONB> __2
    ) {
        return quoassignment.jooq.pg_catalog.tables.JsonbPopulateRecordset.JSONB_POPULATE_RECORDSET.call(
            __1,
            __2
        );
    }

    /**
     * The table <code>pg_catalog.jsonb_to_recordset</code>.
     */
    public static final JsonbToRecordset JSONB_TO_RECORDSET = JsonbToRecordset.JSONB_TO_RECORDSET;

    /**
     * Call <code>pg_catalog.jsonb_to_recordset</code>.
     */
    public static Result<JsonbToRecordsetRecord> JSONB_TO_RECORDSET(
          Configuration configuration
        , JSONB __1
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.JsonbToRecordset.JSONB_TO_RECORDSET.call(
              __1
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.jsonb_to_recordset</code> as a table.
     */
    public static JsonbToRecordset JSONB_TO_RECORDSET(
          JSONB __1
    ) {
        return quoassignment.jooq.pg_catalog.tables.JsonbToRecordset.JSONB_TO_RECORDSET.call(
            __1
        );
    }

    /**
     * Get <code>pg_catalog.jsonb_to_recordset</code> as a table.
     */
    public static JsonbToRecordset JSONB_TO_RECORDSET(
          Field<JSONB> __1
    ) {
        return quoassignment.jooq.pg_catalog.tables.JsonbToRecordset.JSONB_TO_RECORDSET.call(
            __1
        );
    }

    /**
     * The table <code>pg_catalog.pg_aggregate</code>.
     */
    public static final PgAggregate PG_AGGREGATE = PgAggregate.PG_AGGREGATE;

    /**
     * The table <code>pg_catalog.pg_am</code>.
     */
    public static final PgAm PG_AM = PgAm.PG_AM;

    /**
     * The table <code>pg_catalog.pg_amop</code>.
     */
    public static final PgAmop PG_AMOP = PgAmop.PG_AMOP;

    /**
     * The table <code>pg_catalog.pg_amproc</code>.
     */
    public static final PgAmproc PG_AMPROC = PgAmproc.PG_AMPROC;

    /**
     * The table <code>pg_catalog.pg_attrdef</code>.
     */
    public static final PgAttrdef PG_ATTRDEF = PgAttrdef.PG_ATTRDEF;

    /**
     * The table <code>pg_catalog.pg_attribute</code>.
     */
    public static final PgAttribute PG_ATTRIBUTE = PgAttribute.PG_ATTRIBUTE;

    /**
     * The table <code>pg_catalog.pg_auth_members</code>.
     */
    public static final PgAuthMembers PG_AUTH_MEMBERS = PgAuthMembers.PG_AUTH_MEMBERS;

    /**
     * The table <code>pg_catalog.pg_authid</code>.
     */
    public static final PgAuthid PG_AUTHID = PgAuthid.PG_AUTHID;

    /**
     * The table <code>pg_catalog.pg_available_extension_versions</code>.
     */
    public static final PgAvailableExtensionVersions PG_AVAILABLE_EXTENSION_VERSIONS = PgAvailableExtensionVersions.PG_AVAILABLE_EXTENSION_VERSIONS;

    /**
     * The table <code>pg_catalog.pg_available_extensions</code>.
     */
    public static final PgAvailableExtensions PG_AVAILABLE_EXTENSIONS = PgAvailableExtensions.PG_AVAILABLE_EXTENSIONS;

    /**
     * The table <code>pg_catalog.pg_available_wal_summaries</code>.
     */
    public static final PgAvailableWalSummaries PG_AVAILABLE_WAL_SUMMARIES = PgAvailableWalSummaries.PG_AVAILABLE_WAL_SUMMARIES;

    /**
     * Call <code>pg_catalog.pg_available_wal_summaries</code>.
     */
    public static Result<PgAvailableWalSummariesRecord> PG_AVAILABLE_WAL_SUMMARIES(
          Configuration configuration
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.PgAvailableWalSummaries.PG_AVAILABLE_WAL_SUMMARIES.call(
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_available_wal_summaries</code> as a table.
     */
    public static PgAvailableWalSummaries PG_AVAILABLE_WAL_SUMMARIES() {
        return quoassignment.jooq.pg_catalog.tables.PgAvailableWalSummaries.PG_AVAILABLE_WAL_SUMMARIES.call(
        );
    }

    /**
     * The table <code>pg_catalog.pg_backend_memory_contexts</code>.
     */
    public static final PgBackendMemoryContexts PG_BACKEND_MEMORY_CONTEXTS = PgBackendMemoryContexts.PG_BACKEND_MEMORY_CONTEXTS;

    /**
     * The table <code>pg_catalog.pg_cast</code>.
     */
    public static final PgCast PG_CAST = PgCast.PG_CAST;

    /**
     * The table <code>pg_catalog.pg_class</code>.
     */
    public static final PgClass PG_CLASS = PgClass.PG_CLASS;

    /**
     * The table <code>pg_catalog.pg_collation</code>.
     */
    public static final PgCollation PG_COLLATION = PgCollation.PG_COLLATION;

    /**
     * The table <code>pg_catalog.pg_config</code>.
     */
    public static final PgConfig PG_CONFIG = PgConfig.PG_CONFIG;

    /**
     * Call <code>pg_catalog.pg_config</code>.
     */
    public static Result<PgConfigRecord> PG_CONFIG(
          Configuration configuration
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.PgConfig.PG_CONFIG.call(
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_config</code> as a table.
     */
    public static PgConfig PG_CONFIG() {
        return quoassignment.jooq.pg_catalog.tables.PgConfig.PG_CONFIG.call(
        );
    }

    /**
     * The table <code>pg_catalog.pg_constraint</code>.
     */
    public static final PgConstraint PG_CONSTRAINT = PgConstraint.PG_CONSTRAINT;

    /**
     * The table <code>pg_catalog.pg_conversion</code>.
     */
    public static final PgConversion PG_CONVERSION = PgConversion.PG_CONVERSION;

    /**
     * The table <code>pg_catalog.pg_cursor</code>.
     */
    public static final PgCursor PG_CURSOR = PgCursor.PG_CURSOR;

    /**
     * Call <code>pg_catalog.pg_cursor</code>.
     */
    public static Result<PgCursorRecord> PG_CURSOR(
          Configuration configuration
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.PgCursor.PG_CURSOR.call(
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_cursor</code> as a table.
     */
    public static PgCursor PG_CURSOR() {
        return quoassignment.jooq.pg_catalog.tables.PgCursor.PG_CURSOR.call(
        );
    }

    /**
     * The table <code>pg_catalog.pg_cursors</code>.
     */
    public static final PgCursors PG_CURSORS = PgCursors.PG_CURSORS;

    /**
     * The table <code>pg_catalog.pg_database</code>.
     */
    public static final PgDatabase PG_DATABASE = PgDatabase.PG_DATABASE;

    /**
     * The table <code>pg_catalog.pg_db_role_setting</code>.
     */
    public static final PgDbRoleSetting PG_DB_ROLE_SETTING = PgDbRoleSetting.PG_DB_ROLE_SETTING;

    /**
     * The table <code>pg_catalog.pg_default_acl</code>.
     */
    public static final PgDefaultAcl PG_DEFAULT_ACL = PgDefaultAcl.PG_DEFAULT_ACL;

    /**
     * The table <code>pg_catalog.pg_depend</code>.
     */
    public static final PgDepend PG_DEPEND = PgDepend.PG_DEPEND;

    /**
     * The table <code>pg_catalog.pg_description</code>.
     */
    public static final PgDescription PG_DESCRIPTION = PgDescription.PG_DESCRIPTION;

    /**
     * The table <code>pg_catalog.pg_enum</code>.
     */
    public static final PgEnum PG_ENUM = PgEnum.PG_ENUM;

    /**
     * The table <code>pg_catalog.pg_event_trigger</code>.
     */
    public static final PgEventTrigger PG_EVENT_TRIGGER = PgEventTrigger.PG_EVENT_TRIGGER;

    /**
     * The table <code>pg_catalog.pg_event_trigger_ddl_commands</code>.
     */
    public static final PgEventTriggerDdlCommands PG_EVENT_TRIGGER_DDL_COMMANDS = PgEventTriggerDdlCommands.PG_EVENT_TRIGGER_DDL_COMMANDS;

    /**
     * Call <code>pg_catalog.pg_event_trigger_ddl_commands</code>.
     */
    public static Result<PgEventTriggerDdlCommandsRecord> PG_EVENT_TRIGGER_DDL_COMMANDS(
          Configuration configuration
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.PgEventTriggerDdlCommands.PG_EVENT_TRIGGER_DDL_COMMANDS.call(
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_event_trigger_ddl_commands</code> as a table.
     */
    public static PgEventTriggerDdlCommands PG_EVENT_TRIGGER_DDL_COMMANDS() {
        return quoassignment.jooq.pg_catalog.tables.PgEventTriggerDdlCommands.PG_EVENT_TRIGGER_DDL_COMMANDS.call(
        );
    }

    /**
     * The table <code>pg_catalog.pg_event_trigger_dropped_objects</code>.
     */
    public static final PgEventTriggerDroppedObjects PG_EVENT_TRIGGER_DROPPED_OBJECTS = PgEventTriggerDroppedObjects.PG_EVENT_TRIGGER_DROPPED_OBJECTS;

    /**
     * Call <code>pg_catalog.pg_event_trigger_dropped_objects</code>.
     */
    public static Result<PgEventTriggerDroppedObjectsRecord> PG_EVENT_TRIGGER_DROPPED_OBJECTS(
          Configuration configuration
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.PgEventTriggerDroppedObjects.PG_EVENT_TRIGGER_DROPPED_OBJECTS.call(
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_event_trigger_dropped_objects</code> as a table.
     */
    public static PgEventTriggerDroppedObjects PG_EVENT_TRIGGER_DROPPED_OBJECTS() {
        return quoassignment.jooq.pg_catalog.tables.PgEventTriggerDroppedObjects.PG_EVENT_TRIGGER_DROPPED_OBJECTS.call(
        );
    }

    /**
     * The table <code>pg_catalog.pg_extension</code>.
     */
    public static final PgExtension PG_EXTENSION = PgExtension.PG_EXTENSION;

    /**
     * The table <code>pg_catalog.pg_extension_update_paths</code>.
     */
    public static final PgExtensionUpdatePaths PG_EXTENSION_UPDATE_PATHS = PgExtensionUpdatePaths.PG_EXTENSION_UPDATE_PATHS;

    /**
     * Call <code>pg_catalog.pg_extension_update_paths</code>.
     */
    public static Result<PgExtensionUpdatePathsRecord> PG_EXTENSION_UPDATE_PATHS(
          Configuration configuration
        , String name
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.PgExtensionUpdatePaths.PG_EXTENSION_UPDATE_PATHS.call(
              name
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_extension_update_paths</code> as a table.
     */
    public static PgExtensionUpdatePaths PG_EXTENSION_UPDATE_PATHS(
          String name
    ) {
        return quoassignment.jooq.pg_catalog.tables.PgExtensionUpdatePaths.PG_EXTENSION_UPDATE_PATHS.call(
            name
        );
    }

    /**
     * Get <code>pg_catalog.pg_extension_update_paths</code> as a table.
     */
    public static PgExtensionUpdatePaths PG_EXTENSION_UPDATE_PATHS(
          Field<String> name
    ) {
        return quoassignment.jooq.pg_catalog.tables.PgExtensionUpdatePaths.PG_EXTENSION_UPDATE_PATHS.call(
            name
        );
    }

    /**
     * The table <code>pg_catalog.pg_file_settings</code>.
     */
    public static final PgFileSettings PG_FILE_SETTINGS = PgFileSettings.PG_FILE_SETTINGS;

    /**
     * The table <code>pg_catalog.pg_foreign_data_wrapper</code>.
     */
    public static final PgForeignDataWrapper PG_FOREIGN_DATA_WRAPPER = PgForeignDataWrapper.PG_FOREIGN_DATA_WRAPPER;

    /**
     * The table <code>pg_catalog.pg_foreign_server</code>.
     */
    public static final PgForeignServer PG_FOREIGN_SERVER = PgForeignServer.PG_FOREIGN_SERVER;

    /**
     * The table <code>pg_catalog.pg_foreign_table</code>.
     */
    public static final PgForeignTable PG_FOREIGN_TABLE = PgForeignTable.PG_FOREIGN_TABLE;

    /**
     * The table <code>pg_catalog.pg_get_backend_memory_contexts</code>.
     */
    public static final PgGetBackendMemoryContexts PG_GET_BACKEND_MEMORY_CONTEXTS = PgGetBackendMemoryContexts.PG_GET_BACKEND_MEMORY_CONTEXTS;

    /**
     * Call <code>pg_catalog.pg_get_backend_memory_contexts</code>.
     */
    public static Result<PgGetBackendMemoryContextsRecord> PG_GET_BACKEND_MEMORY_CONTEXTS(
          Configuration configuration
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.PgGetBackendMemoryContexts.PG_GET_BACKEND_MEMORY_CONTEXTS.call(
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_get_backend_memory_contexts</code> as a table.
     */
    public static PgGetBackendMemoryContexts PG_GET_BACKEND_MEMORY_CONTEXTS() {
        return quoassignment.jooq.pg_catalog.tables.PgGetBackendMemoryContexts.PG_GET_BACKEND_MEMORY_CONTEXTS.call(
        );
    }

    /**
     * The table <code>pg_catalog.pg_get_catalog_foreign_keys</code>.
     */
    public static final PgGetCatalogForeignKeys PG_GET_CATALOG_FOREIGN_KEYS = PgGetCatalogForeignKeys.PG_GET_CATALOG_FOREIGN_KEYS;

    /**
     * Call <code>pg_catalog.pg_get_catalog_foreign_keys</code>.
     */
    public static Result<PgGetCatalogForeignKeysRecord> PG_GET_CATALOG_FOREIGN_KEYS(
          Configuration configuration
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.PgGetCatalogForeignKeys.PG_GET_CATALOG_FOREIGN_KEYS.call(
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_get_catalog_foreign_keys</code> as a table.
     */
    public static PgGetCatalogForeignKeys PG_GET_CATALOG_FOREIGN_KEYS() {
        return quoassignment.jooq.pg_catalog.tables.PgGetCatalogForeignKeys.PG_GET_CATALOG_FOREIGN_KEYS.call(
        );
    }

    /**
     * The table <code>pg_catalog.pg_get_keywords</code>.
     */
    public static final PgGetKeywords PG_GET_KEYWORDS = PgGetKeywords.PG_GET_KEYWORDS;

    /**
     * Call <code>pg_catalog.pg_get_keywords</code>.
     */
    public static Result<PgGetKeywordsRecord> PG_GET_KEYWORDS(
          Configuration configuration
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.PgGetKeywords.PG_GET_KEYWORDS.call(
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_get_keywords</code> as a table.
     */
    public static PgGetKeywords PG_GET_KEYWORDS() {
        return quoassignment.jooq.pg_catalog.tables.PgGetKeywords.PG_GET_KEYWORDS.call(
        );
    }

    /**
     * The table <code>pg_catalog.pg_get_multixact_members</code>.
     */
    public static final PgGetMultixactMembers PG_GET_MULTIXACT_MEMBERS = PgGetMultixactMembers.PG_GET_MULTIXACT_MEMBERS;

    /**
     * Call <code>pg_catalog.pg_get_multixact_members</code>.
     */
    public static Result<PgGetMultixactMembersRecord> PG_GET_MULTIXACT_MEMBERS(
          Configuration configuration
        , Long multixid
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.PgGetMultixactMembers.PG_GET_MULTIXACT_MEMBERS.call(
              multixid
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_get_multixact_members</code> as a table.
     */
    public static PgGetMultixactMembers PG_GET_MULTIXACT_MEMBERS(
          Long multixid
    ) {
        return quoassignment.jooq.pg_catalog.tables.PgGetMultixactMembers.PG_GET_MULTIXACT_MEMBERS.call(
            multixid
        );
    }

    /**
     * Get <code>pg_catalog.pg_get_multixact_members</code> as a table.
     */
    public static PgGetMultixactMembers PG_GET_MULTIXACT_MEMBERS(
          Field<Long> multixid
    ) {
        return quoassignment.jooq.pg_catalog.tables.PgGetMultixactMembers.PG_GET_MULTIXACT_MEMBERS.call(
            multixid
        );
    }

    /**
     * The table <code>pg_catalog.pg_get_publication_tables</code>.
     */
    public static final PgGetPublicationTables PG_GET_PUBLICATION_TABLES = PgGetPublicationTables.PG_GET_PUBLICATION_TABLES;

    /**
     * Call <code>pg_catalog.pg_get_publication_tables</code>.
     */
    public static Result<PgGetPublicationTablesRecord> PG_GET_PUBLICATION_TABLES(
          Configuration configuration
        , String[] pubname
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.PgGetPublicationTables.PG_GET_PUBLICATION_TABLES.call(
              pubname
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_get_publication_tables</code> as a table.
     */
    public static PgGetPublicationTables PG_GET_PUBLICATION_TABLES(
          String[] pubname
    ) {
        return quoassignment.jooq.pg_catalog.tables.PgGetPublicationTables.PG_GET_PUBLICATION_TABLES.call(
            pubname
        );
    }

    /**
     * Get <code>pg_catalog.pg_get_publication_tables</code> as a table.
     */
    public static PgGetPublicationTables PG_GET_PUBLICATION_TABLES(
          Field<String[]> pubname
    ) {
        return quoassignment.jooq.pg_catalog.tables.PgGetPublicationTables.PG_GET_PUBLICATION_TABLES.call(
            pubname
        );
    }

    /**
     * The table <code>pg_catalog.pg_get_replication_slots</code>.
     */
    public static final PgGetReplicationSlots PG_GET_REPLICATION_SLOTS = PgGetReplicationSlots.PG_GET_REPLICATION_SLOTS;

    /**
     * Call <code>pg_catalog.pg_get_replication_slots</code>.
     */
    public static Result<PgGetReplicationSlotsRecord> PG_GET_REPLICATION_SLOTS(
          Configuration configuration
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.PgGetReplicationSlots.PG_GET_REPLICATION_SLOTS.call(
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_get_replication_slots</code> as a table.
     */
    public static PgGetReplicationSlots PG_GET_REPLICATION_SLOTS() {
        return quoassignment.jooq.pg_catalog.tables.PgGetReplicationSlots.PG_GET_REPLICATION_SLOTS.call(
        );
    }

    /**
     * The table <code>pg_catalog.pg_get_shmem_allocations</code>.
     */
    public static final PgGetShmemAllocations PG_GET_SHMEM_ALLOCATIONS = PgGetShmemAllocations.PG_GET_SHMEM_ALLOCATIONS;

    /**
     * Call <code>pg_catalog.pg_get_shmem_allocations</code>.
     */
    public static Result<PgGetShmemAllocationsRecord> PG_GET_SHMEM_ALLOCATIONS(
          Configuration configuration
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.PgGetShmemAllocations.PG_GET_SHMEM_ALLOCATIONS.call(
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_get_shmem_allocations</code> as a table.
     */
    public static PgGetShmemAllocations PG_GET_SHMEM_ALLOCATIONS() {
        return quoassignment.jooq.pg_catalog.tables.PgGetShmemAllocations.PG_GET_SHMEM_ALLOCATIONS.call(
        );
    }

    /**
     * The table <code>pg_catalog.pg_get_wait_events</code>.
     */
    public static final PgGetWaitEvents PG_GET_WAIT_EVENTS = PgGetWaitEvents.PG_GET_WAIT_EVENTS;

    /**
     * Call <code>pg_catalog.pg_get_wait_events</code>.
     */
    public static Result<PgGetWaitEventsRecord> PG_GET_WAIT_EVENTS(
          Configuration configuration
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.PgGetWaitEvents.PG_GET_WAIT_EVENTS.call(
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_get_wait_events</code> as a table.
     */
    public static PgGetWaitEvents PG_GET_WAIT_EVENTS() {
        return quoassignment.jooq.pg_catalog.tables.PgGetWaitEvents.PG_GET_WAIT_EVENTS.call(
        );
    }

    /**
     * The table <code>pg_catalog.pg_get_wal_resource_managers</code>.
     */
    public static final PgGetWalResourceManagers PG_GET_WAL_RESOURCE_MANAGERS = PgGetWalResourceManagers.PG_GET_WAL_RESOURCE_MANAGERS;

    /**
     * Call <code>pg_catalog.pg_get_wal_resource_managers</code>.
     */
    public static Result<PgGetWalResourceManagersRecord> PG_GET_WAL_RESOURCE_MANAGERS(
          Configuration configuration
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.PgGetWalResourceManagers.PG_GET_WAL_RESOURCE_MANAGERS.call(
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_get_wal_resource_managers</code> as a table.
     */
    public static PgGetWalResourceManagers PG_GET_WAL_RESOURCE_MANAGERS() {
        return quoassignment.jooq.pg_catalog.tables.PgGetWalResourceManagers.PG_GET_WAL_RESOURCE_MANAGERS.call(
        );
    }

    /**
     * The table <code>pg_catalog.pg_group</code>.
     */
    public static final PgGroup PG_GROUP = PgGroup.PG_GROUP;

    /**
     * The table <code>pg_catalog.pg_hba_file_rules</code>.
     */
    public static final PgHbaFileRules PG_HBA_FILE_RULES = PgHbaFileRules.PG_HBA_FILE_RULES;

    /**
     * Call <code>pg_catalog.pg_hba_file_rules</code>.
     */
    public static Result<PgHbaFileRulesRecord> PG_HBA_FILE_RULES(
          Configuration configuration
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.PgHbaFileRules.PG_HBA_FILE_RULES.call(
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_hba_file_rules</code> as a table.
     */
    public static PgHbaFileRules PG_HBA_FILE_RULES() {
        return quoassignment.jooq.pg_catalog.tables.PgHbaFileRules.PG_HBA_FILE_RULES.call(
        );
    }

    /**
     * The table <code>pg_catalog.pg_ident_file_mappings</code>.
     */
    public static final PgIdentFileMappings PG_IDENT_FILE_MAPPINGS = PgIdentFileMappings.PG_IDENT_FILE_MAPPINGS;

    /**
     * The table <code>pg_catalog.pg_index</code>.
     */
    public static final PgIndex PG_INDEX = PgIndex.PG_INDEX;

    /**
     * The table <code>pg_catalog.pg_indexes</code>.
     */
    public static final PgIndexes PG_INDEXES = PgIndexes.PG_INDEXES;

    /**
     * The table <code>pg_catalog.pg_inherits</code>.
     */
    public static final PgInherits PG_INHERITS = PgInherits.PG_INHERITS;

    /**
     * The table <code>pg_catalog.pg_init_privs</code>.
     */
    public static final PgInitPrivs PG_INIT_PRIVS = PgInitPrivs.PG_INIT_PRIVS;

    /**
     * The table <code>pg_catalog.pg_language</code>.
     */
    public static final PgLanguage PG_LANGUAGE = PgLanguage.PG_LANGUAGE;

    /**
     * The table <code>pg_catalog.pg_largeobject</code>.
     */
    public static final PgLargeobject PG_LARGEOBJECT = PgLargeobject.PG_LARGEOBJECT;

    /**
     * The table <code>pg_catalog.pg_largeobject_metadata</code>.
     */
    public static final PgLargeobjectMetadata PG_LARGEOBJECT_METADATA = PgLargeobjectMetadata.PG_LARGEOBJECT_METADATA;

    /**
     * The table <code>pg_catalog.pg_listening_channels</code>.
     */
    public static final PgListeningChannels PG_LISTENING_CHANNELS = PgListeningChannels.PG_LISTENING_CHANNELS;

    /**
     * Call <code>pg_catalog.pg_listening_channels</code>.
     */
    public static Result<PgListeningChannelsRecord> PG_LISTENING_CHANNELS(
          Configuration configuration
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.PgListeningChannels.PG_LISTENING_CHANNELS.call(
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_listening_channels</code> as a table.
     */
    public static PgListeningChannels PG_LISTENING_CHANNELS() {
        return quoassignment.jooq.pg_catalog.tables.PgListeningChannels.PG_LISTENING_CHANNELS.call(
        );
    }

    /**
     * The table <code>pg_catalog.pg_lock_status</code>.
     */
    public static final PgLockStatus PG_LOCK_STATUS = PgLockStatus.PG_LOCK_STATUS;

    /**
     * Call <code>pg_catalog.pg_lock_status</code>.
     */
    public static Result<PgLockStatusRecord> PG_LOCK_STATUS(
          Configuration configuration
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.PgLockStatus.PG_LOCK_STATUS.call(
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_lock_status</code> as a table.
     */
    public static PgLockStatus PG_LOCK_STATUS() {
        return quoassignment.jooq.pg_catalog.tables.PgLockStatus.PG_LOCK_STATUS.call(
        );
    }

    /**
     * The table <code>pg_catalog.pg_locks</code>.
     */
    public static final PgLocks PG_LOCKS = PgLocks.PG_LOCKS;

    /**
     * The table <code>pg_catalog.pg_logical_slot_get_binary_changes</code>.
     */
    public static final PgLogicalSlotGetBinaryChanges PG_LOGICAL_SLOT_GET_BINARY_CHANGES = PgLogicalSlotGetBinaryChanges.PG_LOGICAL_SLOT_GET_BINARY_CHANGES;

    /**
     * @deprecated Unknown data type. Parameter type or return type is unknown.
     * If this is a qualified, user-defined type, it may have been excluded from
     * code generation. If this is a built-in type, you can define an explicit
     * {@link org.jooq.Binding} to specify how this type should be handled.
     * Deprecation can be turned off using {@literal
     * <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public static Result<PgLogicalSlotGetBinaryChangesRecord> PG_LOGICAL_SLOT_GET_BINARY_CHANGES(
          Configuration configuration
        , String slotName
        , Object uptoLsn
        , Integer uptoNchanges
        , String[] options
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.PgLogicalSlotGetBinaryChanges.PG_LOGICAL_SLOT_GET_BINARY_CHANGES.call(
              slotName
            , uptoLsn
            , uptoNchanges
            , options
        )).fetch();
    }

    /**
     * @deprecated Unknown data type. Parameter type or return type is unknown.
     * If this is a qualified, user-defined type, it may have been excluded from
     * code generation. If this is a built-in type, you can define an explicit
     * {@link org.jooq.Binding} to specify how this type should be handled.
     * Deprecation can be turned off using {@literal
     * <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public static PgLogicalSlotGetBinaryChanges PG_LOGICAL_SLOT_GET_BINARY_CHANGES(
          String slotName
        , Object uptoLsn
        , Integer uptoNchanges
        , String[] options
    ) {
        return quoassignment.jooq.pg_catalog.tables.PgLogicalSlotGetBinaryChanges.PG_LOGICAL_SLOT_GET_BINARY_CHANGES.call(
            slotName,
            uptoLsn,
            uptoNchanges,
            options
        );
    }

    /**
     * @deprecated Unknown data type. Parameter type or return type is unknown.
     * If this is a qualified, user-defined type, it may have been excluded from
     * code generation. If this is a built-in type, you can define an explicit
     * {@link org.jooq.Binding} to specify how this type should be handled.
     * Deprecation can be turned off using {@literal
     * <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public static PgLogicalSlotGetBinaryChanges PG_LOGICAL_SLOT_GET_BINARY_CHANGES(
          Field<String> slotName
        , Field<Object> uptoLsn
        , Field<Integer> uptoNchanges
        , Field<String[]> options
    ) {
        return quoassignment.jooq.pg_catalog.tables.PgLogicalSlotGetBinaryChanges.PG_LOGICAL_SLOT_GET_BINARY_CHANGES.call(
            slotName,
            uptoLsn,
            uptoNchanges,
            options
        );
    }

    /**
     * The table <code>pg_catalog.pg_logical_slot_get_changes</code>.
     */
    public static final PgLogicalSlotGetChanges PG_LOGICAL_SLOT_GET_CHANGES = PgLogicalSlotGetChanges.PG_LOGICAL_SLOT_GET_CHANGES;

    /**
     * @deprecated Unknown data type. Parameter type or return type is unknown.
     * If this is a qualified, user-defined type, it may have been excluded from
     * code generation. If this is a built-in type, you can define an explicit
     * {@link org.jooq.Binding} to specify how this type should be handled.
     * Deprecation can be turned off using {@literal
     * <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public static Result<PgLogicalSlotGetChangesRecord> PG_LOGICAL_SLOT_GET_CHANGES(
          Configuration configuration
        , String slotName
        , Object uptoLsn
        , Integer uptoNchanges
        , String[] options
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.PgLogicalSlotGetChanges.PG_LOGICAL_SLOT_GET_CHANGES.call(
              slotName
            , uptoLsn
            , uptoNchanges
            , options
        )).fetch();
    }

    /**
     * @deprecated Unknown data type. Parameter type or return type is unknown.
     * If this is a qualified, user-defined type, it may have been excluded from
     * code generation. If this is a built-in type, you can define an explicit
     * {@link org.jooq.Binding} to specify how this type should be handled.
     * Deprecation can be turned off using {@literal
     * <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public static PgLogicalSlotGetChanges PG_LOGICAL_SLOT_GET_CHANGES(
          String slotName
        , Object uptoLsn
        , Integer uptoNchanges
        , String[] options
    ) {
        return quoassignment.jooq.pg_catalog.tables.PgLogicalSlotGetChanges.PG_LOGICAL_SLOT_GET_CHANGES.call(
            slotName,
            uptoLsn,
            uptoNchanges,
            options
        );
    }

    /**
     * @deprecated Unknown data type. Parameter type or return type is unknown.
     * If this is a qualified, user-defined type, it may have been excluded from
     * code generation. If this is a built-in type, you can define an explicit
     * {@link org.jooq.Binding} to specify how this type should be handled.
     * Deprecation can be turned off using {@literal
     * <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public static PgLogicalSlotGetChanges PG_LOGICAL_SLOT_GET_CHANGES(
          Field<String> slotName
        , Field<Object> uptoLsn
        , Field<Integer> uptoNchanges
        , Field<String[]> options
    ) {
        return quoassignment.jooq.pg_catalog.tables.PgLogicalSlotGetChanges.PG_LOGICAL_SLOT_GET_CHANGES.call(
            slotName,
            uptoLsn,
            uptoNchanges,
            options
        );
    }

    /**
     * The table <code>pg_catalog.pg_logical_slot_peek_binary_changes</code>.
     */
    public static final PgLogicalSlotPeekBinaryChanges PG_LOGICAL_SLOT_PEEK_BINARY_CHANGES = PgLogicalSlotPeekBinaryChanges.PG_LOGICAL_SLOT_PEEK_BINARY_CHANGES;

    /**
     * @deprecated Unknown data type. Parameter type or return type is unknown.
     * If this is a qualified, user-defined type, it may have been excluded from
     * code generation. If this is a built-in type, you can define an explicit
     * {@link org.jooq.Binding} to specify how this type should be handled.
     * Deprecation can be turned off using {@literal
     * <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public static Result<PgLogicalSlotPeekBinaryChangesRecord> PG_LOGICAL_SLOT_PEEK_BINARY_CHANGES(
          Configuration configuration
        , String slotName
        , Object uptoLsn
        , Integer uptoNchanges
        , String[] options
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.PgLogicalSlotPeekBinaryChanges.PG_LOGICAL_SLOT_PEEK_BINARY_CHANGES.call(
              slotName
            , uptoLsn
            , uptoNchanges
            , options
        )).fetch();
    }

    /**
     * @deprecated Unknown data type. Parameter type or return type is unknown.
     * If this is a qualified, user-defined type, it may have been excluded from
     * code generation. If this is a built-in type, you can define an explicit
     * {@link org.jooq.Binding} to specify how this type should be handled.
     * Deprecation can be turned off using {@literal
     * <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public static PgLogicalSlotPeekBinaryChanges PG_LOGICAL_SLOT_PEEK_BINARY_CHANGES(
          String slotName
        , Object uptoLsn
        , Integer uptoNchanges
        , String[] options
    ) {
        return quoassignment.jooq.pg_catalog.tables.PgLogicalSlotPeekBinaryChanges.PG_LOGICAL_SLOT_PEEK_BINARY_CHANGES.call(
            slotName,
            uptoLsn,
            uptoNchanges,
            options
        );
    }

    /**
     * @deprecated Unknown data type. Parameter type or return type is unknown.
     * If this is a qualified, user-defined type, it may have been excluded from
     * code generation. If this is a built-in type, you can define an explicit
     * {@link org.jooq.Binding} to specify how this type should be handled.
     * Deprecation can be turned off using {@literal
     * <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public static PgLogicalSlotPeekBinaryChanges PG_LOGICAL_SLOT_PEEK_BINARY_CHANGES(
          Field<String> slotName
        , Field<Object> uptoLsn
        , Field<Integer> uptoNchanges
        , Field<String[]> options
    ) {
        return quoassignment.jooq.pg_catalog.tables.PgLogicalSlotPeekBinaryChanges.PG_LOGICAL_SLOT_PEEK_BINARY_CHANGES.call(
            slotName,
            uptoLsn,
            uptoNchanges,
            options
        );
    }

    /**
     * The table <code>pg_catalog.pg_logical_slot_peek_changes</code>.
     */
    public static final PgLogicalSlotPeekChanges PG_LOGICAL_SLOT_PEEK_CHANGES = PgLogicalSlotPeekChanges.PG_LOGICAL_SLOT_PEEK_CHANGES;

    /**
     * @deprecated Unknown data type. Parameter type or return type is unknown.
     * If this is a qualified, user-defined type, it may have been excluded from
     * code generation. If this is a built-in type, you can define an explicit
     * {@link org.jooq.Binding} to specify how this type should be handled.
     * Deprecation can be turned off using {@literal
     * <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public static Result<PgLogicalSlotPeekChangesRecord> PG_LOGICAL_SLOT_PEEK_CHANGES(
          Configuration configuration
        , String slotName
        , Object uptoLsn
        , Integer uptoNchanges
        , String[] options
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.PgLogicalSlotPeekChanges.PG_LOGICAL_SLOT_PEEK_CHANGES.call(
              slotName
            , uptoLsn
            , uptoNchanges
            , options
        )).fetch();
    }

    /**
     * @deprecated Unknown data type. Parameter type or return type is unknown.
     * If this is a qualified, user-defined type, it may have been excluded from
     * code generation. If this is a built-in type, you can define an explicit
     * {@link org.jooq.Binding} to specify how this type should be handled.
     * Deprecation can be turned off using {@literal
     * <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public static PgLogicalSlotPeekChanges PG_LOGICAL_SLOT_PEEK_CHANGES(
          String slotName
        , Object uptoLsn
        , Integer uptoNchanges
        , String[] options
    ) {
        return quoassignment.jooq.pg_catalog.tables.PgLogicalSlotPeekChanges.PG_LOGICAL_SLOT_PEEK_CHANGES.call(
            slotName,
            uptoLsn,
            uptoNchanges,
            options
        );
    }

    /**
     * @deprecated Unknown data type. Parameter type or return type is unknown.
     * If this is a qualified, user-defined type, it may have been excluded from
     * code generation. If this is a built-in type, you can define an explicit
     * {@link org.jooq.Binding} to specify how this type should be handled.
     * Deprecation can be turned off using {@literal
     * <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public static PgLogicalSlotPeekChanges PG_LOGICAL_SLOT_PEEK_CHANGES(
          Field<String> slotName
        , Field<Object> uptoLsn
        , Field<Integer> uptoNchanges
        , Field<String[]> options
    ) {
        return quoassignment.jooq.pg_catalog.tables.PgLogicalSlotPeekChanges.PG_LOGICAL_SLOT_PEEK_CHANGES.call(
            slotName,
            uptoLsn,
            uptoNchanges,
            options
        );
    }

    /**
     * The table <code>pg_catalog.pg_ls_archive_statusdir</code>.
     */
    public static final PgLsArchiveStatusdir PG_LS_ARCHIVE_STATUSDIR = PgLsArchiveStatusdir.PG_LS_ARCHIVE_STATUSDIR;

    /**
     * Call <code>pg_catalog.pg_ls_archive_statusdir</code>.
     */
    public static Result<PgLsArchiveStatusdirRecord> PG_LS_ARCHIVE_STATUSDIR(
          Configuration configuration
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.PgLsArchiveStatusdir.PG_LS_ARCHIVE_STATUSDIR.call(
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_ls_archive_statusdir</code> as a table.
     */
    public static PgLsArchiveStatusdir PG_LS_ARCHIVE_STATUSDIR() {
        return quoassignment.jooq.pg_catalog.tables.PgLsArchiveStatusdir.PG_LS_ARCHIVE_STATUSDIR.call(
        );
    }

    /**
     * The table <code>pg_catalog.pg_ls_dir</code>.
     */
    public static final PgLsDir PG_LS_DIR = PgLsDir.PG_LS_DIR;

    /**
     * Call <code>pg_catalog.pg_ls_dir</code>.
     */
    public static Result<PgLsDirRecord> PG_LS_DIR(
          Configuration configuration
        , String __1
        , Boolean __2
        , Boolean __3
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.PgLsDir.PG_LS_DIR.call(
              __1
            , __2
            , __3
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_ls_dir</code> as a table.
     */
    public static PgLsDir PG_LS_DIR(
          String __1
        , Boolean __2
        , Boolean __3
    ) {
        return quoassignment.jooq.pg_catalog.tables.PgLsDir.PG_LS_DIR.call(
            __1,
            __2,
            __3
        );
    }

    /**
     * Get <code>pg_catalog.pg_ls_dir</code> as a table.
     */
    public static PgLsDir PG_LS_DIR(
          Field<String> __1
        , Field<Boolean> __2
        , Field<Boolean> __3
    ) {
        return quoassignment.jooq.pg_catalog.tables.PgLsDir.PG_LS_DIR.call(
            __1,
            __2,
            __3
        );
    }

    /**
     * The table <code>pg_catalog.pg_ls_logdir</code>.
     */
    public static final PgLsLogdir PG_LS_LOGDIR = PgLsLogdir.PG_LS_LOGDIR;

    /**
     * Call <code>pg_catalog.pg_ls_logdir</code>.
     */
    public static Result<PgLsLogdirRecord> PG_LS_LOGDIR(
          Configuration configuration
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.PgLsLogdir.PG_LS_LOGDIR.call(
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_ls_logdir</code> as a table.
     */
    public static PgLsLogdir PG_LS_LOGDIR() {
        return quoassignment.jooq.pg_catalog.tables.PgLsLogdir.PG_LS_LOGDIR.call(
        );
    }

    /**
     * The table <code>pg_catalog.pg_ls_logicalmapdir</code>.
     */
    public static final PgLsLogicalmapdir PG_LS_LOGICALMAPDIR = PgLsLogicalmapdir.PG_LS_LOGICALMAPDIR;

    /**
     * Call <code>pg_catalog.pg_ls_logicalmapdir</code>.
     */
    public static Result<PgLsLogicalmapdirRecord> PG_LS_LOGICALMAPDIR(
          Configuration configuration
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.PgLsLogicalmapdir.PG_LS_LOGICALMAPDIR.call(
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_ls_logicalmapdir</code> as a table.
     */
    public static PgLsLogicalmapdir PG_LS_LOGICALMAPDIR() {
        return quoassignment.jooq.pg_catalog.tables.PgLsLogicalmapdir.PG_LS_LOGICALMAPDIR.call(
        );
    }

    /**
     * The table <code>pg_catalog.pg_ls_logicalsnapdir</code>.
     */
    public static final PgLsLogicalsnapdir PG_LS_LOGICALSNAPDIR = PgLsLogicalsnapdir.PG_LS_LOGICALSNAPDIR;

    /**
     * Call <code>pg_catalog.pg_ls_logicalsnapdir</code>.
     */
    public static Result<PgLsLogicalsnapdirRecord> PG_LS_LOGICALSNAPDIR(
          Configuration configuration
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.PgLsLogicalsnapdir.PG_LS_LOGICALSNAPDIR.call(
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_ls_logicalsnapdir</code> as a table.
     */
    public static PgLsLogicalsnapdir PG_LS_LOGICALSNAPDIR() {
        return quoassignment.jooq.pg_catalog.tables.PgLsLogicalsnapdir.PG_LS_LOGICALSNAPDIR.call(
        );
    }

    /**
     * The table <code>pg_catalog.pg_ls_replslotdir</code>.
     */
    public static final PgLsReplslotdir PG_LS_REPLSLOTDIR = PgLsReplslotdir.PG_LS_REPLSLOTDIR;

    /**
     * Call <code>pg_catalog.pg_ls_replslotdir</code>.
     */
    public static Result<PgLsReplslotdirRecord> PG_LS_REPLSLOTDIR(
          Configuration configuration
        , String slotName
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.PgLsReplslotdir.PG_LS_REPLSLOTDIR.call(
              slotName
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_ls_replslotdir</code> as a table.
     */
    public static PgLsReplslotdir PG_LS_REPLSLOTDIR(
          String slotName
    ) {
        return quoassignment.jooq.pg_catalog.tables.PgLsReplslotdir.PG_LS_REPLSLOTDIR.call(
            slotName
        );
    }

    /**
     * Get <code>pg_catalog.pg_ls_replslotdir</code> as a table.
     */
    public static PgLsReplslotdir PG_LS_REPLSLOTDIR(
          Field<String> slotName
    ) {
        return quoassignment.jooq.pg_catalog.tables.PgLsReplslotdir.PG_LS_REPLSLOTDIR.call(
            slotName
        );
    }

    /**
     * The table <code>pg_catalog.pg_ls_tmpdir</code>.
     */
    public static final PgLsTmpdir PG_LS_TMPDIR = PgLsTmpdir.PG_LS_TMPDIR;

    /**
     * Call <code>pg_catalog.pg_ls_tmpdir</code>.
     */
    public static Result<PgLsTmpdirRecord> PG_LS_TMPDIR(
          Configuration configuration
        , Long tablespace
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.PgLsTmpdir.PG_LS_TMPDIR.call(
              tablespace
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_ls_tmpdir</code> as a table.
     */
    public static PgLsTmpdir PG_LS_TMPDIR(
          Long tablespace
    ) {
        return quoassignment.jooq.pg_catalog.tables.PgLsTmpdir.PG_LS_TMPDIR.call(
            tablespace
        );
    }

    /**
     * Get <code>pg_catalog.pg_ls_tmpdir</code> as a table.
     */
    public static PgLsTmpdir PG_LS_TMPDIR(
          Field<Long> tablespace
    ) {
        return quoassignment.jooq.pg_catalog.tables.PgLsTmpdir.PG_LS_TMPDIR.call(
            tablespace
        );
    }

    /**
     * The table <code>pg_catalog.pg_ls_waldir</code>.
     */
    public static final PgLsWaldir PG_LS_WALDIR = PgLsWaldir.PG_LS_WALDIR;

    /**
     * Call <code>pg_catalog.pg_ls_waldir</code>.
     */
    public static Result<PgLsWaldirRecord> PG_LS_WALDIR(
          Configuration configuration
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.PgLsWaldir.PG_LS_WALDIR.call(
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_ls_waldir</code> as a table.
     */
    public static PgLsWaldir PG_LS_WALDIR() {
        return quoassignment.jooq.pg_catalog.tables.PgLsWaldir.PG_LS_WALDIR.call(
        );
    }

    /**
     * The table <code>pg_catalog.pg_matviews</code>.
     */
    public static final PgMatviews PG_MATVIEWS = PgMatviews.PG_MATVIEWS;

    /**
     * The table <code>pg_catalog.pg_mcv_list_items</code>.
     */
    public static final PgMcvListItems PG_MCV_LIST_ITEMS = PgMcvListItems.PG_MCV_LIST_ITEMS;

    /**
     * @deprecated Unknown data type. Parameter type or return type is unknown.
     * If this is a qualified, user-defined type, it may have been excluded from
     * code generation. If this is a built-in type, you can define an explicit
     * {@link org.jooq.Binding} to specify how this type should be handled.
     * Deprecation can be turned off using {@literal
     * <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public static Result<PgMcvListItemsRecord> PG_MCV_LIST_ITEMS(
          Configuration configuration
        , Object mcvList
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.PgMcvListItems.PG_MCV_LIST_ITEMS.call(
              mcvList
        )).fetch();
    }

    /**
     * @deprecated Unknown data type. Parameter type or return type is unknown.
     * If this is a qualified, user-defined type, it may have been excluded from
     * code generation. If this is a built-in type, you can define an explicit
     * {@link org.jooq.Binding} to specify how this type should be handled.
     * Deprecation can be turned off using {@literal
     * <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public static PgMcvListItems PG_MCV_LIST_ITEMS(
          Object mcvList
    ) {
        return quoassignment.jooq.pg_catalog.tables.PgMcvListItems.PG_MCV_LIST_ITEMS.call(
            mcvList
        );
    }

    /**
     * @deprecated Unknown data type. Parameter type or return type is unknown.
     * If this is a qualified, user-defined type, it may have been excluded from
     * code generation. If this is a built-in type, you can define an explicit
     * {@link org.jooq.Binding} to specify how this type should be handled.
     * Deprecation can be turned off using {@literal
     * <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public static PgMcvListItems PG_MCV_LIST_ITEMS(
          Field<Object> mcvList
    ) {
        return quoassignment.jooq.pg_catalog.tables.PgMcvListItems.PG_MCV_LIST_ITEMS.call(
            mcvList
        );
    }

    /**
     * The table <code>pg_catalog.pg_namespace</code>.
     */
    public static final PgNamespace PG_NAMESPACE = PgNamespace.PG_NAMESPACE;

    /**
     * The table <code>pg_catalog.pg_opclass</code>.
     */
    public static final PgOpclass PG_OPCLASS = PgOpclass.PG_OPCLASS;

    /**
     * The table <code>pg_catalog.pg_operator</code>.
     */
    public static final PgOperator PG_OPERATOR = PgOperator.PG_OPERATOR;

    /**
     * The table <code>pg_catalog.pg_opfamily</code>.
     */
    public static final PgOpfamily PG_OPFAMILY = PgOpfamily.PG_OPFAMILY;

    /**
     * The table <code>pg_catalog.pg_options_to_table</code>.
     */
    public static final PgOptionsToTable PG_OPTIONS_TO_TABLE = PgOptionsToTable.PG_OPTIONS_TO_TABLE;

    /**
     * Call <code>pg_catalog.pg_options_to_table</code>.
     */
    public static Result<PgOptionsToTableRecord> PG_OPTIONS_TO_TABLE(
          Configuration configuration
        , String[] optionsArray
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.PgOptionsToTable.PG_OPTIONS_TO_TABLE.call(
              optionsArray
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_options_to_table</code> as a table.
     */
    public static PgOptionsToTable PG_OPTIONS_TO_TABLE(
          String[] optionsArray
    ) {
        return quoassignment.jooq.pg_catalog.tables.PgOptionsToTable.PG_OPTIONS_TO_TABLE.call(
            optionsArray
        );
    }

    /**
     * Get <code>pg_catalog.pg_options_to_table</code> as a table.
     */
    public static PgOptionsToTable PG_OPTIONS_TO_TABLE(
          Field<String[]> optionsArray
    ) {
        return quoassignment.jooq.pg_catalog.tables.PgOptionsToTable.PG_OPTIONS_TO_TABLE.call(
            optionsArray
        );
    }

    /**
     * The table <code>pg_catalog.pg_parameter_acl</code>.
     */
    public static final PgParameterAcl PG_PARAMETER_ACL = PgParameterAcl.PG_PARAMETER_ACL;

    /**
     * The table <code>pg_catalog.pg_partition_ancestors</code>.
     */
    public static final PgPartitionAncestors PG_PARTITION_ANCESTORS = PgPartitionAncestors.PG_PARTITION_ANCESTORS;

    /**
     * @deprecated Unknown data type. Parameter type or return type is unknown.
     * If this is a qualified, user-defined type, it may have been excluded from
     * code generation. If this is a built-in type, you can define an explicit
     * {@link org.jooq.Binding} to specify how this type should be handled.
     * Deprecation can be turned off using {@literal
     * <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public static Result<PgPartitionAncestorsRecord> PG_PARTITION_ANCESTORS(
          Configuration configuration
        , Object partitionid
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.PgPartitionAncestors.PG_PARTITION_ANCESTORS.call(
              partitionid
        )).fetch();
    }

    /**
     * @deprecated Unknown data type. Parameter type or return type is unknown.
     * If this is a qualified, user-defined type, it may have been excluded from
     * code generation. If this is a built-in type, you can define an explicit
     * {@link org.jooq.Binding} to specify how this type should be handled.
     * Deprecation can be turned off using {@literal
     * <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public static PgPartitionAncestors PG_PARTITION_ANCESTORS(
          Object partitionid
    ) {
        return quoassignment.jooq.pg_catalog.tables.PgPartitionAncestors.PG_PARTITION_ANCESTORS.call(
            partitionid
        );
    }

    /**
     * @deprecated Unknown data type. Parameter type or return type is unknown.
     * If this is a qualified, user-defined type, it may have been excluded from
     * code generation. If this is a built-in type, you can define an explicit
     * {@link org.jooq.Binding} to specify how this type should be handled.
     * Deprecation can be turned off using {@literal
     * <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public static PgPartitionAncestors PG_PARTITION_ANCESTORS(
          Field<Object> partitionid
    ) {
        return quoassignment.jooq.pg_catalog.tables.PgPartitionAncestors.PG_PARTITION_ANCESTORS.call(
            partitionid
        );
    }

    /**
     * The table <code>pg_catalog.pg_partition_tree</code>.
     */
    public static final PgPartitionTree PG_PARTITION_TREE = PgPartitionTree.PG_PARTITION_TREE;

    /**
     * @deprecated Unknown data type. Parameter type or return type is unknown.
     * If this is a qualified, user-defined type, it may have been excluded from
     * code generation. If this is a built-in type, you can define an explicit
     * {@link org.jooq.Binding} to specify how this type should be handled.
     * Deprecation can be turned off using {@literal
     * <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public static Result<PgPartitionTreeRecord> PG_PARTITION_TREE(
          Configuration configuration
        , Object rootrelid
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.PgPartitionTree.PG_PARTITION_TREE.call(
              rootrelid
        )).fetch();
    }

    /**
     * @deprecated Unknown data type. Parameter type or return type is unknown.
     * If this is a qualified, user-defined type, it may have been excluded from
     * code generation. If this is a built-in type, you can define an explicit
     * {@link org.jooq.Binding} to specify how this type should be handled.
     * Deprecation can be turned off using {@literal
     * <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public static PgPartitionTree PG_PARTITION_TREE(
          Object rootrelid
    ) {
        return quoassignment.jooq.pg_catalog.tables.PgPartitionTree.PG_PARTITION_TREE.call(
            rootrelid
        );
    }

    /**
     * @deprecated Unknown data type. Parameter type or return type is unknown.
     * If this is a qualified, user-defined type, it may have been excluded from
     * code generation. If this is a built-in type, you can define an explicit
     * {@link org.jooq.Binding} to specify how this type should be handled.
     * Deprecation can be turned off using {@literal
     * <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public static PgPartitionTree PG_PARTITION_TREE(
          Field<Object> rootrelid
    ) {
        return quoassignment.jooq.pg_catalog.tables.PgPartitionTree.PG_PARTITION_TREE.call(
            rootrelid
        );
    }

    /**
     * The table <code>pg_catalog.pg_partitioned_table</code>.
     */
    public static final PgPartitionedTable PG_PARTITIONED_TABLE = PgPartitionedTable.PG_PARTITIONED_TABLE;

    /**
     * The table <code>pg_catalog.pg_policies</code>.
     */
    public static final PgPolicies PG_POLICIES = PgPolicies.PG_POLICIES;

    /**
     * The table <code>pg_catalog.pg_policy</code>.
     */
    public static final PgPolicy PG_POLICY = PgPolicy.PG_POLICY;

    /**
     * The table <code>pg_catalog.pg_prepared_statement</code>.
     */
    public static final PgPreparedStatement PG_PREPARED_STATEMENT = PgPreparedStatement.PG_PREPARED_STATEMENT;

    /**
     * Call <code>pg_catalog.pg_prepared_statement</code>.
     */
    public static Result<PgPreparedStatementRecord> PG_PREPARED_STATEMENT(
          Configuration configuration
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.PgPreparedStatement.PG_PREPARED_STATEMENT.call(
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_prepared_statement</code> as a table.
     */
    public static PgPreparedStatement PG_PREPARED_STATEMENT() {
        return quoassignment.jooq.pg_catalog.tables.PgPreparedStatement.PG_PREPARED_STATEMENT.call(
        );
    }

    /**
     * The table <code>pg_catalog.pg_prepared_statements</code>.
     */
    public static final PgPreparedStatements PG_PREPARED_STATEMENTS = PgPreparedStatements.PG_PREPARED_STATEMENTS;

    /**
     * The table <code>pg_catalog.pg_prepared_xact</code>.
     */
    public static final PgPreparedXact PG_PREPARED_XACT = PgPreparedXact.PG_PREPARED_XACT;

    /**
     * Call <code>pg_catalog.pg_prepared_xact</code>.
     */
    public static Result<PgPreparedXactRecord> PG_PREPARED_XACT(
          Configuration configuration
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.PgPreparedXact.PG_PREPARED_XACT.call(
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_prepared_xact</code> as a table.
     */
    public static PgPreparedXact PG_PREPARED_XACT() {
        return quoassignment.jooq.pg_catalog.tables.PgPreparedXact.PG_PREPARED_XACT.call(
        );
    }

    /**
     * The table <code>pg_catalog.pg_prepared_xacts</code>.
     */
    public static final PgPreparedXacts PG_PREPARED_XACTS = PgPreparedXacts.PG_PREPARED_XACTS;

    /**
     * The table <code>pg_catalog.pg_proc</code>.
     */
    public static final PgProc PG_PROC = PgProc.PG_PROC;

    /**
     * The table <code>pg_catalog.pg_publication</code>.
     */
    public static final PgPublication PG_PUBLICATION = PgPublication.PG_PUBLICATION;

    /**
     * The table <code>pg_catalog.pg_publication_namespace</code>.
     */
    public static final PgPublicationNamespace PG_PUBLICATION_NAMESPACE = PgPublicationNamespace.PG_PUBLICATION_NAMESPACE;

    /**
     * The table <code>pg_catalog.pg_publication_rel</code>.
     */
    public static final PgPublicationRel PG_PUBLICATION_REL = PgPublicationRel.PG_PUBLICATION_REL;

    /**
     * The table <code>pg_catalog.pg_publication_tables</code>.
     */
    public static final PgPublicationTables PG_PUBLICATION_TABLES = PgPublicationTables.PG_PUBLICATION_TABLES;

    /**
     * The table <code>pg_catalog.pg_range</code>.
     */
    public static final PgRange PG_RANGE = PgRange.PG_RANGE;

    /**
     * The table <code>pg_catalog.pg_replication_origin</code>.
     */
    public static final PgReplicationOrigin PG_REPLICATION_ORIGIN = PgReplicationOrigin.PG_REPLICATION_ORIGIN;

    /**
     * The table <code>pg_catalog.pg_replication_origin_status</code>.
     */
    public static final PgReplicationOriginStatus PG_REPLICATION_ORIGIN_STATUS = PgReplicationOriginStatus.PG_REPLICATION_ORIGIN_STATUS;

    /**
     * The table <code>pg_catalog.pg_replication_slots</code>.
     */
    public static final PgReplicationSlots PG_REPLICATION_SLOTS = PgReplicationSlots.PG_REPLICATION_SLOTS;

    /**
     * The table <code>pg_catalog.pg_rewrite</code>.
     */
    public static final PgRewrite PG_REWRITE = PgRewrite.PG_REWRITE;

    /**
     * The table <code>pg_catalog.pg_roles</code>.
     */
    public static final PgRoles PG_ROLES = PgRoles.PG_ROLES;

    /**
     * The table <code>pg_catalog.pg_rules</code>.
     */
    public static final PgRules PG_RULES = PgRules.PG_RULES;

    /**
     * The table <code>pg_catalog.pg_seclabel</code>.
     */
    public static final PgSeclabel PG_SECLABEL = PgSeclabel.PG_SECLABEL;

    /**
     * The table <code>pg_catalog.pg_seclabels</code>.
     */
    public static final PgSeclabels PG_SECLABELS = PgSeclabels.PG_SECLABELS;

    /**
     * The table <code>pg_catalog.pg_sequence</code>.
     */
    public static final PgSequence PG_SEQUENCE = PgSequence.PG_SEQUENCE;

    /**
     * The table <code>pg_catalog.pg_sequences</code>.
     */
    public static final PgSequences PG_SEQUENCES = PgSequences.PG_SEQUENCES;

    /**
     * The table <code>pg_catalog.pg_settings</code>.
     */
    public static final PgSettings PG_SETTINGS = PgSettings.PG_SETTINGS;

    /**
     * The table <code>pg_catalog.pg_shadow</code>.
     */
    public static final PgShadow PG_SHADOW = PgShadow.PG_SHADOW;

    /**
     * The table <code>pg_catalog.pg_shdepend</code>.
     */
    public static final PgShdepend PG_SHDEPEND = PgShdepend.PG_SHDEPEND;

    /**
     * The table <code>pg_catalog.pg_shdescription</code>.
     */
    public static final PgShdescription PG_SHDESCRIPTION = PgShdescription.PG_SHDESCRIPTION;

    /**
     * The table <code>pg_catalog.pg_shmem_allocations</code>.
     */
    public static final PgShmemAllocations PG_SHMEM_ALLOCATIONS = PgShmemAllocations.PG_SHMEM_ALLOCATIONS;

    /**
     * The table <code>pg_catalog.pg_show_all_file_settings</code>.
     */
    public static final PgShowAllFileSettings PG_SHOW_ALL_FILE_SETTINGS = PgShowAllFileSettings.PG_SHOW_ALL_FILE_SETTINGS;

    /**
     * Call <code>pg_catalog.pg_show_all_file_settings</code>.
     */
    public static Result<PgShowAllFileSettingsRecord> PG_SHOW_ALL_FILE_SETTINGS(
          Configuration configuration
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.PgShowAllFileSettings.PG_SHOW_ALL_FILE_SETTINGS.call(
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_show_all_file_settings</code> as a table.
     */
    public static PgShowAllFileSettings PG_SHOW_ALL_FILE_SETTINGS() {
        return quoassignment.jooq.pg_catalog.tables.PgShowAllFileSettings.PG_SHOW_ALL_FILE_SETTINGS.call(
        );
    }

    /**
     * The table <code>pg_catalog.pg_show_all_settings</code>.
     */
    public static final PgShowAllSettings PG_SHOW_ALL_SETTINGS = PgShowAllSettings.PG_SHOW_ALL_SETTINGS;

    /**
     * Call <code>pg_catalog.pg_show_all_settings</code>.
     */
    public static Result<PgShowAllSettingsRecord> PG_SHOW_ALL_SETTINGS(
          Configuration configuration
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.PgShowAllSettings.PG_SHOW_ALL_SETTINGS.call(
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_show_all_settings</code> as a table.
     */
    public static PgShowAllSettings PG_SHOW_ALL_SETTINGS() {
        return quoassignment.jooq.pg_catalog.tables.PgShowAllSettings.PG_SHOW_ALL_SETTINGS.call(
        );
    }

    /**
     * The table <code>pg_catalog.pg_show_replication_origin_status</code>.
     */
    public static final PgShowReplicationOriginStatus PG_SHOW_REPLICATION_ORIGIN_STATUS = PgShowReplicationOriginStatus.PG_SHOW_REPLICATION_ORIGIN_STATUS;

    /**
     * Call <code>pg_catalog.pg_show_replication_origin_status</code>.
     */
    public static Result<PgShowReplicationOriginStatusRecord> PG_SHOW_REPLICATION_ORIGIN_STATUS(
          Configuration configuration
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.PgShowReplicationOriginStatus.PG_SHOW_REPLICATION_ORIGIN_STATUS.call(
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_show_replication_origin_status</code> as a table.
     */
    public static PgShowReplicationOriginStatus PG_SHOW_REPLICATION_ORIGIN_STATUS() {
        return quoassignment.jooq.pg_catalog.tables.PgShowReplicationOriginStatus.PG_SHOW_REPLICATION_ORIGIN_STATUS.call(
        );
    }

    /**
     * The table <code>pg_catalog.pg_shseclabel</code>.
     */
    public static final PgShseclabel PG_SHSECLABEL = PgShseclabel.PG_SHSECLABEL;

    /**
     * The table <code>pg_catalog.pg_snapshot_xip</code>.
     */
    public static final PgSnapshotXip PG_SNAPSHOT_XIP = PgSnapshotXip.PG_SNAPSHOT_XIP;

    /**
     * @deprecated Unknown data type. Parameter type or return type is unknown.
     * If this is a qualified, user-defined type, it may have been excluded from
     * code generation. If this is a built-in type, you can define an explicit
     * {@link org.jooq.Binding} to specify how this type should be handled.
     * Deprecation can be turned off using {@literal
     * <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public static Result<PgSnapshotXipRecord> PG_SNAPSHOT_XIP(
          Configuration configuration
        , Object __1
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.PgSnapshotXip.PG_SNAPSHOT_XIP.call(
              __1
        )).fetch();
    }

    /**
     * @deprecated Unknown data type. Parameter type or return type is unknown.
     * If this is a qualified, user-defined type, it may have been excluded from
     * code generation. If this is a built-in type, you can define an explicit
     * {@link org.jooq.Binding} to specify how this type should be handled.
     * Deprecation can be turned off using {@literal
     * <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public static PgSnapshotXip PG_SNAPSHOT_XIP(
          Object __1
    ) {
        return quoassignment.jooq.pg_catalog.tables.PgSnapshotXip.PG_SNAPSHOT_XIP.call(
            __1
        );
    }

    /**
     * @deprecated Unknown data type. Parameter type or return type is unknown.
     * If this is a qualified, user-defined type, it may have been excluded from
     * code generation. If this is a built-in type, you can define an explicit
     * {@link org.jooq.Binding} to specify how this type should be handled.
     * Deprecation can be turned off using {@literal
     * <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public static PgSnapshotXip PG_SNAPSHOT_XIP(
          Field<Object> __1
    ) {
        return quoassignment.jooq.pg_catalog.tables.PgSnapshotXip.PG_SNAPSHOT_XIP.call(
            __1
        );
    }

    /**
     * The table <code>pg_catalog.pg_stat_activity</code>.
     */
    public static final PgStatActivity PG_STAT_ACTIVITY = PgStatActivity.PG_STAT_ACTIVITY;

    /**
     * The table <code>pg_catalog.pg_stat_all_indexes</code>.
     */
    public static final PgStatAllIndexes PG_STAT_ALL_INDEXES = PgStatAllIndexes.PG_STAT_ALL_INDEXES;

    /**
     * The table <code>pg_catalog.pg_stat_all_tables</code>.
     */
    public static final PgStatAllTables PG_STAT_ALL_TABLES = PgStatAllTables.PG_STAT_ALL_TABLES;

    /**
     * The table <code>pg_catalog.pg_stat_archiver</code>.
     */
    public static final PgStatArchiver PG_STAT_ARCHIVER = PgStatArchiver.PG_STAT_ARCHIVER;

    /**
     * The table <code>pg_catalog.pg_stat_bgwriter</code>.
     */
    public static final PgStatBgwriter PG_STAT_BGWRITER = PgStatBgwriter.PG_STAT_BGWRITER;

    /**
     * The table <code>pg_catalog.pg_stat_checkpointer</code>.
     */
    public static final PgStatCheckpointer PG_STAT_CHECKPOINTER = PgStatCheckpointer.PG_STAT_CHECKPOINTER;

    /**
     * The table <code>pg_catalog.pg_stat_database</code>.
     */
    public static final PgStatDatabase PG_STAT_DATABASE = PgStatDatabase.PG_STAT_DATABASE;

    /**
     * The table <code>pg_catalog.pg_stat_database_conflicts</code>.
     */
    public static final PgStatDatabaseConflicts PG_STAT_DATABASE_CONFLICTS = PgStatDatabaseConflicts.PG_STAT_DATABASE_CONFLICTS;

    /**
     * The table <code>pg_catalog.pg_stat_get_activity</code>.
     */
    public static final PgStatGetActivity PG_STAT_GET_ACTIVITY = PgStatGetActivity.PG_STAT_GET_ACTIVITY;

    /**
     * Call <code>pg_catalog.pg_stat_get_activity</code>.
     */
    public static Result<PgStatGetActivityRecord> PG_STAT_GET_ACTIVITY(
          Configuration configuration
        , Integer pid
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.PgStatGetActivity.PG_STAT_GET_ACTIVITY.call(
              pid
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_stat_get_activity</code> as a table.
     */
    public static PgStatGetActivity PG_STAT_GET_ACTIVITY(
          Integer pid
    ) {
        return quoassignment.jooq.pg_catalog.tables.PgStatGetActivity.PG_STAT_GET_ACTIVITY.call(
            pid
        );
    }

    /**
     * Get <code>pg_catalog.pg_stat_get_activity</code> as a table.
     */
    public static PgStatGetActivity PG_STAT_GET_ACTIVITY(
          Field<Integer> pid
    ) {
        return quoassignment.jooq.pg_catalog.tables.PgStatGetActivity.PG_STAT_GET_ACTIVITY.call(
            pid
        );
    }

    /**
     * The table <code>pg_catalog.pg_stat_get_backend_idset</code>.
     */
    public static final PgStatGetBackendIdset PG_STAT_GET_BACKEND_IDSET = PgStatGetBackendIdset.PG_STAT_GET_BACKEND_IDSET;

    /**
     * Call <code>pg_catalog.pg_stat_get_backend_idset</code>.
     */
    public static Result<PgStatGetBackendIdsetRecord> PG_STAT_GET_BACKEND_IDSET(
          Configuration configuration
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.PgStatGetBackendIdset.PG_STAT_GET_BACKEND_IDSET.call(
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_stat_get_backend_idset</code> as a table.
     */
    public static PgStatGetBackendIdset PG_STAT_GET_BACKEND_IDSET() {
        return quoassignment.jooq.pg_catalog.tables.PgStatGetBackendIdset.PG_STAT_GET_BACKEND_IDSET.call(
        );
    }

    /**
     * The table <code>pg_catalog.pg_stat_get_io</code>.
     */
    public static final PgStatGetIo PG_STAT_GET_IO = PgStatGetIo.PG_STAT_GET_IO;

    /**
     * Call <code>pg_catalog.pg_stat_get_io</code>.
     */
    public static Result<PgStatGetIoRecord> PG_STAT_GET_IO(
          Configuration configuration
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.PgStatGetIo.PG_STAT_GET_IO.call(
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_stat_get_io</code> as a table.
     */
    public static PgStatGetIo PG_STAT_GET_IO() {
        return quoassignment.jooq.pg_catalog.tables.PgStatGetIo.PG_STAT_GET_IO.call(
        );
    }

    /**
     * The table <code>pg_catalog.pg_stat_get_progress_info</code>.
     */
    public static final PgStatGetProgressInfo PG_STAT_GET_PROGRESS_INFO = PgStatGetProgressInfo.PG_STAT_GET_PROGRESS_INFO;

    /**
     * Call <code>pg_catalog.pg_stat_get_progress_info</code>.
     */
    public static Result<PgStatGetProgressInfoRecord> PG_STAT_GET_PROGRESS_INFO(
          Configuration configuration
        , String cmdtype
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.PgStatGetProgressInfo.PG_STAT_GET_PROGRESS_INFO.call(
              cmdtype
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_stat_get_progress_info</code> as a table.
     */
    public static PgStatGetProgressInfo PG_STAT_GET_PROGRESS_INFO(
          String cmdtype
    ) {
        return quoassignment.jooq.pg_catalog.tables.PgStatGetProgressInfo.PG_STAT_GET_PROGRESS_INFO.call(
            cmdtype
        );
    }

    /**
     * Get <code>pg_catalog.pg_stat_get_progress_info</code> as a table.
     */
    public static PgStatGetProgressInfo PG_STAT_GET_PROGRESS_INFO(
          Field<String> cmdtype
    ) {
        return quoassignment.jooq.pg_catalog.tables.PgStatGetProgressInfo.PG_STAT_GET_PROGRESS_INFO.call(
            cmdtype
        );
    }

    /**
     * The table <code>pg_catalog.pg_stat_get_recovery_prefetch</code>.
     */
    public static final PgStatGetRecoveryPrefetch PG_STAT_GET_RECOVERY_PREFETCH = PgStatGetRecoveryPrefetch.PG_STAT_GET_RECOVERY_PREFETCH;

    /**
     * Call <code>pg_catalog.pg_stat_get_recovery_prefetch</code>.
     */
    public static Result<PgStatGetRecoveryPrefetchRecord> PG_STAT_GET_RECOVERY_PREFETCH(
          Configuration configuration
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.PgStatGetRecoveryPrefetch.PG_STAT_GET_RECOVERY_PREFETCH.call(
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_stat_get_recovery_prefetch</code> as a table.
     */
    public static PgStatGetRecoveryPrefetch PG_STAT_GET_RECOVERY_PREFETCH() {
        return quoassignment.jooq.pg_catalog.tables.PgStatGetRecoveryPrefetch.PG_STAT_GET_RECOVERY_PREFETCH.call(
        );
    }

    /**
     * The table <code>pg_catalog.pg_stat_get_slru</code>.
     */
    public static final PgStatGetSlru PG_STAT_GET_SLRU = PgStatGetSlru.PG_STAT_GET_SLRU;

    /**
     * Call <code>pg_catalog.pg_stat_get_slru</code>.
     */
    public static Result<PgStatGetSlruRecord> PG_STAT_GET_SLRU(
          Configuration configuration
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.PgStatGetSlru.PG_STAT_GET_SLRU.call(
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_stat_get_slru</code> as a table.
     */
    public static PgStatGetSlru PG_STAT_GET_SLRU() {
        return quoassignment.jooq.pg_catalog.tables.PgStatGetSlru.PG_STAT_GET_SLRU.call(
        );
    }

    /**
     * The table <code>pg_catalog.pg_stat_get_subscription</code>.
     */
    public static final PgStatGetSubscription PG_STAT_GET_SUBSCRIPTION = PgStatGetSubscription.PG_STAT_GET_SUBSCRIPTION;

    /**
     * Call <code>pg_catalog.pg_stat_get_subscription</code>.
     */
    public static Result<PgStatGetSubscriptionRecord> PG_STAT_GET_SUBSCRIPTION(
          Configuration configuration
        , Long subid
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.PgStatGetSubscription.PG_STAT_GET_SUBSCRIPTION.call(
              subid
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_stat_get_subscription</code> as a table.
     */
    public static PgStatGetSubscription PG_STAT_GET_SUBSCRIPTION(
          Long subid
    ) {
        return quoassignment.jooq.pg_catalog.tables.PgStatGetSubscription.PG_STAT_GET_SUBSCRIPTION.call(
            subid
        );
    }

    /**
     * Get <code>pg_catalog.pg_stat_get_subscription</code> as a table.
     */
    public static PgStatGetSubscription PG_STAT_GET_SUBSCRIPTION(
          Field<Long> subid
    ) {
        return quoassignment.jooq.pg_catalog.tables.PgStatGetSubscription.PG_STAT_GET_SUBSCRIPTION.call(
            subid
        );
    }

    /**
     * The table <code>pg_catalog.pg_stat_get_wal_senders</code>.
     */
    public static final PgStatGetWalSenders PG_STAT_GET_WAL_SENDERS = PgStatGetWalSenders.PG_STAT_GET_WAL_SENDERS;

    /**
     * Call <code>pg_catalog.pg_stat_get_wal_senders</code>.
     */
    public static Result<PgStatGetWalSendersRecord> PG_STAT_GET_WAL_SENDERS(
          Configuration configuration
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.PgStatGetWalSenders.PG_STAT_GET_WAL_SENDERS.call(
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_stat_get_wal_senders</code> as a table.
     */
    public static PgStatGetWalSenders PG_STAT_GET_WAL_SENDERS() {
        return quoassignment.jooq.pg_catalog.tables.PgStatGetWalSenders.PG_STAT_GET_WAL_SENDERS.call(
        );
    }

    /**
     * The table <code>pg_catalog.pg_stat_gssapi</code>.
     */
    public static final PgStatGssapi PG_STAT_GSSAPI = PgStatGssapi.PG_STAT_GSSAPI;

    /**
     * The table <code>pg_catalog.pg_stat_io</code>.
     */
    public static final PgStatIo PG_STAT_IO = PgStatIo.PG_STAT_IO;

    /**
     * The table <code>pg_catalog.pg_stat_progress_analyze</code>.
     */
    public static final PgStatProgressAnalyze PG_STAT_PROGRESS_ANALYZE = PgStatProgressAnalyze.PG_STAT_PROGRESS_ANALYZE;

    /**
     * The table <code>pg_catalog.pg_stat_progress_basebackup</code>.
     */
    public static final PgStatProgressBasebackup PG_STAT_PROGRESS_BASEBACKUP = PgStatProgressBasebackup.PG_STAT_PROGRESS_BASEBACKUP;

    /**
     * The table <code>pg_catalog.pg_stat_progress_cluster</code>.
     */
    public static final PgStatProgressCluster PG_STAT_PROGRESS_CLUSTER = PgStatProgressCluster.PG_STAT_PROGRESS_CLUSTER;

    /**
     * The table <code>pg_catalog.pg_stat_progress_copy</code>.
     */
    public static final PgStatProgressCopy PG_STAT_PROGRESS_COPY = PgStatProgressCopy.PG_STAT_PROGRESS_COPY;

    /**
     * The table <code>pg_catalog.pg_stat_progress_create_index</code>.
     */
    public static final PgStatProgressCreateIndex PG_STAT_PROGRESS_CREATE_INDEX = PgStatProgressCreateIndex.PG_STAT_PROGRESS_CREATE_INDEX;

    /**
     * The table <code>pg_catalog.pg_stat_progress_vacuum</code>.
     */
    public static final PgStatProgressVacuum PG_STAT_PROGRESS_VACUUM = PgStatProgressVacuum.PG_STAT_PROGRESS_VACUUM;

    /**
     * The table <code>pg_catalog.pg_stat_recovery_prefetch</code>.
     */
    public static final PgStatRecoveryPrefetch PG_STAT_RECOVERY_PREFETCH = PgStatRecoveryPrefetch.PG_STAT_RECOVERY_PREFETCH;

    /**
     * The table <code>pg_catalog.pg_stat_replication</code>.
     */
    public static final PgStatReplication PG_STAT_REPLICATION = PgStatReplication.PG_STAT_REPLICATION;

    /**
     * The table <code>pg_catalog.pg_stat_replication_slots</code>.
     */
    public static final PgStatReplicationSlots PG_STAT_REPLICATION_SLOTS = PgStatReplicationSlots.PG_STAT_REPLICATION_SLOTS;

    /**
     * The table <code>pg_catalog.pg_stat_slru</code>.
     */
    public static final PgStatSlru PG_STAT_SLRU = PgStatSlru.PG_STAT_SLRU;

    /**
     * The table <code>pg_catalog.pg_stat_ssl</code>.
     */
    public static final PgStatSsl PG_STAT_SSL = PgStatSsl.PG_STAT_SSL;

    /**
     * The table <code>pg_catalog.pg_stat_subscription</code>.
     */
    public static final PgStatSubscription PG_STAT_SUBSCRIPTION = PgStatSubscription.PG_STAT_SUBSCRIPTION;

    /**
     * The table <code>pg_catalog.pg_stat_subscription_stats</code>.
     */
    public static final PgStatSubscriptionStats PG_STAT_SUBSCRIPTION_STATS = PgStatSubscriptionStats.PG_STAT_SUBSCRIPTION_STATS;

    /**
     * The table <code>pg_catalog.pg_stat_sys_indexes</code>.
     */
    public static final PgStatSysIndexes PG_STAT_SYS_INDEXES = PgStatSysIndexes.PG_STAT_SYS_INDEXES;

    /**
     * The table <code>pg_catalog.pg_stat_sys_tables</code>.
     */
    public static final PgStatSysTables PG_STAT_SYS_TABLES = PgStatSysTables.PG_STAT_SYS_TABLES;

    /**
     * The table <code>pg_catalog.pg_stat_user_functions</code>.
     */
    public static final PgStatUserFunctions PG_STAT_USER_FUNCTIONS = PgStatUserFunctions.PG_STAT_USER_FUNCTIONS;

    /**
     * The table <code>pg_catalog.pg_stat_user_indexes</code>.
     */
    public static final PgStatUserIndexes PG_STAT_USER_INDEXES = PgStatUserIndexes.PG_STAT_USER_INDEXES;

    /**
     * The table <code>pg_catalog.pg_stat_user_tables</code>.
     */
    public static final PgStatUserTables PG_STAT_USER_TABLES = PgStatUserTables.PG_STAT_USER_TABLES;

    /**
     * The table <code>pg_catalog.pg_stat_wal</code>.
     */
    public static final PgStatWal PG_STAT_WAL = PgStatWal.PG_STAT_WAL;

    /**
     * The table <code>pg_catalog.pg_stat_wal_receiver</code>.
     */
    public static final PgStatWalReceiver PG_STAT_WAL_RECEIVER = PgStatWalReceiver.PG_STAT_WAL_RECEIVER;

    /**
     * The table <code>pg_catalog.pg_stat_xact_all_tables</code>.
     */
    public static final PgStatXactAllTables PG_STAT_XACT_ALL_TABLES = PgStatXactAllTables.PG_STAT_XACT_ALL_TABLES;

    /**
     * The table <code>pg_catalog.pg_stat_xact_sys_tables</code>.
     */
    public static final PgStatXactSysTables PG_STAT_XACT_SYS_TABLES = PgStatXactSysTables.PG_STAT_XACT_SYS_TABLES;

    /**
     * The table <code>pg_catalog.pg_stat_xact_user_functions</code>.
     */
    public static final PgStatXactUserFunctions PG_STAT_XACT_USER_FUNCTIONS = PgStatXactUserFunctions.PG_STAT_XACT_USER_FUNCTIONS;

    /**
     * The table <code>pg_catalog.pg_stat_xact_user_tables</code>.
     */
    public static final PgStatXactUserTables PG_STAT_XACT_USER_TABLES = PgStatXactUserTables.PG_STAT_XACT_USER_TABLES;

    /**
     * The table <code>pg_catalog.pg_statio_all_indexes</code>.
     */
    public static final PgStatioAllIndexes PG_STATIO_ALL_INDEXES = PgStatioAllIndexes.PG_STATIO_ALL_INDEXES;

    /**
     * The table <code>pg_catalog.pg_statio_all_sequences</code>.
     */
    public static final PgStatioAllSequences PG_STATIO_ALL_SEQUENCES = PgStatioAllSequences.PG_STATIO_ALL_SEQUENCES;

    /**
     * The table <code>pg_catalog.pg_statio_all_tables</code>.
     */
    public static final PgStatioAllTables PG_STATIO_ALL_TABLES = PgStatioAllTables.PG_STATIO_ALL_TABLES;

    /**
     * The table <code>pg_catalog.pg_statio_sys_indexes</code>.
     */
    public static final PgStatioSysIndexes PG_STATIO_SYS_INDEXES = PgStatioSysIndexes.PG_STATIO_SYS_INDEXES;

    /**
     * The table <code>pg_catalog.pg_statio_sys_sequences</code>.
     */
    public static final PgStatioSysSequences PG_STATIO_SYS_SEQUENCES = PgStatioSysSequences.PG_STATIO_SYS_SEQUENCES;

    /**
     * The table <code>pg_catalog.pg_statio_sys_tables</code>.
     */
    public static final PgStatioSysTables PG_STATIO_SYS_TABLES = PgStatioSysTables.PG_STATIO_SYS_TABLES;

    /**
     * The table <code>pg_catalog.pg_statio_user_indexes</code>.
     */
    public static final PgStatioUserIndexes PG_STATIO_USER_INDEXES = PgStatioUserIndexes.PG_STATIO_USER_INDEXES;

    /**
     * The table <code>pg_catalog.pg_statio_user_sequences</code>.
     */
    public static final PgStatioUserSequences PG_STATIO_USER_SEQUENCES = PgStatioUserSequences.PG_STATIO_USER_SEQUENCES;

    /**
     * The table <code>pg_catalog.pg_statio_user_tables</code>.
     */
    public static final PgStatioUserTables PG_STATIO_USER_TABLES = PgStatioUserTables.PG_STATIO_USER_TABLES;

    /**
     * The table <code>pg_catalog.pg_statistic</code>.
     */
    public static final PgStatistic PG_STATISTIC = PgStatistic.PG_STATISTIC;

    /**
     * The table <code>pg_catalog.pg_statistic_ext</code>.
     */
    public static final PgStatisticExt PG_STATISTIC_EXT = PgStatisticExt.PG_STATISTIC_EXT;

    /**
     * The table <code>pg_catalog.pg_statistic_ext_data</code>.
     */
    public static final PgStatisticExtData PG_STATISTIC_EXT_DATA = PgStatisticExtData.PG_STATISTIC_EXT_DATA;

    /**
     * The table <code>pg_catalog.pg_stats</code>.
     */
    public static final PgStats PG_STATS = PgStats.PG_STATS;

    /**
     * The table <code>pg_catalog.pg_stats_ext</code>.
     */
    public static final PgStatsExt PG_STATS_EXT = PgStatsExt.PG_STATS_EXT;

    /**
     * The table <code>pg_catalog.pg_stats_ext_exprs</code>.
     */
    public static final PgStatsExtExprs PG_STATS_EXT_EXPRS = PgStatsExtExprs.PG_STATS_EXT_EXPRS;

    /**
     * The table <code>pg_catalog.pg_subscription</code>.
     */
    public static final PgSubscription PG_SUBSCRIPTION = PgSubscription.PG_SUBSCRIPTION;

    /**
     * The table <code>pg_catalog.pg_subscription_rel</code>.
     */
    public static final PgSubscriptionRel PG_SUBSCRIPTION_REL = PgSubscriptionRel.PG_SUBSCRIPTION_REL;

    /**
     * The table <code>pg_catalog.pg_tables</code>.
     */
    public static final PgTables PG_TABLES = PgTables.PG_TABLES;

    /**
     * The table <code>pg_catalog.pg_tablespace</code>.
     */
    public static final PgTablespace PG_TABLESPACE = PgTablespace.PG_TABLESPACE;

    /**
     * The table <code>pg_catalog.pg_tablespace_databases</code>.
     */
    public static final PgTablespaceDatabases PG_TABLESPACE_DATABASES = PgTablespaceDatabases.PG_TABLESPACE_DATABASES;

    /**
     * Call <code>pg_catalog.pg_tablespace_databases</code>.
     */
    public static Result<PgTablespaceDatabasesRecord> PG_TABLESPACE_DATABASES(
          Configuration configuration
        , Long __1
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.PgTablespaceDatabases.PG_TABLESPACE_DATABASES.call(
              __1
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_tablespace_databases</code> as a table.
     */
    public static PgTablespaceDatabases PG_TABLESPACE_DATABASES(
          Long __1
    ) {
        return quoassignment.jooq.pg_catalog.tables.PgTablespaceDatabases.PG_TABLESPACE_DATABASES.call(
            __1
        );
    }

    /**
     * Get <code>pg_catalog.pg_tablespace_databases</code> as a table.
     */
    public static PgTablespaceDatabases PG_TABLESPACE_DATABASES(
          Field<Long> __1
    ) {
        return quoassignment.jooq.pg_catalog.tables.PgTablespaceDatabases.PG_TABLESPACE_DATABASES.call(
            __1
        );
    }

    /**
     * The table <code>pg_catalog.pg_timezone_abbrevs</code>.
     */
    public static final PgTimezoneAbbrevs PG_TIMEZONE_ABBREVS = PgTimezoneAbbrevs.PG_TIMEZONE_ABBREVS;

    /**
     * Call <code>pg_catalog.pg_timezone_abbrevs</code>.
     */
    public static Result<PgTimezoneAbbrevsRecord> PG_TIMEZONE_ABBREVS(
          Configuration configuration
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.PgTimezoneAbbrevs.PG_TIMEZONE_ABBREVS.call(
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_timezone_abbrevs</code> as a table.
     */
    public static PgTimezoneAbbrevs PG_TIMEZONE_ABBREVS() {
        return quoassignment.jooq.pg_catalog.tables.PgTimezoneAbbrevs.PG_TIMEZONE_ABBREVS.call(
        );
    }

    /**
     * The table <code>pg_catalog.pg_timezone_names</code>.
     */
    public static final PgTimezoneNames PG_TIMEZONE_NAMES = PgTimezoneNames.PG_TIMEZONE_NAMES;

    /**
     * Call <code>pg_catalog.pg_timezone_names</code>.
     */
    public static Result<PgTimezoneNamesRecord> PG_TIMEZONE_NAMES(
          Configuration configuration
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.PgTimezoneNames.PG_TIMEZONE_NAMES.call(
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_timezone_names</code> as a table.
     */
    public static PgTimezoneNames PG_TIMEZONE_NAMES() {
        return quoassignment.jooq.pg_catalog.tables.PgTimezoneNames.PG_TIMEZONE_NAMES.call(
        );
    }

    /**
     * The table <code>pg_catalog.pg_transform</code>.
     */
    public static final PgTransform PG_TRANSFORM = PgTransform.PG_TRANSFORM;

    /**
     * The table <code>pg_catalog.pg_trigger</code>.
     */
    public static final PgTrigger PG_TRIGGER = PgTrigger.PG_TRIGGER;

    /**
     * The table <code>pg_catalog.pg_ts_config</code>.
     */
    public static final PgTsConfig PG_TS_CONFIG = PgTsConfig.PG_TS_CONFIG;

    /**
     * The table <code>pg_catalog.pg_ts_config_map</code>.
     */
    public static final PgTsConfigMap PG_TS_CONFIG_MAP = PgTsConfigMap.PG_TS_CONFIG_MAP;

    /**
     * The table <code>pg_catalog.pg_ts_dict</code>.
     */
    public static final PgTsDict PG_TS_DICT = PgTsDict.PG_TS_DICT;

    /**
     * The table <code>pg_catalog.pg_ts_parser</code>.
     */
    public static final PgTsParser PG_TS_PARSER = PgTsParser.PG_TS_PARSER;

    /**
     * The table <code>pg_catalog.pg_ts_template</code>.
     */
    public static final PgTsTemplate PG_TS_TEMPLATE = PgTsTemplate.PG_TS_TEMPLATE;

    /**
     * The table <code>pg_catalog.pg_type</code>.
     */
    public static final PgType PG_TYPE = PgType.PG_TYPE;

    /**
     * The table <code>pg_catalog.pg_user</code>.
     */
    public static final PgUser PG_USER = PgUser.PG_USER;

    /**
     * The table <code>pg_catalog.pg_user_mapping</code>.
     */
    public static final PgUserMapping PG_USER_MAPPING = PgUserMapping.PG_USER_MAPPING;

    /**
     * The table <code>pg_catalog.pg_user_mappings</code>.
     */
    public static final PgUserMappings PG_USER_MAPPINGS = PgUserMappings.PG_USER_MAPPINGS;

    /**
     * The table <code>pg_catalog.pg_views</code>.
     */
    public static final PgViews PG_VIEWS = PgViews.PG_VIEWS;

    /**
     * The table <code>pg_catalog.pg_wait_events</code>.
     */
    public static final PgWaitEvents PG_WAIT_EVENTS = PgWaitEvents.PG_WAIT_EVENTS;

    /**
     * The table <code>pg_catalog.pg_wal_summary_contents</code>.
     */
    public static final PgWalSummaryContents PG_WAL_SUMMARY_CONTENTS = PgWalSummaryContents.PG_WAL_SUMMARY_CONTENTS;

    /**
     * @deprecated Unknown data type. Parameter type or return type is unknown.
     * If this is a qualified, user-defined type, it may have been excluded from
     * code generation. If this is a built-in type, you can define an explicit
     * {@link org.jooq.Binding} to specify how this type should be handled.
     * Deprecation can be turned off using {@literal
     * <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public static Result<PgWalSummaryContentsRecord> PG_WAL_SUMMARY_CONTENTS(
          Configuration configuration
        , Long tli
        , Object startLsn
        , Object endLsn
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.PgWalSummaryContents.PG_WAL_SUMMARY_CONTENTS.call(
              tli
            , startLsn
            , endLsn
        )).fetch();
    }

    /**
     * @deprecated Unknown data type. Parameter type or return type is unknown.
     * If this is a qualified, user-defined type, it may have been excluded from
     * code generation. If this is a built-in type, you can define an explicit
     * {@link org.jooq.Binding} to specify how this type should be handled.
     * Deprecation can be turned off using {@literal
     * <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public static PgWalSummaryContents PG_WAL_SUMMARY_CONTENTS(
          Long tli
        , Object startLsn
        , Object endLsn
    ) {
        return quoassignment.jooq.pg_catalog.tables.PgWalSummaryContents.PG_WAL_SUMMARY_CONTENTS.call(
            tli,
            startLsn,
            endLsn
        );
    }

    /**
     * @deprecated Unknown data type. Parameter type or return type is unknown.
     * If this is a qualified, user-defined type, it may have been excluded from
     * code generation. If this is a built-in type, you can define an explicit
     * {@link org.jooq.Binding} to specify how this type should be handled.
     * Deprecation can be turned off using {@literal
     * <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public static PgWalSummaryContents PG_WAL_SUMMARY_CONTENTS(
          Field<Long> tli
        , Field<Object> startLsn
        , Field<Object> endLsn
    ) {
        return quoassignment.jooq.pg_catalog.tables.PgWalSummaryContents.PG_WAL_SUMMARY_CONTENTS.call(
            tli,
            startLsn,
            endLsn
        );
    }

    /**
     * The table <code>pg_catalog.regexp_matches</code>.
     */
    public static final RegexpMatches REGEXP_MATCHES = RegexpMatches.REGEXP_MATCHES;

    /**
     * Call <code>pg_catalog.regexp_matches</code>.
     */
    public static Result<RegexpMatchesRecord> REGEXP_MATCHES(
          Configuration configuration
        , String __1
        , String __2
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.RegexpMatches.REGEXP_MATCHES.call(
              __1
            , __2
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.regexp_matches</code> as a table.
     */
    public static RegexpMatches REGEXP_MATCHES(
          String __1
        , String __2
    ) {
        return quoassignment.jooq.pg_catalog.tables.RegexpMatches.REGEXP_MATCHES.call(
            __1,
            __2
        );
    }

    /**
     * Get <code>pg_catalog.regexp_matches</code> as a table.
     */
    public static RegexpMatches REGEXP_MATCHES(
          Field<String> __1
        , Field<String> __2
    ) {
        return quoassignment.jooq.pg_catalog.tables.RegexpMatches.REGEXP_MATCHES.call(
            __1,
            __2
        );
    }

    /**
     * The table <code>pg_catalog.regexp_split_to_table</code>.
     */
    public static final RegexpSplitToTable REGEXP_SPLIT_TO_TABLE = RegexpSplitToTable.REGEXP_SPLIT_TO_TABLE;

    /**
     * Call <code>pg_catalog.regexp_split_to_table</code>.
     */
    public static Result<RegexpSplitToTableRecord> REGEXP_SPLIT_TO_TABLE(
          Configuration configuration
        , String __1
        , String __2
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.RegexpSplitToTable.REGEXP_SPLIT_TO_TABLE.call(
              __1
            , __2
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.regexp_split_to_table</code> as a table.
     */
    public static RegexpSplitToTable REGEXP_SPLIT_TO_TABLE(
          String __1
        , String __2
    ) {
        return quoassignment.jooq.pg_catalog.tables.RegexpSplitToTable.REGEXP_SPLIT_TO_TABLE.call(
            __1,
            __2
        );
    }

    /**
     * Get <code>pg_catalog.regexp_split_to_table</code> as a table.
     */
    public static RegexpSplitToTable REGEXP_SPLIT_TO_TABLE(
          Field<String> __1
        , Field<String> __2
    ) {
        return quoassignment.jooq.pg_catalog.tables.RegexpSplitToTable.REGEXP_SPLIT_TO_TABLE.call(
            __1,
            __2
        );
    }

    /**
     * The table <code>pg_catalog.string_to_table</code>.
     */
    public static final StringToTable STRING_TO_TABLE = StringToTable.STRING_TO_TABLE;

    /**
     * Call <code>pg_catalog.string_to_table</code>.
     */
    public static Result<StringToTableRecord> STRING_TO_TABLE(
          Configuration configuration
        , String __1
        , String __2
        , String __3
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.StringToTable.STRING_TO_TABLE.call(
              __1
            , __2
            , __3
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.string_to_table</code> as a table.
     */
    public static StringToTable STRING_TO_TABLE(
          String __1
        , String __2
        , String __3
    ) {
        return quoassignment.jooq.pg_catalog.tables.StringToTable.STRING_TO_TABLE.call(
            __1,
            __2,
            __3
        );
    }

    /**
     * Get <code>pg_catalog.string_to_table</code> as a table.
     */
    public static StringToTable STRING_TO_TABLE(
          Field<String> __1
        , Field<String> __2
        , Field<String> __3
    ) {
        return quoassignment.jooq.pg_catalog.tables.StringToTable.STRING_TO_TABLE.call(
            __1,
            __2,
            __3
        );
    }

    /**
     * The table <code>pg_catalog.ts_debug</code>.
     */
    public static final TsDebug TS_DEBUG = TsDebug.TS_DEBUG;

    /**
     * @deprecated Unknown data type. Parameter type or return type is unknown.
     * If this is a qualified, user-defined type, it may have been excluded from
     * code generation. If this is a built-in type, you can define an explicit
     * {@link org.jooq.Binding} to specify how this type should be handled.
     * Deprecation can be turned off using {@literal
     * <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public static Result<TsDebugRecord> TS_DEBUG(
          Configuration configuration
        , Object config
        , String document
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.TsDebug.TS_DEBUG.call(
              config
            , document
        )).fetch();
    }

    /**
     * @deprecated Unknown data type. Parameter type or return type is unknown.
     * If this is a qualified, user-defined type, it may have been excluded from
     * code generation. If this is a built-in type, you can define an explicit
     * {@link org.jooq.Binding} to specify how this type should be handled.
     * Deprecation can be turned off using {@literal
     * <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public static TsDebug TS_DEBUG(
          Object config
        , String document
    ) {
        return quoassignment.jooq.pg_catalog.tables.TsDebug.TS_DEBUG.call(
            config,
            document
        );
    }

    /**
     * @deprecated Unknown data type. Parameter type or return type is unknown.
     * If this is a qualified, user-defined type, it may have been excluded from
     * code generation. If this is a built-in type, you can define an explicit
     * {@link org.jooq.Binding} to specify how this type should be handled.
     * Deprecation can be turned off using {@literal
     * <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public static TsDebug TS_DEBUG(
          Field<Object> config
        , Field<String> document
    ) {
        return quoassignment.jooq.pg_catalog.tables.TsDebug.TS_DEBUG.call(
            config,
            document
        );
    }

    /**
     * The table <code>pg_catalog.ts_parse</code>.
     */
    public static final TsParse TS_PARSE = TsParse.TS_PARSE;

    /**
     * Call <code>pg_catalog.ts_parse</code>.
     */
    public static Result<TsParseRecord> TS_PARSE(
          Configuration configuration
        , String parserName
        , String txt
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.TsParse.TS_PARSE.call(
              parserName
            , txt
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.ts_parse</code> as a table.
     */
    public static TsParse TS_PARSE(
          String parserName
        , String txt
    ) {
        return quoassignment.jooq.pg_catalog.tables.TsParse.TS_PARSE.call(
            parserName,
            txt
        );
    }

    /**
     * Get <code>pg_catalog.ts_parse</code> as a table.
     */
    public static TsParse TS_PARSE(
          Field<String> parserName
        , Field<String> txt
    ) {
        return quoassignment.jooq.pg_catalog.tables.TsParse.TS_PARSE.call(
            parserName,
            txt
        );
    }

    /**
     * The table <code>pg_catalog.ts_stat</code>.
     */
    public static final TsStat TS_STAT = TsStat.TS_STAT;

    /**
     * Call <code>pg_catalog.ts_stat</code>.
     */
    public static Result<TsStatRecord> TS_STAT(
          Configuration configuration
        , String query
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.TsStat.TS_STAT.call(
              query
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.ts_stat</code> as a table.
     */
    public static TsStat TS_STAT(
          String query
    ) {
        return quoassignment.jooq.pg_catalog.tables.TsStat.TS_STAT.call(
            query
        );
    }

    /**
     * Get <code>pg_catalog.ts_stat</code> as a table.
     */
    public static TsStat TS_STAT(
          Field<String> query
    ) {
        return quoassignment.jooq.pg_catalog.tables.TsStat.TS_STAT.call(
            query
        );
    }

    /**
     * The table <code>pg_catalog.ts_token_type</code>.
     */
    public static final TsTokenType TS_TOKEN_TYPE = TsTokenType.TS_TOKEN_TYPE;

    /**
     * Call <code>pg_catalog.ts_token_type</code>.
     */
    public static Result<TsTokenTypeRecord> TS_TOKEN_TYPE(
          Configuration configuration
        , Long parserOid
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.TsTokenType.TS_TOKEN_TYPE.call(
              parserOid
        )).fetch();
    }

    /**
     * Get <code>pg_catalog.ts_token_type</code> as a table.
     */
    public static TsTokenType TS_TOKEN_TYPE(
          Long parserOid
    ) {
        return quoassignment.jooq.pg_catalog.tables.TsTokenType.TS_TOKEN_TYPE.call(
            parserOid
        );
    }

    /**
     * Get <code>pg_catalog.ts_token_type</code> as a table.
     */
    public static TsTokenType TS_TOKEN_TYPE(
          Field<Long> parserOid
    ) {
        return quoassignment.jooq.pg_catalog.tables.TsTokenType.TS_TOKEN_TYPE.call(
            parserOid
        );
    }

    /**
     * The table <code>pg_catalog.txid_snapshot_xip</code>.
     */
    public static final TxidSnapshotXip TXID_SNAPSHOT_XIP = TxidSnapshotXip.TXID_SNAPSHOT_XIP;

    /**
     * @deprecated Unknown data type. Parameter type or return type is unknown.
     * If this is a qualified, user-defined type, it may have been excluded from
     * code generation. If this is a built-in type, you can define an explicit
     * {@link org.jooq.Binding} to specify how this type should be handled.
     * Deprecation can be turned off using {@literal
     * <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public static Result<TxidSnapshotXipRecord> TXID_SNAPSHOT_XIP(
          Configuration configuration
        , Object __1
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.TxidSnapshotXip.TXID_SNAPSHOT_XIP.call(
              __1
        )).fetch();
    }

    /**
     * @deprecated Unknown data type. Parameter type or return type is unknown.
     * If this is a qualified, user-defined type, it may have been excluded from
     * code generation. If this is a built-in type, you can define an explicit
     * {@link org.jooq.Binding} to specify how this type should be handled.
     * Deprecation can be turned off using {@literal
     * <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public static TxidSnapshotXip TXID_SNAPSHOT_XIP(
          Object __1
    ) {
        return quoassignment.jooq.pg_catalog.tables.TxidSnapshotXip.TXID_SNAPSHOT_XIP.call(
            __1
        );
    }

    /**
     * @deprecated Unknown data type. Parameter type or return type is unknown.
     * If this is a qualified, user-defined type, it may have been excluded from
     * code generation. If this is a built-in type, you can define an explicit
     * {@link org.jooq.Binding} to specify how this type should be handled.
     * Deprecation can be turned off using {@literal
     * <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public static TxidSnapshotXip TXID_SNAPSHOT_XIP(
          Field<Object> __1
    ) {
        return quoassignment.jooq.pg_catalog.tables.TxidSnapshotXip.TXID_SNAPSHOT_XIP.call(
            __1
        );
    }

    /**
     * The table <code>pg_catalog.unnest</code>.
     */
    public static final Unnest UNNEST = Unnest.UNNEST;

    /**
     * @deprecated Unknown data type. Parameter type or return type is unknown.
     * If this is a qualified, user-defined type, it may have been excluded from
     * code generation. If this is a built-in type, you can define an explicit
     * {@link org.jooq.Binding} to specify how this type should be handled.
     * Deprecation can be turned off using {@literal
     * <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public static Result<UnnestRecord> UNNEST(
          Configuration configuration
        , Object tsvector
    ) {
        return configuration.dsl().selectFrom(quoassignment.jooq.pg_catalog.tables.Unnest.UNNEST.call(
              tsvector
        )).fetch();
    }

    /**
     * @deprecated Unknown data type. Parameter type or return type is unknown.
     * If this is a qualified, user-defined type, it may have been excluded from
     * code generation. If this is a built-in type, you can define an explicit
     * {@link org.jooq.Binding} to specify how this type should be handled.
     * Deprecation can be turned off using {@literal
     * <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public static Unnest UNNEST(
          Object tsvector
    ) {
        return quoassignment.jooq.pg_catalog.tables.Unnest.UNNEST.call(
            tsvector
        );
    }

    /**
     * @deprecated Unknown data type. Parameter type or return type is unknown.
     * If this is a qualified, user-defined type, it may have been excluded from
     * code generation. If this is a built-in type, you can define an explicit
     * {@link org.jooq.Binding} to specify how this type should be handled.
     * Deprecation can be turned off using {@literal
     * <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public static Unnest UNNEST(
          Field<Object> tsvector
    ) {
        return quoassignment.jooq.pg_catalog.tables.Unnest.UNNEST.call(
            tsvector
        );
    }
}
