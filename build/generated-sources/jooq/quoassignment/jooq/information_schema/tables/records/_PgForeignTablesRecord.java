/*
 * This file is generated by jOOQ.
 */
package quoassignment.jooq.information_schema.tables.records;


import org.jooq.impl.TableRecordImpl;

import quoassignment.jooq.information_schema.tables._PgForeignTables;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class _PgForeignTablesRecord extends TableRecordImpl<_PgForeignTablesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for
     * <code>information_schema._pg_foreign_tables.foreign_table_catalog</code>.
     */
    public void setForeignTableCatalog(String value) {
        set(0, value);
    }

    /**
     * Getter for
     * <code>information_schema._pg_foreign_tables.foreign_table_catalog</code>.
     */
    public String getForeignTableCatalog() {
        return (String) get(0);
    }

    /**
     * Setter for
     * <code>information_schema._pg_foreign_tables.foreign_table_schema</code>.
     */
    public void setForeignTableSchema(String value) {
        set(1, value);
    }

    /**
     * Getter for
     * <code>information_schema._pg_foreign_tables.foreign_table_schema</code>.
     */
    public String getForeignTableSchema() {
        return (String) get(1);
    }

    /**
     * Setter for
     * <code>information_schema._pg_foreign_tables.foreign_table_name</code>.
     */
    public void setForeignTableName(String value) {
        set(2, value);
    }

    /**
     * Getter for
     * <code>information_schema._pg_foreign_tables.foreign_table_name</code>.
     */
    public String getForeignTableName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>information_schema._pg_foreign_tables.ftoptions</code>.
     */
    public void setFtoptions(String[] value) {
        set(3, value);
    }

    /**
     * Getter for <code>information_schema._pg_foreign_tables.ftoptions</code>.
     */
    public String[] getFtoptions() {
        return (String[]) get(3);
    }

    /**
     * Setter for
     * <code>information_schema._pg_foreign_tables.foreign_server_catalog</code>.
     */
    public void setForeignServerCatalog(String value) {
        set(4, value);
    }

    /**
     * Getter for
     * <code>information_schema._pg_foreign_tables.foreign_server_catalog</code>.
     */
    public String getForeignServerCatalog() {
        return (String) get(4);
    }

    /**
     * Setter for
     * <code>information_schema._pg_foreign_tables.foreign_server_name</code>.
     */
    public void setForeignServerName(String value) {
        set(5, value);
    }

    /**
     * Getter for
     * <code>information_schema._pg_foreign_tables.foreign_server_name</code>.
     */
    public String getForeignServerName() {
        return (String) get(5);
    }

    /**
     * Setter for
     * <code>information_schema._pg_foreign_tables.authorization_identifier</code>.
     */
    public void setAuthorizationIdentifier(String value) {
        set(6, value);
    }

    /**
     * Getter for
     * <code>information_schema._pg_foreign_tables.authorization_identifier</code>.
     */
    public String getAuthorizationIdentifier() {
        return (String) get(6);
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached _PgForeignTablesRecord
     */
    public _PgForeignTablesRecord() {
        super(_PgForeignTables._PG_FOREIGN_TABLES);
    }

    /**
     * Create a detached, initialised _PgForeignTablesRecord
     */
    public _PgForeignTablesRecord(String foreignTableCatalog, String foreignTableSchema, String foreignTableName, String[] ftoptions, String foreignServerCatalog, String foreignServerName, String authorizationIdentifier) {
        super(_PgForeignTables._PG_FOREIGN_TABLES);

        setForeignTableCatalog(foreignTableCatalog);
        setForeignTableSchema(foreignTableSchema);
        setForeignTableName(foreignTableName);
        setFtoptions(ftoptions);
        setForeignServerCatalog(foreignServerCatalog);
        setForeignServerName(foreignServerName);
        setAuthorizationIdentifier(authorizationIdentifier);
        resetChangedOnNotNull();
    }
}
